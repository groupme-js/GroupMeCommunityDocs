{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>GroupMe has a thriving developer community which has created a variety of applications, bots, and tools. However, while the platform has constantly matured, the public documentation has not. In an effort to help other developers understand and utilize the platform better, this is a community-led effort to document everything possible. If you discover something not listed here, or you find an error in what is listed, please bring it up on the discussion page or submit a pull request.</p> <p>Much of this information is pulled from dev.groupme.com, which is the official GroupMe developers site. However, most of its information is outdated or incomplete, so please help keep this repo up-to-date.</p> <p>If you have any questions or would like to get in touch, please join the GroupMe API Development Group or open an issue.</p> <p>This documentation is not associated with GroupMe or Microsoft</p>"},{"location":"#contents","title":"Contents:","text":"<ul> <li> Bots \u2013 How to create, index, and use bots</li> <li> Group Management \u2013 How to create, join, list, update, etc. groups</li> <li> Subgroup Management \u2013 How to work with subgroups within a parent group</li> <li> Member management \u2013 How to add, remove, and update members in a group</li> <li> Group Messages \u2013 How to list and send messages in groups</li> <li> Calendar Events \u2013 How to list, create, and edit calendar events in a group</li> <li> Polls \u2013 Information on how to make and view polls</li> <li> Message Events \u2013 How to parse system message events</li> <li> Directory Management \u2013 How to list, search, and join public and campus group directories</li> <li> Direct Messages \u2013 How to list, read, and send DMs, as well as how to block/unblock users</li> <li> Users/Contact Management \u2013 How to create, destroy, and manage contacts; as well as fetch info on other users outside of groups</li> <li> Attachments \u2013 Information on how message attachments work, as well as how to upload images to be sent as attachments</li> <li> Reactions \u2013 How to react to messages, and how to see your reactions and the likes leaderboard in groups</li> <li> Pins \u2013 How to use GroupMe's message pinning functionality</li> <li> Emoji \u2013 How GroupMe's custom emoji system works, as well as how to display and send emoji</li> <li> Videos \u2013 Information on how to upload videos to be sent as attachments</li> <li> Image Service \u2013 How to upload Images to GroupMe's CDN</li> <li> Account Management \u2013 How to access/update information about your account, turning on/off SMS mode, and configuring profile details</li> <li> Oauth/MFA \u2013 How to manage API tokens and handle multi-factor authentication with GroupMe</li> <li> Websocket Gateway \u2013 How to connect to the Push service to get real-time interaction with your program</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>The GroupMe Community Docs are constantly evolving and updating! Check out the Contributing Checklist for insights on what documentation we're still in need of for full API coverage. </p>"},{"location":"attachments/","title":"Attachments","text":"<p>When sending messages in groups or DM channels, users (or bots) can add any number of attachments, as noted in the relevant sections of Group Messages, Direct Messages, and Bots. In each of these instances, you add an attachment by including a corresponding object in the \"attachments\" array. This section will list all the different types of attachments possible (That we know of and can find documentation for) and how to send them.</p> <p>All parameters are required unless otherwise specified.</p>"},{"location":"attachments/#images","title":"Images","text":"Object Structure<pre><code>{\n  \"type\": \"image\",\n  \"url\": \"https://i.groupme.com/123456789\"\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>type</p> <p>string - must be \"image\" for an image attachment</p> </li> <li> <p>url</p> <p>string - the URL of the image to send. This image must first be processed by GroupMe's Image Service</p> </li> </ul>"},{"location":"attachments/#video","title":"Video","text":"<p>Object Structure<pre><code>{\n  \"type\": \"video\",\n  \"url\": \"https://v.groupme.com/123456/2021-12-11T16:33:43Z/9999a999.1280x720r90.mp4\",\n  \"preview_url\": \"https://v.groupme.com/123456/2021-12-11T16:33:43Z/9999a999.1280x720r90.jpg\"\n}\n</code></pre> Parameters</p> <ul> <li> <p>type</p> <p>string - must be \"video\" for a video attachment</p> </li> <li> <p>url</p> <p>string - URL to video file, needs to be a <code>v.groupme.com</code> link.</p> </li> <li> <p>preview_url</p> <p>string - URL to video file thumbnail, again it does need to <code>v.groupme.com</code> link. Note that thumbnail images produced by the video service are not <code>i.groupme.com</code> links.</p> </li> </ul>"},{"location":"attachments/#file","title":"File","text":"<p>Object Structure<pre><code>{\n  \"type\":\"file\",\n  \"file_id\":\"abcdabcd-dead-beef-2222-111122223333\"\n}\n</code></pre> Parameters</p> <ul> <li> <p>type</p> <p>string - must be \"file\" for a file attachment</p> </li> <li> <p>url</p> <p>file_id - valid file id from the file service</p> </li> </ul>"},{"location":"attachments/#location","title":"Location","text":"Object Structure<pre><code>{\n  \"type\": \"location\",\n  \"name\": \"Heaven?\",\n  \"lat\": \"64.148430\",\n  \"lng\": \"-21.9355508\"\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>type</p> <p>string - must be \"location\" for a location attachment</p> </li> <li> <p>name</p> <p>string - the name of the location you're sending</p> </li> <li> <p>lat</p> <p>string - the latitude of the location</p> </li> <li> <p>lng</p> <p>string - the longitude of the location.</p> </li> </ul>"},{"location":"attachments/#emoji","title":"Emoji","text":"<p>Only for GroupMe-specific emoji. Standard Unicode emoji (e.g. \ud83d\udca9) do not use this feature.</p> Object Structure<pre><code>{\n  \"type\": \"emoji\",\n  \"placeholder\": \"\ufffd\",\n  \"charmap\": [[1, 62]]\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>type</p> <p>string - must be \"emoji\" for an emoji attachment</p> </li> <li> <p>placeholder</p> <p>string - a placeholder character in the text which is meant to be replaced by the actual emoji.</p> <ul> <li>This can technically be more than one character, but different platforms are inconsistent about how they display the resulting message - some will delete the entire placeholder string, others will only delete the first character</li> </ul> </li> <li> <p>charmap</p> <p>array - an array of arrays of two integers. That is, an array of the form <code>[[1, 62], [2, 0]]</code>.</p> <ul> <li> <p>Each number pair represents one emoji, in the order the placeholder character appears.</p> </li> <li> <p>The first number is the number of the emoji pack the emoji is found in (starting at one), and the second number is the position of the emoji in the array (starting at zero)</p> </li> <li> <p>The first placeholder will be replaced by the emoji indicated by the first charmap, the second placeholder will be replaced by the second, and so on.</p> </li> <li> <p>If there are more placeholder characters than there are charmaps, platforms are inconsistent on how they handle it. Some will render the placeholder, some will render a random emoji.</p> </li> <li> <p>If there are fewer placeholder characters than there are charmaps, the extra charmaps will simply be discarded.</p> </li> </ul> </li> </ul>"},{"location":"attachments/#replies","title":"Replies","text":"<p>Designates a message as a reply to a previous message</p> Object Structure<pre><code>{\n  \"type\": \"reply\",\n  \"reply_id\": \"123456789\",\n  \"base_reply_id\": \"123456789\"\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>type</p> <p>string - must be \"reply\" for a reply attachment</p> </li> <li> <p>reply_id</p> <p>string - the ID of the message you're responding to. Must be greater than or equal to base_reply_id.</p> <ul> <li> <p>This can be omitted, but will result in some clients being inconsistent of if they recognize it as a reply or not.</p> </li> <li> <p>If this is included, and reply_id and base_reply_id differ, this takes precedence</p> </li> </ul> </li> <li> <p>base_reply_id</p> <p>string - the ID of the message you're responding to.</p> </li> </ul>"},{"location":"attachments/#mentions","title":"Mentions","text":"<p>This is how you @mention someone.</p> Object Structure<pre><code>{\n  \"type\": \"mentions\",\n  \"user_ids\": [\"123456789\", \"1234567890\"],\n  \"loci\": [[0, 6], [8, 6]]\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>type</p> <p>string - must be \"mentions\" for a mention attachment</p> </li> <li> <p>user_ids</p> <p>array - an array of the user IDs being mentioned.</p> </li> <li> <p>loci</p> <p>array - an array of arrays of two integers. That is, an array of the form <code>[[0, 6], [8, 6]]</code></p> <ul> <li> <p>Each number pair represents a mention to the person specified in the associated <code>user_ids</code> element</p> </li> <li> <p>The first number represents the position in the text where the mention begins, and the second represents how long it is.</p> <p>So, for example, in the message \"Hi @Lowes\", the first number would be 3, and the second number would be 6.</p> </li> </ul> </li> </ul> <p>Interestingly, because of this system, you don't have to actually type someone's name, or even type @, for someone to be mentioned. There's also no limit on how many people you can @mention at once. My bot, Lowes, has a function which simply says \"@all\" and everyone in the chat gets the notification that they've been mentioned.</p>"},{"location":"attachments/#read-only-attachments","title":"Read Only Attachments","text":"<p>Note</p> <p>These attachment types cannot be sent in a message's attachments array and can only be observed through reading messages that have been sent in groups or direct messages. Most are added by the backend automatically.</p>"},{"location":"attachments/#poll","title":"Poll","text":"<p>This is a read-only attachment type, as it is not sent in one of your messages. Rather, when you create a poll, a message with this attachment is sent for you. </p> <p>Read more about polls here</p> Object Structure<pre><code>{\n  \"type\": \"poll\",\n  \"poll_id\": \"1747858596203713\"\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>type</p> <p>string - must be \"poll\" for a poll attachment</p> </li> <li> <p>pool_id</p> <p>string - the ID of the poll attached to the message</p> </li> </ul>"},{"location":"attachments/#calendar-event","title":"Calendar Event","text":"<p>This is a read-only attachment type, as it is not sent in one of your messages. Rather, when you create an event, a message with this attachment is sent for you. </p> <p>Read more about calendar events here</p> Object Structure<pre><code>{\n  \"type\": \"event\"\n  \"event_id\": \"912fea48717643eda831e72306557100\",\n  \"view\": \"full\",\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - must be \"event\" for a callendar event attachment</p> </li> <li> <p>event_id</p> <p>string - the ID of the event attached to the message</p> </li> <li> <p>view</p> <p>string - describes the way the event should be rendered in chat. This value has not been observed to be anything other than <code>\"full\"</code> so far.</p> </li> </ul>"},{"location":"attachments/#copilot","title":"Copilot","text":"<p>This attachment type is read-only and used exclusively by Copilot in its messages to attach extra information about the Copilot interaction and the user that requested it.</p> Object Structure<pre><code>{\n  \"type\": \"copilot\"\n  \"message_id\": \"u6Us5bXBSQERTNfc6vWGB\",\n  \"part_id\": \"0\",\n  \"prompt_sender\": \"93645911\",\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>type</p> <p>string - must be \"copilot\" for a Copilot attachment</p> </li> <li> <p>message_id</p> <p>string - Copilot specific internal message ID, not the same as the GroupMe message ID</p> </li> <li> <p>part_id</p> <p>string - the index of the message in the Coplilot response. Copilot can respond to a single query using multiple messages, this allows you to order them if there are more than one.</p> </li> <li> <p>prompt_sender</p> <p>string - the GroupMe user ID of the user who initiated the Copilot interaction</p> </li> </ul>"},{"location":"bots/","title":"Webhook Bots","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"bots/#important-notes","title":"Important notes","text":"<p>The bots described in this page are what GroupMe describes as \"bots\". These bots have serious limitations, including but not limited to:</p> <ol> <li> <p>They cannot like messages</p> </li> <li> <p>They cannot be in more than one group</p> </li> <li> <p>They cannot be DM'd (Though they can be attached to their creator's DMs)</p> </li> <li> <p>They cannot read previous messages or any other data in a group - they only have access to a message once, when it's sent to it via the callback URL.</p> </li> </ol> <p>These limitations can produce incredibly powerful and interesting bots, and if your application can deal with these limitations, it's generally safer to use this style of bot. However, if your application needs to be able to do more than that, it may be a better idea to simply create a new user with a different email and phone number, and automate that account by connecting it to GroupMe's push service, and using the rest of the API to do things like create groups, send messages, etc. An example of this (Perhaps not a good example, but an example nonetheless) is my primary bot, Lowes. If you have a better, better-documented example, feel free to submit a pull request changing this section.</p> <p>Lastly, while GroupMe does offer API endpoints for creating, destroying, and indexing bots, and these are documented below, they also offer a web form for managing them, so you should probably use that to do that unless you need to automate these tasks. They also have an official bot tutorial and a bot sample project, so if you're just beginning to play around with bots and APIs, you may find those useful.</p>"},{"location":"bots/#create","title":"Create","text":"<p>Create a bot. The response will include your bot_id - do NOT publish or let anyone else see this! Anyone with this will be able to send messages using your bot!</p> HTTP Request<pre><code>POST /bots\n{\n  \"bot\": {\n    \"name\": \"Dasani Bot\",\n    \"group_id\": \"1234567890\",\n    \"avatar_url\": \"https://assets.bwbx.io/images/users/iqjWHBFdfxIU/ipvgzU.b0q4M/v0/1000x-1.jpg\",\n    \"callback_url\": \"https://example.herokuapp.com/\",\n    \"dm_notification\": false\n  }\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>bot (required)</p> <p>object - an object with the following properties:</p> <ul> <li> <p>name (required)</p> <p>string - the name the bot will show up with</p> </li> <li> <p>group_id (required)</p> <p>string - the id of the chat the bot should be active in</p> </li> <li> <p>avatar_url</p> <p>string - a URL to an image which will be the bot's avatar. This image MUST be proccessed by GroupMe's Image Service before it can be sent.</p> </li> <li> <p>callback_url</p> <p>string - if provided, whenever the bot receives a message, it will be sent as a POST request to this URL.</p> </li> </ul> </li> </ul> HTTP Response<pre><code>Status: 201 Created\n{\n  \"bot_id\": \"1234567890\",\n  \"group_id\": \"1234567890\",\n  \"name\": \"Dasani Bot\",\n  \"avatar_url\": \"https://assets.bwbx.io/images/users/iqjWHBFdfxIU/ipvgzU.b0q4M/v0/1000x-1.jpg\",\n  \"callback_url\": \"https://example.herokuapp.com/\",\n  \"dm_notification\": false\n}\n</code></pre>"},{"location":"bots/#send-message","title":"Send Message","text":"<p>Post a message from a bot</p> HTTP Request<pre><code>POST /bots/post\n{\n  \"bot_id\": \"1234567890\",\n  \"text\": \"Hello World\",\n  \"attachments\": [\n    {\n      \"type\": \"image\",\n      \"url\": \"https://i.groupme.com/123456789\"\n    }\n  ]\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>bot_id (required)</p> <p>string - the ID of the bot.</p> </li> <li> <p>text (required)</p> <p>string - maximum length of 1000 character</p> </li> <li> <p>attachments</p> <p>array - A polymorphic list of attachments (locations, images, replies, etc). You may have more than one of any type of attachment, provided clients can display it.</p> <p>For more information on types of attachments and how to send them, check out the attachments documentation</p> </li> </ul> HTTP Response<pre><code>Status: 201 Created\n</code></pre>"},{"location":"bots/#index","title":"Index","text":"<p>List bots that you have created. The response will include multiple <code>bot_id</code>s - do NOT publish these or let anyone else see these! Anyone with this will be able to send messages using your bot!</p> HTTP Request<pre><code>GET /bots\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n[\n  {\n    \"bot_id\": \"1234567890\",\n    \"group_id\": \"1234567890\",\n    \"name\": \"hal9000\",\n    \"avatar_url\": \"https://i.groupme.com/123456789\",\n    \"callback_url\": \"https://example.com/bots/callback\",\n    \"dm_notification\": false\n  }\n]\n</code></pre>"},{"location":"bots/#destroy","title":"Destroy","text":"<p>Remove a bot that you have created</p> HTTP Request<pre><code>POST /bots/destroy\n</code></pre> <p>Parameters</p> <ul> <li>bot_id (required)</li> </ul> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"calendar/","title":"Calendar Events","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"calendar/#index-events","title":"Index events","text":"<p>List all the upcoming events for the group</p> HTTP Request<pre><code>GET /conversations/:group_id/events/list?end_at=2021-07-12T02:52:50Z&amp;limit=20\n</code></pre> <p>Parameters</p> <ul> <li> <p>end_at (required)</p> <p>string - an ISO 8601-formatted string which represents the date before which no events will be listed. IMO it makes more sense to call this \"start_at\", but that's none of my business.</p> </li> <li> <p>limit (required)</p> <p>integer - the number of results to pull. GroupMe's default is 20, not sure what the limit is.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"events\": [\n    {\n      \"name\": \"Test\",\n      \"start_at\": \"2021-07-13T00:00:00-05:00\",\n      \"end_at\": \"2021-07-15T00:00:00-05:00\",\n      \"is_all_day\": false,\n      \"timezone\": \"America/Chicago\",\n      \"reminders\": [100, 2],\n      \"conversation_id\": \"12321\",\n      \"event_id\": \"1231231231212123123\",\n      \"creator_id\": \"23112312\",\n      \"going\": [\n        \"432\"\n      ],\n      \"not_going\": [],\n      \"created_at\": \"2021-07-12T02:52:50Z\",\n      \"updated_at\": \"2021-07-12T02:52:50Z\"\n    },\n    {\n      \"name\": \"Test 2\",\n      \"start_at\": \"2021-07-14T20:45:00-05:00\",\n      \"end_at\": \"2021-07-15T21:00:00-05:00\",\n      \"is_all_day\": false,\n      \"timezone\": \"America/Chicago\",\n      \"reminders\": [],\n      \"conversation_id\": \"1231231322312\",\n      \"event_id\": \"1231231231322\",\n      \"creator_id\": \"1112312\",\n      \"going\": [\n        \"5463\",\n        \"112344\"\n      ],\n      \"not_going\": [],\n      \"created_at\": \"2021-07-12T01:41:51Z\",\n      \"updated_at\": \"2021-07-12T02:35:16Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"calendar/#show-a-specific-event","title":"Show a Specific Event","text":"<p>List details on a specific event given its ID</p> HTTP Request<pre><code>GET /conversations/:group_id/events/show?event_id=&lt;event_id&gt;\n</code></pre> <p>Parameters</p> <ul> <li> <p>event_id</p> <p>String - The ID of the event you want to fetch</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"event\": {\n    \"name\": \"Event Name\",\n    \"description\": \"Event Description\",\n    \"image_url\": \"https://i.groupme.com/1024x1024.png.8560aca484bf41f4863e2abec6016e07\",\n    \"location\": {\n      \"lat\": 38.88949419381217,\n      \"lng\": -77.0352490246296,\n      \"name\": \"Washington Monument\",\n      \"address\": \"2 15th St NW (btwn Constitution Ave NW &amp; Independence Ave SW) \\nWashington, D.C. 20560 \\nUnited States\"\n    },\n    \"start_at\": \"2021-08-30T01:00:00-04:00\",\n    \"end_at\": \"2021-08-30T01:15:00-04:00\",\n    \"is_all_day\": false,\n    \"timezone\": \"America/New_York\",\n    \"reminders\": [0, 604800],\n    \"conversation_id\": \"70077952\",\n    \"event_id\": \"0f15691677e444ceb64118bf39d41ec8\",\n    \"creator_id\": \"74938777\",\n    \"going\": [\n      \"74938777\"\n    ],\n    \"not_going\": [],\n    \"created_at\": \"2021-08-30T05:01:50Z\",\n    \"updated_at\": \"2021-08-30T05:01:50Z\"\n  }\n}\n</code></pre>"},{"location":"calendar/#create-an-event","title":"Create an event","text":"<p>Creates a calendar event.</p> HTTP Request<pre><code>POST /conversations/:id/events/create\n{\n  \"name\": \"Dasani Appreciation Day\",\n  \"start_at\": \"2021-07-11T20:45:00-05:00\",\n  \"end_at\": \"2021-07-12T20:45:00-05:00\",\n  \"timezone\": \"America/Chicago\",\n  \"description\": \"A day for us all to appreciate the wondrous water that is Dasani\",\n  \"is_all_day\": false,\n  \"image_url\": \"https://i.groupme.com/1051x816.jpeg.b6e08c195b35453c813843295a61b1a4\",\n  \"location\": {\n    \"address\": \"Kalkofnsvegur 2 101, 101 Reykjav\u00edk, Iceland\",\n    \"name\": \"Heaven?\",\n    \"lat\": \"64.148430\",\n    \"lng\": \"-21.9355508\"\n  },\n  \"reminders\": [0, 300]\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>name (required)</p> <p>string - The name of the event.</p> </li> <li> <p>start_at (required)</p> <p>string - A datetime in ISO 8601 format. Represents the date and time that the event starts.</p> </li> <li> <p>end_at (required)</p> <p>string - A datetime in ISO 8601 format. Represents the date and time that the event ends.</p> </li> <li> <p>timezone (required)</p> <p>string - An indication of what timezone the event takes place in. Seems to be based on the TZ Database names.</p> </li> <li> <p>description</p> <p>string - The text you want to use to describe the event.</p> </li> <li> <p>is_all_day</p> <p>boolean - If true, will not specify a time for clients.</p> </li> <li> <p>image_url</p> <p>string - An image URL which will be attached to the event if provided. This image MUST be uploaded to GroupMe's Image Service first.</p> </li> <li> <p>location</p> <p>object - Can contain address, name (required), lat, and lng fields. Address and name are both strings, while lat and lng must be numbers expressed as strings (as shown in the example) which represent the latitude and longitude, respectively, of the location.</p> </li> <li> <p>reminders</p> <p>array - An array of integers, which represent automatic reminders from GroupMe. The number is the number of seconds between the reminder and the start of the event - for example, if one of the numbers is 300, that represents sending a reminder 5 minutes before the event starts. Only two reminders are permitted, and only certain values are permitted: 0, 300, 900, 1800, 3600, 7200, 86400, 172800, and 604800.</p> </li> </ul> HTTP Response<pre><code>Status: 201 Created\n{\n  \"event\": {\n    \"name\": \"Dasani Appreciation Day\",\n    \"start_at\": \"2021-07-11T20:45:00-05:00\",\n    \"end_at\": \"2021-07-12T20:45:00-05:00\",\n    \"timezone\": \"America/Chicago\",\n    \"description\": \"A day for us all to appreciate the wondrous water that is Dasani\",\n    \"is_all_day\": false,\n    \"image_url\": \"https://i.groupme.com/1051x816.jpeg.b6e08c195b35453c813843295a61b1a4\",\n    \"location\": {\n      \"address\": \"Kalkofnsvegur 2 101, 101 Reykjav\u00edk, Iceland\",\n      \"name\": \"Heaven?\",\n      \"lat\": \"64.148430\",\n      \"lng\": \"-21.9355508\"\n    },\n    \"reminders\": [0, 300],\n    \"conversation_id\": \"14538582\",\n    \"event_id\": \"dfgdfghs45q45z4eeease45\",\n    \"creator_id\": \"12312\",\n    \"going\": [\n      \"12312312312\"\n    ],\n    \"not_going\": [],\n    \"created_at\": \"2021-07-12T02:52:50Z\",\n    \"updated_at\": \"2021-07-12T02:52:50Z\"\n  },\n  \"message\": {\n    \"attachments\": [\n      {\n        \"event_id\": \"123123123123123\",\n        \"type\": \"event\",\n        \"view\": \"full\"\n      }\n    ],\n    \"avatar_url\": \"https://i.groupme.com/1100x1148.jpeg.705e8e84384c4249bb956f230e43d67d\",\n    \"created_at\": 1626058370,\n    \"event\": {\n      \"data\": {\n        \"event\": {\n          \"id\": \"123123123123\",\n          \"name\": \"Test\"\n        },\n        \"url\": \"https://s.groupme.com/1wcGxvER\",\n        \"user\": {\n          \"id\": \"123131231\",\n          \"nickname\": \"Dasaniel Royer\"\n        }\n      },\n      \"type\": \"calendar.event.created\"\n    },\n    \"favorited_by\": [],\n    \"group_id\": \"12312312312312\",\n    \"id\": \"21312312312\",\n    \"name\": \"Dasaniel Royer\",\n    \"sender_id\": \"123123123123123\",\n    \"sender_type\": \"user\",\n    \"source_guid\": \"dsfasdfgsfghukjfgdd\",\n    \"system\": false,\n    \"text\": \"Dasaniel Royer created event 'Dasani Appreciation Day' https://s.groupme.com/123123121\",\n    \"user_id\": \"12312311\"\n  }\n}\n</code></pre>"},{"location":"calendar/#editupdate-an-event","title":"Edit/Update an event","text":"<p>Edit or update an event. In order to do this, you must be the original creator of the event. Note that this is very similar to the Create request. You only need to provide whatever parameters you wish to change about the original event, but start_at, end_at, timezone, and is_all_day MUST be provided together if any of them are included!</p> HTTP Request<pre><code>POST /conversations/:group_id/events/update?event_id=1123123\n{\n  \"name\": \"Dasani Appreciation Day\",\n  \"start_at\": \"2021-07-11T20:45:00-05:00\",\n  \"end_at\": \"2021-07-12T20:45:00-05:00\",\n  \"timezone\": \"America/Chicago\",\n  \"description\": \"A day for us all to appreciate the wondrous water that is Dasani\",\n  \"is_all_day\": false,\n  \"image_url\": \"https://i.groupme.com/1051x816.jpeg.b6e08c195b35453c813843295a61b1a4\",\n  \"location\": {\n    \"address\": \"Kalkofnsvegur 2 101, 101 Reykjav\u00edk, Iceland\",\n    \"name\": \"Heaven?\",\n    \"lat\": \"64.148430\",\n    \"lng\": \"-21.9355508\"\n  },\n  \"reminders\": [0, 300]\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>event_id (required)</p> <p>string - the ID of the event to edit. Please note that this is supplied as part of the URL query string, rather than part of the request body.</p> </li> <li> <p>name</p> <p>string - The name of the event.</p> </li> <li> <p>start_at</p> <p>string - A datetime in ISO 8601 format. Represents the date and time that the event starts. If this is included, you MUST also include end_at, timezone, and is_all_day!</p> </li> <li> <p>end_at</p> <p>string - A datetime in ISO 8601 format. Represents the date and time that the event ends. If this is included, you MUST also include start_at, timezone, and is_all_day!</p> </li> <li> <p>timezone</p> <p>string - An indication of what timezone the event takes place in. Seems to be based on the TZ Database names. If this is included, you MUST also include end_at, start_at, and is_all_day!</p> </li> <li> <p>description</p> <p>string - The text you want to use to describe the event.</p> </li> <li> <p>is_all_day</p> <p>boolean - If true, will not specify a time for clients. If this is included, you MUST also include end_at, timezone, and start_at!</p> </li> <li> <p>image_url</p> <p>string - An image URL which will be attached to the event if provided. This image MUST be processed by GroupMe's Image Service before it can be used.</p> </li> <li> <p>location</p> <p>object - Can contain address, name (required), lat, and lng fields. Address and name are both strings, while lat and lng must be numbers expressed as strings (as shown in the example).</p> </li> <li> <p>reminders</p> <p>array - An array of integers, which represent automatic reminders from GroupMe. The number is the number of seconds between the reminder and the start of the event - for example, if one of the numbers is 300, that represents sending a reminder 5 minutes before the event starts. Only two reminders are permitted, and only certain values are permitted: 0, 300, 900, 1800, 3600, 7200, 86400, 172800, and 604800.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n    \"event\": {\n        ... //Refer to Index or Create for information on the Event object\n    }\n}\n</code></pre>"},{"location":"calendar/#deletecancel-an-event","title":"Delete/Cancel an event","text":"<p>Cancel an upcoming event. In order to do this, you much be the creator of the event.</p> HTTP Request<pre><code>DELETE /conversations/:group_id/events/delete?event_id=12312312\n</code></pre> <p>Parameters</p> <ul> <li> <p>event_id (required)</p> <p>string - The ID of the event to delete.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"calendar/#mark-goingnot-going","title":"Mark going/not going","text":"<p>Marks you as going or not going to an event.</p> HTTP Request<pre><code>POST /conversations/:group_id/events/rsvp?event_id=123123123123&amp;going=true\n</code></pre> <p>Parameters</p> <ul> <li> <p>event_id (required)</p> <p>string - The ID of the event to respond to.</p> </li> <li> <p>going (required)</p> <p>boolean - If true, this request will mark you as going. If false, this request will mark you as not going.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n    \"event\": {\n        ... //Refer to Index or Create for details on this object.\n    }\n}\n</code></pre>"},{"location":"calendar/#un-mark-goingnot-going","title":"Un-mark going/not going","text":"<p>Marks the user as neither going nor not going; in other words, marks the user as \"unsure\" or \"pending\".</p> HTTP Request<pre><code>DELETE /conversations/:group_id/events/rsvp/delete?event_id=123123\n</code></pre> <p>Parameters</p> <ul> <li> <p>event_id (required)</p> <p>string - the ID of the event you're responding to</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n    \"event\": {\n        ... //Refer to Index or Create for details on this object.\n    }\n}\n</code></pre>"},{"location":"directories/","title":"Public Directory","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"directories/#preview-public-group","title":"Preview Public Group","text":"<p>This call allows a client to check if a public or campus group requires a \"join question\" in order to apply for membership.</p> HTTP Request<pre><code>GET /groups/:group_id/preview\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n{\n  \"id\": \"101646388\",\n  \"theme_name\": \"wfh\",\n  \"like_icon\": {\n    \"type\": \"emoji\",\n    \"pack_id\": 1,\n    \"pack_index\": 63\n  },\n  \"updated_at\": 1747666946,\n  \"requires_approval\": true,\n  \"show_join_question\": true,\n  \"join_question\": {\n    \"type\": \"join_reason/questions/text\",\n    \"text\": \"Why do you want to join our group?\"\n  },\n  \"children_count\": 14\n}\n</code></pre>"},{"location":"directories/#join-public-group","title":"Join Public Group","text":"<p>Allows you to join (or request to join) a public group without a share token.</p> HTTP Request<pre><code>POST /groups/:group_id/join\n{\n  \"answer\": {\n    \"response\": \"Hi! This is why I'd like to join your group...\"\n  }\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>response</p> <p>String - The answer you'd like to give in response to the group's join question (if one is used, otherwise you can omit this parameter)</p> </li> </ul> HTTP Response<pre><code>Status: 201 Created\n{\n  \"id\": \"1234567890\",\n  \"name\": \"Family\",\n  \"type\": \"private\",\n  \"description\": \"Coolest Family Ever\",\n  \"image_url\": \"https://i.groupme.com/123456789\",\n  \"creator_user_id\": \"1234567890\",\n  \"created_at\": 1302623328,\n  \"updated_at\": 1302623328,\n  \"members\": [\n    {\n      \"user_id\": \"1234567890\",\n      \"nickname\": \"Jane\",\n      \"muted\": false,\n      \"image_url\": \"https://i.groupme.com/123456789\"\n    }\n  ],\n  \"share_url\": \"https://groupme.com/join_group/1234567890/SHARE_TOKEN\",\n  \"messages\": {\n    \"count\": 100,\n    \"last_message_id\": \"1234567890\",\n    \"last_message_created_at\": 1302623328,\n    \"preview\": {\n      \"nickname\": \"Jane\",\n      \"text\": \"Hello world\",\n      \"image_url\": \"https://i.groupme.com/123456789\",\n      \"attachments\": [\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/123456789\"\n        },\n        {\n          \"type\": \"location\",\n          \"lat\": \"40.738206\",\n          \"lng\": \"-73.993285\",\n          \"name\": \"GroupMe HQ\"\n        },\n        {\n          \"type\": \"emoji\",\n          \"placeholder\": \"\",\n          \"charmap\": [\n            [1, 42],\n            [2, 34]\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"directories/#search-public-groups","title":"Search Public Groups","text":"<p>Returns a list of public groups based on search terms or lattitude/longitude coordinates. If a location is supplied, groups will be orderd roughly by distance from that point.</p> <p>Returned groups will be split into 4 different lists, depending on where they were found.  * <code>directories</code> if you're a member of a university campus directory and matching results were found in your school domain * <code>popular</code> if they were found among the general list of public groups * <code>trending</code> if they were found on the curated list of groups published by GroupMe, * <code>nearby</code> if they were found in the automatically curated list of groups close to you.</p> <p>Important</p> <p>This request is relative to <code>https://api.groupme.com/v1/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>GET https://api.groupme.com/v1/search\n</code></pre> <p>Parameters</p> <ul> <li> <p>per_page</p> <p>Integer - Defines how many groups to return in the response. This value maxes out at 10,000 and defaults to 20 if omitted.</p> </li> <li> <p>from</p> <p>Integer - The offset index to begin returning results from in the paginated list of groups. For example, from=0 returns results starting at the beginning, from=20 skips the first 20 groups. Defaults to 0 if omitted.</p> </li> <li> <p>query</p> <p>String - A set of search terms to filter groups in the response.</p> </li> <li> <p>lattitude</p> <p>Decimal - The lattitude coordinate for a point used to sort groups by their distance.</p> </li> <li> <p>longitude</p> <p>Decimal - The longitude coordinate for a point used to sort groups by their distance.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"directories\": [\n    {\n      \"id\": \"91086340\",\n      \"name\": \"Group Memes\",\n      \"description\": \"Memes\",\n      \"avatar_url\": \"https://i.groupme.com/236x236.jpeg.93edc4af32944ad18f863be07d3a8069\",\n      \"directory_id\": \"1928\",\n      \"group_type\": \"closed\",\n      \"max_members\": 5000,\n      \"members_count\": 16,\n      \"locations\": [\n        {\n          \"point\": {\n            \"lat\": 40.23512,\n            \"lon\": -111.66219\n          },\n          \"name\": \"Provo, Utah, United States\",\n          \"full_address\": \"Provo, Utah, Utah, United States\",\n          \"locality\": \"Provo\",\n          \"country_region\": \"United States\",\n          \"country_subdivision\": \"Utah\",\n          \"country_code\": \"US\"\n        }\n      ],\n      \"children_count\": 0\n    }\n    ...\n  ],\n  \"popular\": [\n    {\n      \"id\": \"101804807\",\n      \"name\": \"Clean Memes\",\n      \"description\": \"Clean memes is a clean gc and the people are (partially insane) great!\",\n      \"avatar_url\": \"https://i.groupme.com/960x960.jpeg.2c7a7d23ddde418ba6b7c164bd195e3a\",\n      \"directory_id\": \"\",\n      \"group_type\": \"closed\",\n      \"max_members\": 5000,\n      \"members_count\": 4261,\n        \"locations\": [\n          {\n            \"point\": {\n              \"lat\": 40.713047,\n              \"lon\": -74.00723\n            },\n            \"name\": \"New York, New York, United States\",\n            \"full_address\": \"New York, New York, United States\",\n            \"locality\": \"New York\",\n            \"country_region\": \"United States\",\n            \"country_subdivision\": \"New York\",\n            \"country_code\": \"US\"\n          },\n        ],\n        \"children_count\": 18,\n        \"trending_allowed\": true\n      },\n      ...\n  ],\n  \"nearby\": [ ... ],\n  \"trending\": [ ... ],\n  \"location_name\": \"Salt Lake City, Utah United States\"\n}\n</code></pre>"},{"location":"directories/#index-trending","title":"Index Trending","text":"<p>Returns a paginated list of the top 50 public groups, curated by GroupMe. </p> <p>Important</p> <p>This request is relative to <code>https://api.groupme.com/v1/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>GET https://api.groupme.com/v1/search/trending\n</code></pre> <p>Parameters</p> <ul> <li> <p>per_page</p> <p>Integer - Defines how many groups to return in the response. This value maxes out at 10,000 and defaults to 20 if omitted.</p> </li> <li> <p>from</p> <p>Integer - The offset index to begin returning results from in the paginated list of groups. For example, from=0 returns results starting at the beginning, from=20 skips the first 20 groups. Defaults to 0 if omitted.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"trending\": [\n    {\n      \"id\": \"98296943\",\n      \"name\": \"Chilling\",\n      \"description\": \"a place to chill \ud83d\ude01 make sure you read the rules!\",\n      \"avatar_url\": \"https://i.groupme.com/626x626.jpeg.2be242e18c3e418c90d280e064100163\",\n      \"directory_id\": \"\",\n      \"group_type\": \"closed\",\n      \"max_members\": 5000,\n      \"members_count\": 4832,\n      \"locations\": [\n        {\n          \"point\": {\n            \"lat\": 38.892062,\n            \"lon\": -77.019912\n          },\n          \"name\": \"United States\",\n          \"full_address\": \"United States\",\n          \"country_region\": \"United States\",\n          \"country_code\": \"US\"\n        }\n      ],\n      \"children_count\": 10,\n      \"trending_allowed\": true\n    },\n    {\n      \"id\": \"92309453\",\n      \"name\": \"Memes\",\n      \"description\": \"\u00af\\\\_(\u30c4)_/\u00af\",\n      \"avatar_url\": \"https://i.groupme.com/917x923.jpeg.1cb8105bb7df41fbbea2a5c5bc78fd34\",\n      \"directory_id\": \"\",\n      \"group_type\": \"closed\",\n      \"max_members\": 10000,\n      \"members_count\": 8789,\n      \"locations\": [\n        {\n          \"point\": {\n            \"lat\": 32.71576,\n            \"lon\": -117.163817\n           },\n          \"name\": \"San Diego, California, United States\",\n          \"full_address\": \"San Diego, San Diego, California, United States\",\n          \"locality\": \"San Diego\",\n          \"country_region\": \"United States\",\n          \"country_subdivision\": \"California\",\n          \"country_code\": \"US\"\n        }\n      ],\n      \"children_count\": 8,\n      \"trending_allowed\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"directories/#index-popular","title":"Index Popular","text":"<p>Returns a paginated list of all public groups, ordered by member count (largest first).</p> <p>Important</p> <p>This request is relative to <code>https://api.groupme.com/v1/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>GET https://api.groupme.com/v1/search/popular\n</code></pre> <p>Parameters</p> <ul> <li> <p>per_page</p> <p>Integer - Defines how many groups to return in the response. This value maxes out at 10,000 and defaults to 20 if omitted.</p> </li> <li> <p>from</p> <p>Integer - The offset index to begin returning results from in the paginated list of groups. For example, from=0 returns results starting at the beginning, from=20 skips the first 20 groups. Defaults to 0 if omitted.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"popular\": [\n    {\n      \"id\": \"92309453\",\n      \"name\": \"Memes\",\n      \"description\": \"\u00af\\\\_(\u30c4)_/\u00af\",\n      \"avatar_url\": \"https://i.groupme.com/917x923.jpeg.1cb8105bb7df41fbbea2a5c5bc78fd34\",\n      \"directory_id\": \"\",\n      \"group_type\": \"closed\",\n      \"max_members\": 10000,\n      \"members_count\": 8794,\n      \"locations\": [\n        {\n          \"point\": {\n            \"lat\": 32.71576,\n            \"lon\": -117.163817\n          },\n          \"name\": \"San Diego, California, United States\",\n          \"full_address\": \"San Diego, San Diego, California, United States\",\n          \"locality\": \"San Diego\",\n          \"country_region\": \"United States\",\n          \"country_subdivision\": \"California\",\n          \"country_code\": \"US\"\n        },\n      ],\n      \"children_count\": 8,\n      \"trending_allowed\": true\n    },\n    {\n      \"id\": \"16020539\",\n      \"name\": \"\u13cc\u13aa\u13de\u13f4\u13aaNY \u13df\u13bb\u13aa\u13a2 \ud83c\udfaf\ud83d\udd25\ud83d\udc36\ud83d\udce2\",\n      \"description\": \"\",\n      \"avatar_url\": \"https://i.groupme.com/1000x1000.jpeg.bf826152799f401f90045b64da690bb4\",\n      \"directory_id\": \"\",\n      \"group_type\": \"closed\",\n      \"max_members\": 8000,\n      \"members_count\": 7608,\n      \"locations\": [\n        {\n          \"point\": {\n            \"lat\": 42.66709,\n            \"lon\": -73.77516\n          },\n          \"name\": \"Albany, New York, United States\",\n          \"full_address\": \"Albany, Albany, New York, United States\",\n          \"locality\": \"Albany\",\n          \"country_region\": \"United States\",\n          \"country_subdivision\": \"New York\",\n          \"country_code\": \"US\"\n        }\n      ],\n      \"children_count\": 0\n    }\n    ...\n  ]\n}\n</code></pre>"},{"location":"directories/#campus-directories","title":"Campus Directories","text":"<p>Note</p> <p>These calls are exclusive to users who are already members of campus directories. For simplicity, this documentation will not cover how to join a campus domain via the API, but it does discuss how to navigate and manage one once you're a member.</p>"},{"location":"directories/#index","title":"Index","text":"<p>List information about the campus directory you're a member of</p> HTTP Request<pre><code>GET /directories\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n{\n  \"id\": 1928,\n  \"name\": \"Brigham Young University\",\n  \"avatar_url\": \"\",\n  \"type\": \"school_directory\",\n  \"color\": \"#00458D\",\n  \"short_name\": \"BYU\",\n  \"members_count\": 10380,\n  \"groups_count\": 170,\n  \"share_url\": \"https://groupme.com/join_community/1928/6rRBO8DD\",\n  \"share_qr_code_url\": \"https://image.groupme.com/qr/join_community/1928/6rRBO8DD/preview\"\n}\n</code></pre>"},{"location":"directories/#index-groups","title":"Index Groups","text":"<p>Returns a paginated list of groups that are a part of the domain.</p> <p>Important</p> <p>This request is relative to <code>https://api.groupme.com/v1/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>GET https://api.groupme.com/v1/search/directories\n</code></pre> <p>Parameters</p> <ul> <li> <p>per_page</p> <p>Integer - Defines how many groups to return in the response. This value maxes out at 10,000 and defaults to 20 if omitted.</p> </li> <li> <p>from</p> <p>Integer - The offset index to begin returning results from in the paginated list of groups. For example, from=0 returns results starting at the beginning, from=20 skips the first 20 groups. Defaults to 0 if omitted.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"directories\": [\n    {\n      \"id\": \"101838896\",\n      \"name\": \"BYU Geology Club\",\n      \"description\": \"New geoclub group chat!\ud83d\ude0a\",\n      \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.ec0495b9ac3f47b79f4ae279e1aeb4a5\",\n      \"directory_id\": \"1928\",\n      \"group_type\": \"private\",\n      \"max_members\": 5000,\n      \"members_count\": 116,\n      \"children_count\": 0\n    },\n    {\n      \"id\": \"104386559\",\n      \"name\": \"BYU Wildlife and Range\",\n      \"description\": \"\ud83e\udd85Wildlife and Range Student Association \ud83e\udd8c\",\n      \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.0d027c5a80934f22a2ac2e6204b9e563\",\n      \"directory_id\": \"1928\",\n      \"group_type\": \"private\",\n      \"max_members\": 5000,\n      \"members_count\": 81,\n      \"children_count\": 0\n    }\n    ...\n  ]\n}\n</code></pre>"},{"location":"directories/#index-members","title":"Index Members","text":"<p>Return a list containing all of the users who are visible to you within the campus directory. Note that the responses you get are also dependant on the privacy status of other users in the directory. Some people have their profiles set to be visible to only their major or graduation year, or hidden entirely.</p> <p>Important</p> <p>This request is relative to <code>https://api.groupme.com/v1/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>GET https://api.groupme.com/v1/search/directory/users\n</code></pre> <p>Parameters</p> <ul> <li> <p>per_page</p> <p>Integer - Defines how many groups to return in the response. This value maxes out at 10,000 and defaults to 20 if omitted.</p> </li> <li> <p>from</p> <p>Integer - The offset index to begin returning results from in the paginated list of groups. For example, from=0 returns results starting at the beginning, from=20 skips the first 20 groups. Defaults to 0 if omitted.</p> </li> <li> <p>majors</p> <p>Integer - A major code you'd like to filter by. The full dictionary of majors and their assigned codes can be found here: https://web.groupme.com/assets/majors/majors.en-US.json. You can include this parameter multiple times in one request to filter by multiple majors.</p> </li> <li> <p>graduation_year</p> <p>Integer - A graduation year you'd like to filter users by.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"users\": [\n    {\n      \"id\": \"105436130\",\n      \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.63a049689246446ca2685764191ce7c3\",\n      \"name\": \"Mikey\",\n      \"bio\": \"\",\n      \"graduation_year\": \"\",\n      \"majors\": [\"3702\"],\n      \"social_media_links\": [],\n      \"shared_group_ids\": null,\n      \"created_at\": \"2022-08-24T17:52:38+0000\",\n      \"photo_urls\": null,\n      \"song_url\": \"\",\n      \"interests\": null\n    },\n    {\n      \"id\": \"93031586\",\n      \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.4a1dca36b02744b0bac8cfe85a2d0331\",\n      \"name\": \"Spencer\",\n      \"bio\": \"\",\n      \"graduation_year\": \"2024\",\n      \"majors\": [\"3702\"],\n      \"social_media_links\": [],\n      \"shared_group_ids\": null,\n      \"created_at\": \"2021-05-04T17:25:12+0000\",\n      \"photo_urls\": null,\n      \"song_url\": \"\",\n      \"interests\": null\n    },\n    ...\n  ]\n}\n</code></pre>"},{"location":"dms/","title":"Direct Messages","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"dms/#list-existing-dm-channels","title":"List Existing DM Channels","text":"<p>Returns a paginated list of direct message chats, or conversations, sorted by updated_at descending.</p> HTTP Request<pre><code>GET /chats\n</code></pre> <p>Parameters</p> <ul> <li> <p>page</p> <p>integer - Page number (Starts at 1, Defaults to 1)</p> </li> <li> <p>per_page</p> <p>integer \u2014 Number of chats per page (Defaults to 20)</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n[\n  {\n    \"created_at\": 1352299338,\n    \"updated_at\": 1352299338,\n    \"last_message\": {\n      \"attachments\": [\n\n      ],\n      \"avatar_url\": \"https://i.groupme.com/200x200.jpeg.abcdef\",\n      \"conversation_id\": \"12345+67890\",\n      \"created_at\": 1352299338,\n      \"favorited_by\": [\n\n      ],\n      \"id\": \"1234567890\",\n      \"name\": \"John Doe\",\n      \"recipient_id\": \"67890\",\n      \"sender_id\": \"12345\",\n      \"sender_type\": \"user\",\n      \"source_guid\": \"GUID\",\n      \"text\": \"Hello world\",\n      \"user_id\": \"12345\"\n    },\n    \"messages_count\": 10,\n    \"other_user\": {\n      \"avatar_url\": \"https://i.groupme.com/200x200.jpeg.abcdef\",\n      \"id\": 12345,\n      \"name\": \"John Doe\"\n    }\n  }\n]\n</code></pre>"},{"location":"dms/#show-specific-dm-channel","title":"Show Specific DM Channel","text":"<p>Directly fetch details about a specific DM channel using its compound <code>chat_id</code>. </p> HTTP Request<pre><code>GET /chats/:chat_id\n</code></pre> <p>Parameters</p> <ul> <li> <p>chat_id</p> <p>string - this is the compound ID of the chat, consisting of two seperate user IDs. It should look something like <code>93645911+118825642</code>.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"created_at\": 1705616604,\n  \"last_message\": {\n    \"attachments\": [],\n    \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.a13c40722d454d0e9c59d2cedb119056\",\n    \"conversation_id\": \"56366372+93645911\",\n    \"created_at\": 1747778589,\n    \"favorited_by\": [],\n    \"id\": \"174777858990222590\",\n    \"name\": \"Bob\",\n    \"recipient_id\": \"93645911\",\n    \"sender_id\": \"56366372\",\n    \"sender_type\": \"user\",\n    \"source_guid\": \"FB9B32E6-45B8-4A63-8FAA-4A60005A0A60\",\n    \"text\": \"I think it\u2019s a good idea!\",\n    \"user_id\": \"56366372\",\n    \"pinned_at\": null,\n    \"pinned_by\": \"\"\n  },\n  \"messages_count\": 742,\n  \"other_user\": {\n    \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.a13c409e2d454320e9c59d2cedb119056\",\n    \"id\": \"56366372\",\n    \"name\": \"Bob\"\n  },\n  \"updated_at\": 1747778589,\n  \"message_deletion_period\": 2147483647,\n  \"message_deletion_mode\": [\"sender\"],\n  \"requires_approval\": false,\n  \"unread_count\": null,\n  \"last_read_message_id\": null,\n  \"last_read_at\": null,\n  \"message_edit_period\": 15\n}\n</code></pre>"},{"location":"dms/#index-messages","title":"Index Messages","text":"<p>Fetch direct messages between two users.</p> <p>DMs are returned in groups of 20, ordered by created_at descending.</p> <p>If no messages are found (e.g. when filtering with since_id) we return code 304.</p> <p>Note that for historical reasons, likes are returned as an array of user ids in the favorited_by key.</p> HTTP Request<pre><code>GET /direct_messages\n</code></pre> <p>Parameters</p> <ul> <li> <p>other_user_id (required)</p> <p>string \u2014 The other participant in the conversation.</p> </li> <li> <p>before_id</p> <p>string \u2014 Returns messages created before the given message ID</p> </li> <li> <p>since_id</p> <p>string \u2014 Returns messages created after the given message ID</p> </li> <li> <p>after_id</p> <p>string - Returns messages created immediately after the given message ID</p> </li> <li> <p>limit</p> <p>integer - Number of messages returned. Default is 20. Max is 100.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"count\": 123,\n  \"direct_messages\": [\n    {\n      \"attachments\": [],\n      \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.a13c409e2d454d082c59d2cedb119056\",\n      \"conversation_id\": \"56366372+93645911\",\n      \"created_at\": 1747778589,\n      \"favorited_by\": [],\n      \"id\": \"174777858990222590\",\n      \"name\": \"Bob\",\n      \"recipient_id\": \"93645911\",\n      \"sender_id\": \"56366372\",\n      \"sender_type\": \"user\",\n      \"source_guid\": \"FB9B32E6-45B8-4A63-8FAA-4A60005A0A60\",\n      \"text\": \"I think it\u2019s a good idea!\",\n      \"user_id\": \"56366372\",\n      \"pinned_at\": null,\n      \"pinned_by\": \"\"\n    }\n  ],\n  \"read_receipt\": {\n    \"id\": \"\",\n    \"chat_id\": \"56366372+93645911\",\n    \"message_id\": \"174777858990222590\",\n    \"user_id\": \"93645911\",\n    \"read_at\": 1747779017\n  }\n}\n</code></pre> <p>Note</p> <p>If the server has no <code>read_receipt</code> parameter to share, it will be completely absent from the response.</p>"},{"location":"dms/#send-dm","title":"Send DM","text":"<p>Send a DM to another user</p> <p>If you want to attach an image, you must first process it through the image service (More on that in the attachments documentation).</p> <p>Attachments of type emoji rely on data from emoji PowerUps.</p> <p>Clients use a placeholder character in the message text and specify a replacement charmap to substitute emoji characters</p> <p>The character map is an array of arrays containing rune data ([[{pack_id,offset}],...]).</p> <p>The placeholder should be a high-point/invisible UTF-8 character.</p> <p>HTTP Request<pre><code>POST /direct_messages\n{\n  \"direct_message\": {\n    \"source_guid\": \"GUID\",\n    \"recipient_id\": \"20\",\n    \"text\": \"Hello world \",\n    \"attachments\": [\n      {\n        \"type\": \"image\",\n        \"url\": \"https://i.groupme.com/123456789\"\n      },\n      {\n        \"type\": \"image\",\n        \"url\": \"https://i.groupme.com/123456789\"\n      },\n      {\n        \"type\": \"location\",\n        \"lat\": \"40.738206\",\n        \"lng\": \"-73.993285\",\n        \"name\": \"GroupMe HQ\"\n      },\n      {\n        \"type\": \"emoji\",\n        \"placeholder\": \"\",\n        \"charmap\": [\n          [1, 42],\n          [2, 34]\n        ]\n      }\n    ]\n  }\n}\n</code></pre> Parameters * source_guid (required)</p> <pre><code>string - Client-side IDs for messages. This can be used by clients to set their own identifiers on messages, but the server also scans these for de-duplication. That is, if two messages are sent with the same source_guid within one minute of each other, the second message will fail with a 409 Conflict response. So it's important to set this to a unique value for each message.\n</code></pre> <ul> <li> <p>recipient_id (required)</p> <p>string - the GroupMe user ID of the recipient of this message.</p> </li> <li> <p>text (required)</p> <p>string - This can be omitted if at least one attachment is present. The maximum length is 1,000 characters.</p> </li> <li> <p>attachments</p> <p>array - A polymorphic list of attachments (locations, images, etc). You may have more than one of any type of attachment, provided clients can display it.</p> <p>For more information on types of attachments and how to send them, check out the attachments documentation</p> </li> </ul> <p>HTTP Response<pre><code>Status: 201 Created\n{\n  \"message\": {\n    \"id\": \"1234567890\",\n    \"source_guid\": \"GUID\",\n    \"recipient_id\": \"20\",\n    \"user_id\": \"1234567890\",\n    \"created_at\": 1302623328,\n    \"name\": \"John\",\n    \"avatar_url\": \"https://i.groupme.com/123456789\",\n    \"text\": \"Hello world \",\n    \"pinned_by\": \"\",\n    \"pinned_at\": null,\n    \"favorited_by\": [\n      \"101\"\n    ],\n    \"attachments\": [\n      {\n        \"type\": \"image\",\n        \"url\": \"https://i.groupme.com/123456789\"\n      },\n      {\n        \"type\": \"location\",\n        \"lat\": \"40.738206\",\n        \"lng\": \"-73.993285\",\n        \"name\": \"GroupMe HQ\"\n      },\n      {\n        \"type\": \"emoji\",\n        \"placeholder\": \"\",\n        \"charmap\": [\n          [1, 42],\n          [2, 34]\n        ]\n      }\n    ]\n  }\n}\n</code></pre> HTTP Response<pre><code>Status: 403 Forbidden\nUser has been auto-banned for sending too many messages.\n</code></pre> HTTP Response<pre><code>Status: 400 Bad Request\nThere's a problem with the parameters. Check errors.\n</code></pre></p>"},{"location":"dms/#delete-a-message","title":"Delete a message","text":"HTTP Request<pre><code>DELETE /conversations/:group_id/messages/:message_id\n</code></pre> HTTP Response<pre><code>Status: 204 Deleted\n</code></pre>"},{"location":"dms/#send-a-read-receipt","title":"Send a Read Receipt","text":"<p>You can only mark new messages as read, attempting to read a message sent before one you have already read will update the timestamp on the latest read message.</p> <p>Important</p> <p>This request is relative to <code>https://v2.groupme.com/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>POST https://v2.groupme.com/read_receipts\n{\n  \"read_receipt\": {\n    \"message_id\": \"174769395496126372\",\n    \"chat_id\": \"74938777+93645911\"\n  },\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>message_id</p> <p>String - The ID of the message  you'd like to mark read.</p> </li> <li> <p>chat_id</p> <p>String - The ID of the direct message channel the message can be found in.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"read_receipt\": {\n    \"id\": \"174769438312353599\",\n    \"chat_id\": \"74938777+93645911\",\n    \"message_id\": \"174769438312353599\",\n    \"user_id\": \"93645911\",\n    \"read_at\": 1747694449\n  }\n}\n</code></pre>"},{"location":"emoji/","title":"Emoji Packs (PowerUps)","text":"<p>GroupMe allows users to send special non-standard (non-Unicode) emoji. They're basically just small inline images. These emojis are also known as Powerups.</p> <p>If any message contains special GroupMe emoji, there will be an attachment in the attachments list defining the emoji in the message.</p> <p>Here's the JSON response for a sample message containing emoji:</p> HTTP Response<pre><code>{\n  \"attachments\": [\n    {\n      \"charmap\": [\n        [3, 13],\n        [3, 12],\n        [3, 11]\n      ],\n      \"placeholder\": \"\ufffd\",\n      \"type\": \"emoji\"\n    }\n  ],\n  \"avatar_url\": \"[avatar url will go here]\",\n  \"created_at\": 1234567890, \n  \"favorited_by\": [],\n  \"group_id\": \"98765432\",\n  \"id\": \"123456789012345678\",\n  \"name\": \"Firstname Lastname\",\n  \"sender_id\": \"12345678\",\n  \"sender_type\": \"user\",\n  \"source_guid\": \"android-e8b9d6c9-d2d7-4b9c-b140-1419f60cb1b5\",\n  \"system\": false,\n  \"text\": \"\ufffd\ufffd\ufffd\",\n  \"user_id\": \"12345678\",\n  \"platform\": \"gm\"\n}\n</code></pre> <p>The message text contains a placeholder Unicode character that defines where the user inserted emoji into their message. Note that these \ufffd characters alone don't convey any information about which emoji was sent--that information is provided in the attachment. The \ufffd characters are merely placeholders to be replaced later on with the emoji images.</p> <p>The JSON format for the emoji attachment looks like this:</p> Object Structure<pre><code>{\n  \"charmap\": [\n    [3, 13],\n    [3, 12],\n    [3, 11]\n  ],\n  \"placeholder\": \"\ufffd\",\n  \"type\": \"emoji\"\n}\n</code></pre> <p>The <code>placeholder</code> attribute tells you the Unicode character you should replace with an image (this is the same character that shows up in the message <code>text</code>).</p> <p>The <code>charmap</code> attribute tells you which emojis were used in the message (see the next section for details).</p> <p>Notice how there's only one \ufffd character given in the <code>placeholder</code> even though there are several emojis I used in this message. That's because each \ufffd character represents a different emoji in the <code>charmap</code>. So, the first \ufffd character in the message text represents the first item in the charmap array <code>[3, 13]</code>, the second \ufffd character represents the second item <code>[3, 12]</code>, and so on. So, if you're writing code to display these emojis, I would recommend looping through the <code>charmap</code> and replace the first <code>placeholder</code> character in the text with the emoji.</p> <p>Each emoji in the <code>charmap</code> is represented as an array of two integers (ex. <code>[3, 13]</code>). The first integer in the array is the emoji pack number--it tells you which emoji pack it came from. The second character is the emoji index--this tells you the specific emoji inside the pack. So, with the example <code>[3, 13]</code>, this is the 13th emoji in the 3rd emoji pack.</p>"},{"location":"emoji/#finding-which-emoji-is-which","title":"Finding which emoji is which","text":"<p>If you have the GroupMe app on your device, open a chat and click on the emoji button next to the text box. The emoji packs are the tabs across the top (GroupMe Emoji, Summer, Back to School, Halloween, etc), and you can click on one of the tabs to see the emojis inside the pack. Note: The packs in the GroupMe app are not necessarily in the same order as the pack number! More on that later.</p> <p>There's also an API endpoint which will give you all the emoji packs in JSON format--just send a GET request to <code>https://powerup.groupme.com/powerups</code> (you don't need to use an API key). The returned data looks like this (note: To save space, I reduced the results to show only a few emoji from one pack. If you'd like to see all the emoji packs, you can check out the full JSON at https://powerup.groupme.com/powerups):</p> HTTP Response<pre><code>{\n  \"powerups\": [\n    {\n      \"id\": \"emoji-groupme\",\n      \"name\": \"GroupMe Emoji\",\n      \"description\": \"#)\",\n      \"type\": \"emoji\",\n      \"created_at\": 1368809636,\n      \"updated_at\": 1600905600,\n      \"store_icon\": null,\n      \"screenshots\": null,\n      \"meta\": {\n        \"pack_id\": 1,\n        \"transliterations\": [\n          \"smiley face\",\n          \"happy face\",\n          \"pleased face\",\n          \"content face\",\n          \"winky face\",\n          \"thrilled face\",\n          \"swoon face\",\n          \"clown face\",\n          \"goofy face\",\n          \"silly face\",\n          \"neil face\",\n          \"glasses face\",\n          \"cool guy face\",\n          \"cigar face\",\n          \"blank face\",\n          \"bummed face\",\n          \"sad face\",\n          \"tearful face\",\n          \"crying face\",\n          \"nervous face\",\n          \"frustrated face\",\n          \"mad face\",\n          \"conniving face\",\n          \"grossed out face\",\n          \"sick face\",\n          \"puking face\",\n          \"dead face\",\n          \"yawn face\",\n          \"surprised face\",\n          \"shocked face\",\n          \"stoney face\",\n          \"tweak face\",\n          \"kissy face\",\n          \"surprised glasses face\",\n          \"hand over mouth face\",\n          \"hands over eyes face\",\n          \"confused face\",\n          \"zipper mouth face\",\n          \"sleeping face\",\n          \"caffeinated face\",\n          \"emo face\",\n          \"gasp face\",\n          \"goatee face\",\n          \"steve\",\n          \"jared\",\n          \"iced coffee\",\n          \"latte\",\n          \"icecream cookie\",\n          \"hotsauce\",\n          \"tacotaco\",\n          \"pizza\",\n          \"popping bottle\",\n          \"brown bottle\",\n          \"lighter\",\n          \"red solo cup\",\n          \"pingpong\",\n          \"pinball flipper\",\n          \"pink electric guitar\",\n          \"wet wipes\",\n          \"dead fish\",\n          \"petey\",\n          \"pivotal\",\n          \"dino\",\n          \"heart\",\n          \"badge icon\",\n          \"grilled cheese\",\n          \"poundie\",\n          \"frowndie\",\n          \"headphones poundie\",\n          \"blonde poundie\",\n          \"nerdie poundie\",\n          \"evil poundie\",\n          \"angel poundie\",\n          \"kitty poundie\",\n          \"pink bow poundie\",\n          \"3d poundie\",\n          \"sunglasses poundie\",\n          \"beanie poundie\",\n          \"bowtie poundie\",\n          \"kissie poundie\",\n          \"bandit poundie\",\n          \"disguise poundie\",\n          \"beard poundie\",\n          \"tongue out poundie\"\n        ],\n        \"background\": [],\n        \"icon\": [\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/icon.mdpi.26x26.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/icon.mdpi.26x26.zip\",\n            \"density\": 160,\n            \"x\": 26,\n            \"y\": 26\n          },\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/icon.hdpi.39x39.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/icon.hdpi.39x39.zip\",\n            \"density\": 240,\n            \"x\": 39,\n            \"y\": 39\n          },\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/icon.xhdpi.52x52.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/icon.xhdpi.52x52.zip\",\n            \"density\": 320,\n            \"x\": 52,\n            \"y\": 52\n          },\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/icon.xxhdpi.78x78.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/icon.xxhdpi.78x78.zip\",\n            \"density\": 480,\n            \"x\": 78,\n            \"y\": 78\n          },\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/icon.xxxhdpi.104x104.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/icon.xxxhdpi.104x104.zip\",\n            \"density\": 640,\n            \"x\": 104,\n            \"y\": 104\n          }\n        ],\n        \"inline\": [\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/inline.mdpi.20x20.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/inline.mdpi.20x20.zip\",\n            \"density\": 160,\n            \"x\": 20,\n            \"y\": 20\n          },\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/inline.hdpi.30x30.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/inline.hdpi.30x30.zip\",\n            \"density\": 240,\n            \"x\": 30,\n            \"y\": 30\n          },\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/inline.xhdpi.40x40.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/inline.xhdpi.40x40.zip\",\n            \"density\": 320,\n            \"x\": 40,\n            \"y\": 40\n          },\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/inline.xxhdpi.60x60.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/inline.xxhdpi.60x60.zip\",\n            \"density\": 480,\n            \"x\": 60,\n            \"y\": 60\n          },\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/inline.xxxhdpi.80x80.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/inline.xxxhdpi.80x80.zip\",\n            \"density\": 640,\n            \"x\": 80,\n            \"y\": 80\n          }\n        ],\n        \"outline\": [\n          {\n            \"folder_url\": \"https://powerups.s3.amazonaws.com/emoji/1/outline/mdpi/\",\n            \"density\": 160,\n            \"x\": 60,\n            \"y\": 60\n          },\n          {\n            \"folder_url\": \"https://powerups.s3.amazonaws.com/emoji/1/outline/hdpi/\",\n            \"density\": 240,\n            \"x\": 90,\n            \"y\": 90\n          },\n          {\n            \"folder_url\": \"https://powerups.s3.amazonaws.com/emoji/1/outline/xhdpi/\",\n            \"density\": 320,\n            \"x\": 120,\n            \"y\": 120\n          },\n          {\n            \"folder_url\": \"https://powerups.s3.amazonaws.com/emoji/1/outline/xxhdpi/\",\n            \"density\": 480,\n            \"x\": 180,\n            \"y\": 180\n          },\n          {\n            \"folder_url\": \"https://powerups.s3.amazonaws.com/emoji/1/outline/xxxhdpi/\",\n            \"density\": 640,\n            \"x\": 240,\n            \"y\": 240\n          }\n        ],\n        \"keyboard\": [\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/keyboard.mdpi.40x40.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/keyboard.mdpi.40x40.zip\",\n            \"density\": 160,\n            \"x\": 40,\n            \"y\": 40\n          },\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/keyboard.hdpi.60x60.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/keyboard.hdpi.60x60.zip\",\n            \"density\": 240,\n            \"x\": 60,\n            \"y\": 60\n          },\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/keyboard.xhdpi.80x80.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/keyboard.xhdpi.80x80.zip\",\n            \"density\": 320,\n            \"x\": 80,\n            \"y\": 80\n          },\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/keyboard.xxhdpi.120x120.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/keyboard.xxhdpi.120x120.zip\",\n            \"density\": 480,\n            \"x\": 120,\n            \"y\": 120\n          },\n          {\n            \"image_url\": \"https://powerups.s3.amazonaws.com/emoji/1/keyboard.xxxhdpi.160x160.png\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/keyboard.xxxhdpi.160x160.zip\",\n            \"density\": 640,\n            \"x\": 160,\n            \"y\": 160\n          }\n        ],\n        \"sticker\": [\n          {\n            \"folder_url\": \"https://powerups.s3.amazonaws.com/emoji/1/sticker/mdpi/\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/sticker.mdpi.60x60.zip\",\n            \"density\": 160,\n            \"x\": 60,\n            \"y\": 60\n          },\n          {\n            \"folder_url\": \"https://powerups.s3.amazonaws.com/emoji/1/sticker/hdpi/\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/sticker.hdpi.90x90.zip\",\n            \"density\": 240,\n            \"x\": 90,\n            \"y\": 90\n          },\n          {\n            \"folder_url\": \"https://powerups.s3.amazonaws.com/emoji/1/sticker/xhdpi/\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/sticker.xhdpi.120x120.zip\",\n            \"density\": 320,\n            \"x\": 120,\n            \"y\": 120\n          },\n          {\n            \"folder_url\": \"https://powerups.s3.amazonaws.com/emoji/1/sticker/xxhdpi/\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/sticker.xxhdpi.180x180.zip\",\n            \"density\": 480,\n            \"x\": 180,\n            \"y\": 180\n          },\n          {\n            \"folder_url\": \"https://powerups.s3.amazonaws.com/emoji/1/sticker/xxxhdpi/\",\n            \"zip_url\": \"https://powerups.s3.amazonaws.com/emoji/1/sticker.xxxhdpi.240x240.zip\",\n            \"density\": 640,\n            \"x\": 240,\n            \"y\": 240\n          }\n        ]\n      }\n    }\n  ],\n  \"categories\": [\n    {\n      \"id\": \"emoji-featured\",\n      \"name\": \"Featured\",\n      \"description\": \"Featured emoji packs\",\n      \"updated_at\": 1507081416,\n      \"powerups\": [\n        \"emoji-marchmadness\",\n        \"emoji-adventuretime\"\n      ]\n    },\n    null,\n    null\n  ]\n}\n</code></pre> <p>It looks like each powerup in the <code>powerups</code> array corresponds to a category. Note that the index of a given powerup is NOT necessarily the ID you should send in the attachment. Instead, look for <code>powerup[index].meta.pack_id</code> for the Pack ID.</p> <p><code>icon</code> is an array of the pack icons (shown in the tabs in the emoji picker), <code>inline</code> and <code>keyboard</code> (not sure of the difference between the two, other than the keyboard emojis being a little larger) both contain the full set of images for the pack (<code>image_url</code> gives you a super long sprite sheet of all of them, whereas <code>zip_url</code> gives you a zip file with 0.png, 1.png, 2.png etc. Each entry contains a <code>density</code> value, which gives you the intended screen DPI the emoji should be used on. Also, the <code>transliterations</code> array contains short text descriptions of each emoji--useful for search keywords or when you're displaying the message text somewhere you can't insert inline images (such as in a notification).</p> <p>Note that some of the higher-DPI <code>image_url</code>s are giving me Access Denied errors. I'm not sure why.</p>"},{"location":"emoji/#sending-emoji","title":"Sending emoji","text":"<p>There isn't really anything special to sending emojis--just craft a message whose <code>text</code> contains a placeholder character and create an attachment in the same format as above.</p> <p>If you'd like some example code to work off of, here's a short proof-of-concept I made that lets me send custom emojis:</p> <pre><code>(async () =&gt; {\n  const rawResponse = await fetch('https://api.groupme.com/v3/groups/YOUR_GROUP_NAME/messages?token=YOUR_API_TOKEN', {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\"message\":{source_guid: \"c9eef281-3bd5-4da6-b8d3-31ac1d63ad45\", attachments: [{\"charmap\": [[2,1],[2,2],[2,3]], \"placeholder\": \"\ufffd\", \"type\": \"emoji\"}], \"text\": \"Hello, this is an emoji test! 1:\ufffd, 2:\ufffd, 3:\ufffd\"}})\n  });\n  const content = await rawResponse.json();\n\n  console.log(content);\n})();\n</code></pre> <p>Note that in my experience it doesn't seem to matter what the placeholder is, as long as you keep it consistent with the message.</p>"},{"location":"events/","title":"Message Events","text":"<p>GroupMe messages can contain an <code>event</code> object, which describes system-generated occurrences or specific actions within a group, subgroup (topic), or DM. These events provide structured data about changes like members being added, polls being created, calendar events being updated, messages being pinned, and more. Messages containing events often have <code>system: true</code> or a <code>sender_type</code> of \"system\" or \"service\".</p> <p>This document lists the different <code>event.type</code> values observed, along with the structure of their corresponding <code>event</code> object.</p> <p>API Inconsistency: User ID Data Types</p> <p>Developers should be aware that within the <code>event.data</code> objects detailed below, user IDs (such as <code>user.id</code>, <code>member.id</code>, <code>pinned_by</code>, etc.) are sometimes represented as numbers and other times as strings. This is inconsistent with the general GroupMe API practice where user IDs are typically strings. These types may be patched at any time. This highlights the critical need to handle both types robustly in your code.</p>"},{"location":"events/#membership-events","title":"Membership Events","text":"<p>Events related to group membership changes (users joining, leaving, etc.). These apply to main groups.</p>"},{"location":"events/#membershipannounceadded","title":"<code>membership.announce.added</code>","text":"<p>Indicates that one or more users have been added to the group by an existing member.</p> Object Structure<pre><code>{\n  \"type\": \"membership.announce.added\",\n  \"data\": {\n    \"added_users\": [\n      {\n        \"id\": 131245991,\n        \"nickname\": \"Sprocket\"\n      }\n    ],\n    \"adder_user\": {\n      \"id\": 93645911,\n      \"nickname\": \"bill\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>membership.announce.added</code>.</p> </li> <li> <p>data (object) - Contains details of the added members.</p> <ul> <li> <p>added_users (array of objects) - A list of users who were added. Each object contains:</p> <ul> <li> <p>id</p> <p>number - The ID of the added user (e.g., <code>131245991</code>). (See warning about User ID types).</p> </li> <li> <p>nickname</p> <p>string - The nickname of the added user.</p> </li> </ul> </li> <li> <p>adder_user (object) - Information about the user who added the new member(s).</p> <ul> <li> <p>id</p> <p>number - The ID of the user who added the new member(s).</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who added the new member(s).</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#membershipannouncejoined","title":"<code>membership.announce.joined</code>","text":"<p>Indicates that a user has joined the group (e.g., via a share link or if the group is open).</p> <p>Note</p> <p>This event typically fires in groups that either have \"Request to Join\" enabled or in smaller groups (generally with fewer than ~200 members). In very large, open groups, individual join events might not always be generated.</p> Object Structure<pre><code>{\n  \"type\": \"membership.announce.joined\",\n  \"data\": {\n    \"user\": {\n      \"id\": 131245991,\n      \"nickname\": \"Sprocket\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>membership.announce.joined</code>.</p> </li> <li> <p>data (object) - Contains details of the user who joined.</p> <ul> <li> <p>user (object) - Information about the user who joined.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who joined (e.g., <code>131245991</code>). (See warning about User ID types).</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who joined.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#membershipannouncerejoined","title":"<code>membership.announce.rejoined</code>","text":"<p>Indicates that a user has rejoined the group.</p> Object Structure<pre><code>{\n  \"type\": \"membership.announce.rejoined\",\n  \"data\": {\n    \"user\": {\n      \"id\": 131245991,\n      \"nickname\": \"Sprocket\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>membership.announce.rejoined</code>.</p> </li> <li> <p>data (object) - Contains details of the user who rejoined.</p> <ul> <li> <p>user (object) - Information about the user who rejoined.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who rejoined (e.g., <code>131245991</code>). (See warning about User ID types).</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who rejoined.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#membershipnotificationsexited","title":"<code>membership.notifications.exited</code>","text":"<p>Indicates that a user has left the group themselves.</p> Object Structure<pre><code>{\n  \"type\": \"membership.notifications.exited\",\n  \"data\": {\n    \"removed_user\": {\n      \"id\": 131245991,\n      \"nickname\": \"Sprocket\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>membership.notifications.exited</code>.</p> </li> <li> <p>data (object) - Contains details of the user who exited.</p> <ul> <li> <p>removed_user (object) - Information about the user who exited the group.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who exited (e.g., <code>131245991</code>). (See warning about User ID types).</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who exited.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#membershipnotificationsremoved","title":"<code>membership.notifications.removed</code>","text":"<p>Indicates that a user has been removed from the group by another member.</p> Object Structure<pre><code>{\n  \"type\": \"membership.notifications.removed\",\n  \"data\": {\n    \"remover_user\": {\n      \"id\": 93645911,\n      \"nickname\": \"bill\"\n    },\n    \"removed_user\": {\n      \"id\": 131245991,\n      \"nickname\": \"Sprocket\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>membership.notifications.removed</code>.</p> </li> <li> <p>data (object) - Contains details of the removed member.</p> <ul> <li> <p>remover_user (object) - Information about the user who performed the removal.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who performed the removal.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who performed the removal.</p> </li> </ul> </li> <li> <p>removed_user (object) - Information about the user who was removed.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who was removed (e.g., <code>131245991</code>). (See warning about User ID types).</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who was removed.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#group-management-events","title":"Group Management Events","text":"<p>Events related to changes in main group settings and properties.</p>"},{"location":"events/#groupavatar_change","title":"<code>group.avatar_change</code>","text":"<p>Indicates that the group's avatar has been changed.</p> Object Structure<pre><code>{\n  \"type\": \"group.avatar_change\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    },\n    \"avatar_url\": \"https://i.groupme.com/1024x1536.jpeg.fb916ff109cd498dad1fc67978d51fff\"\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.avatar_change</code>.</p> </li> <li> <p>data (object) - Contains details of the avatar change.</p> <ul> <li> <p>user (object) - Information about the user who changed the avatar.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who changed the avatar.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who changed the avatar.</p> </li> </ul> </li> <li> <p>avatar_url</p> <p>string - The URL of the new group avatar.</p> </li> </ul> </li> </ul>"},{"location":"events/#grouplike_icon_removed","title":"<code>group.like_icon_removed</code>","text":"<p>Indicates that the group's custom like icon has been removed, reverting to the default.</p> Object Structure<pre><code>{\n  \"type\": \"group.like_icon_removed\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.like_icon_removed</code>.</p> </li> <li> <p>data (object) - Contains details of the like icon removal.</p> <ul> <li> <p>user (object) - Information about the user who removed the custom like icon.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who removed the custom like icon.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who removed the custom like icon.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#grouplike_icon_set","title":"<code>group.like_icon_set</code>","text":"<p>Indicates that a custom like icon has been set for the group.</p> Object Structure<pre><code>{\n  \"type\": \"group.like_icon_set\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    },\n    \"like_icon\": {\n      \"pack_id\": 1,\n      \"pack_index\": 1,\n      \"type\": \"emoji\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.like_icon_set</code>.</p> </li> <li> <p>data (object) - Contains details of the new like icon.</p> <ul> <li> <p>user (object) - Information about the user who set the like icon.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who set the like icon.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who set the like icon.</p> </li> </ul> </li> <li> <p>like_icon (object) - Details of the custom like icon.</p> <ul> <li> <p>pack_id</p> <p>number - The ID of the emoji pack.</p> </li> <li> <p>pack_index</p> <p>number - The index of the emoji within the pack.</p> </li> <li> <p>type</p> <p>string - The type of like icon (e.g., \"emoji\").</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#groupname_change","title":"<code>group.name_change</code>","text":"<p>Indicates that the group's name has been changed.</p> Object Structure<pre><code>{\n  \"type\": \"group.name_change\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    },\n    \"name\": \"blah\"\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.name_change</code>.</p> </li> <li> <p>data (object) - Contains details of the name change.</p> <ul> <li> <p>user (object) - Information about the user who changed the group name.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who changed the group name.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who changed the group name.</p> </li> </ul> </li> <li> <p>name</p> <p>string - The new name of the group.</p> </li> </ul> </li> </ul>"},{"location":"events/#groupowner_changed","title":"<code>group.owner_changed</code>","text":"<p>Indicates that the ownership of the group has been transferred.</p> Object Structure<pre><code>{\n  \"type\": \"group.owner_changed\",\n  \"data\": {\n    \"old_owner\": {\n      \"id\": 131245991,\n      \"nickname\": \"Sprocket\"\n    },\n    \"new_owner\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.owner_changed</code>.</p> </li> <li> <p>data (object) - Contains details of the ownership change.</p> <ul> <li> <p>old_owner (object) - Information about the previous owner.</p> <ul> <li> <p>id</p> <p>number - The ID of the previous owner (e.g., <code>131245991</code>). (See warning about User ID types).</p> </li> <li> <p>nickname</p> <p>string - The nickname of the previous owner.</p> </li> </ul> </li> <li> <p>new_owner (object) - Information about the new owner.</p> <ul> <li> <p>id</p> <p>number - The ID of the new owner.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the new owner.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#grouprequires_approval_disabled","title":"<code>group.requires_approval_disabled</code>","text":"<p>Indicates that the \"join requires approval\" setting has been disabled for the group.</p> Object Structure<pre><code>{\n  \"type\": \"group.requires_approval_disabled\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.requires_approval_disabled</code>.</p> </li> <li> <p>data (object) - Contains details of the setting change.</p> <ul> <li> <p>user (object) - Information about the user who changed the setting.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who changed the setting.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who changed the setting.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#grouprequires_approval_enabled","title":"<code>group.requires_approval_enabled</code>","text":"<p>Indicates that the \"join requires approval\" setting has been enabled for the group.</p> Object Structure<pre><code>{\n  \"type\": \"group.requires_approval_enabled\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.requires_approval_enabled</code>.</p> </li> <li> <p>data (object) - Contains details of the setting change.</p> <ul> <li> <p>user (object) - Information about the user who changed the setting.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who changed the setting.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who changed the setting.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#grouprole_change_admin","title":"<code>group.role_change_admin</code>","text":"<p>Indicates that a member's role has been changed regarding admin status.</p> Object Structure<pre><code>{\n  \"type\": \"group.role_change_admin\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"bill\"\n    },\n    \"role\": \"admin\",\n    \"member\": {\n      \"id\": 131245991,\n      \"nickname\": \"Sprocket\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.role_change_admin</code>.</p> </li> <li> <p>data (object) - Contains details of the role change.</p> <ul> <li> <p>user (object) - Information about the user who performed the role change.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who performed the role change.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who performed the role change.</p> </li> </ul> </li> <li> <p>role</p> <p>string - The new role assigned (e.g., \"admin\").</p> </li> <li> <p>member (object) - Information about the member whose role was changed.</p> <ul> <li> <p>id</p> <p>number - The ID of the member whose role was changed (e.g., <code>131245991</code>). (See warning about User ID types).</p> </li> <li> <p>nickname</p> <p>string - The nickname of the member whose role was changed.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#groupshared","title":"<code>group.shared</code>","text":"<p>Indicates that group sharing (join link) has been enabled.</p> Object Structure<pre><code>{\n  \"type\": \"group.shared\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    },\n    \"share_url\": \"https://groupme.com/join_group/108126494/1Os5CrBg\",\n    \"share_qr_code_url\": \"https://image.groupme.com/qr/join_group/108126494/1Os5CrBg/preview\"\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.shared</code>.</p> </li> <li> <p>data (object) - Contains details of the group sharing enablement.</p> <ul> <li> <p>user (object) - Information about the user who enabled sharing.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who enabled sharing.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who enabled sharing.</p> </li> </ul> </li> <li> <p>share_url</p> <p>string - The URL to join the group.</p> </li> <li> <p>share_qr_code_url</p> <p>string - The URL for the QR code image to join the group.</p> </li> </ul> </li> </ul>"},{"location":"events/#groupsubgroup_created","title":"<code>group.subgroup_created</code>","text":"<p>Indicates that a new topic (subgroup/channel) has been created within the group.</p> Object Structure<pre><code>{\n  \"type\": \"group.subgroup_created\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"bill\"\n    },\n    \"subgroup_topic\": \"test topic\",\n    \"subgroup_avatar_url\": null,\n    \"subgroup_id\": 108126678\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.subgroup_created</code>.</p> </li> <li> <p>data (object) - Contains details of the created subgroup.</p> <ul> <li> <p>user (object) - Information about the user who created the topic.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who created the topic.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who created the topic.</p> </li> </ul> </li> <li> <p>subgroup_topic</p> <p>string - The name/topic of the created subgroup.</p> </li> <li> <p>subgroup_avatar_url</p> <p>string or null - The URL of the avatar for the subgroup, if any.</p> </li> <li> <p>subgroup_id</p> <p>number - The ID of the newly created subgroup.</p> </li> </ul> </li> </ul>"},{"location":"events/#groupsubgroup_removed","title":"<code>group.subgroup_removed</code>","text":"<p>Indicates that a topic (subgroup/channel) has been removed from the group.</p> Object Structure<pre><code>{\n  \"type\": \"group.subgroup_removed\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"bill\"\n    },\n    \"subgroup_topic\": \"new topic\",\n    \"subgroup_id\": 108126567\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.subgroup_removed</code>.</p> </li> <li> <p>data (object) - Contains details of the removed subgroup.</p> <ul> <li> <p>user (object) - Information about the user who removed the topic.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who removed the topic.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who removed the topic.</p> </li> </ul> </li> <li> <p>subgroup_topic</p> <p>string - The name/topic of the removed subgroup.</p> </li> <li> <p>subgroup_id</p> <p>number - The ID of the removed subgroup.</p> </li> </ul> </li> </ul>"},{"location":"events/#grouptheme_change","title":"<code>group.theme_change</code>","text":"<p>Indicates that the group's chat theme has been changed.</p> Object Structure<pre><code>{\n  \"type\": \"group.theme_change\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    },\n    \"theme_name\": \"ideas\"\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.theme_change</code>.</p> </li> <li> <p>data (object) - Contains details of the theme change.</p> <ul> <li> <p>user (object) - Information about the user who changed the theme.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who changed the theme.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who changed the theme.</p> </li> </ul> </li> <li> <p>theme_name</p> <p>string - The name of the new theme (e.g., \"ideas\", \"default\", \"stars\").</p> </li> </ul> </li> </ul>"},{"location":"events/#grouptopic_change","title":"<code>group.topic_change</code>","text":"<p>Indicates that the group's description (often referred to as \"topic\" in settings) has been changed.</p> Object Structure<pre><code>{\n  \"type\": \"group.topic_change\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    },\n    \"topic\": \"blah\"\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.topic_change</code>.</p> </li> <li> <p>data (object) - Contains details of the description change.</p> <ul> <li> <p>user (object) - Information about the user who changed the group description.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who changed the group description.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who changed the group description.</p> </li> </ul> </li> <li> <p>topic</p> <p>string - The new description of the group.</p> </li> </ul> </li> </ul>"},{"location":"events/#grouptype_change","title":"<code>group.type_change</code>","text":"<p>Indicates that the group's type (e.g., private, closed, announcement) has been changed.</p> Object Structure<pre><code>{\n  \"type\": \"group.type_change\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    },\n    \"type\": \"closed\",\n    \"message_edit_period\": 15\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.type_change</code>.</p> </li> <li> <p>data (object) - Contains details of the type change.</p> <ul> <li> <p>user (object) - Information about the user who changed the group type.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who changed the group type.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who changed the group type.</p> </li> </ul> </li> <li> <p>type</p> <p>string - The new type of the group. Observed values include: *   <code>\"closed\"</code>: Members can be added by other members. *   <code>\"private\"</code>: Only admins can add new members. (Note: API text might sometimes say \"open\" for this type). *   <code>\"announcement\"</code>: Only admins can send messages.</p> </li> <li> <p>message_edit_period</p> <p>number - The time window (in minutes) during which messages can be edited. This value can change based on the group type (e.g., <code>15</code> for closed/private, <code>43200</code> for announcement, or <code>null</code>/absent).</p> </li> </ul> </li> </ul>"},{"location":"events/#groupunshared","title":"<code>group.unshared</code>","text":"<p>Indicates that group sharing (join link) has been disabled.</p> Object Structure<pre><code>{\n  \"type\": \"group.unshared\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.unshared</code>.</p> </li> <li> <p>data (object) - Contains details of the group sharing disablement.</p> <ul> <li> <p>user (object) - Information about the user who disabled sharing.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who disabled sharing.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who disabled sharing.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#groupvisibility_setcommunity","title":"<code>group.visibility_set.community</code>","text":"<p>Indicates the group's visibility has been set to a specific community (e.g., a campus directory).</p> <p>Note</p> <p>The specific school directory information is usually part of the message text rather than the event data.</p> Object Structure<pre><code>{\n  \"type\": \"group.visibility_set.community\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.visibility_set.community</code>.</p> </li> <li> <p>data (object) - Contains details of the visibility change.</p> <ul> <li> <p>user (object) - Information about the user who changed the visibility.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who changed the visibility.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who changed the visibility.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#groupvisibility_sethidden","title":"<code>group.visibility_set.hidden</code>","text":"<p>Indicates the group has been made hidden and is not discoverable.</p> Object Structure<pre><code>{\n  \"type\": \"group.visibility_set.hidden\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.visibility_set.hidden</code>.</p> </li> <li> <p>data (object) - Contains details of the visibility change.</p> <ul> <li> <p>user (object) - Information about the user who changed the visibility.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who changed the visibility.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who changed the visibility.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#groupvisibility_setsearchable","title":"<code>group.visibility_set.searchable</code>","text":"<p>Indicates the group has been made visible and can be found in Discover.</p> Object Structure<pre><code>{\n  \"type\": \"group.visibility_set.searchable\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.visibility_set.searchable</code>.</p> </li> <li> <p>data (object) - Contains details of the visibility change.</p> <ul> <li> <p>user (object) - Information about the user who changed the visibility.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who changed the visibility.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who changed the visibility.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#subgrouptopic-management-events","title":"Subgroup/Topic Management Events","text":"<p>Events related to changes in subgroup (topic/channel) settings and properties within a main group.</p>"},{"location":"events/#groupsubgroup_avatar_change","title":"<code>group.subgroup_avatar_change</code>","text":"<p>Indicates that a subgroup's avatar has been changed.</p> Object Structure<pre><code>{\n  \"type\": \"group.subgroup_avatar_change\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"bill\"\n    },\n    \"subgroup_topic\": \"test\",\n    \"subgroup_avatar_url\": \"https://i.groupme.com/1170x2532.jpeg.efff7f6b52ee4ea1b25f081f3f4a6dd8\",\n    \"parent_id\": 108126494\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.subgroup_avatar_change</code>.</p> </li> <li> <p>data (object) - Contains details of the subgroup avatar change.</p> <ul> <li> <p>user (object) - Information about the user who changed the subgroup avatar.</p> <ul> <li> <p>id</p> <p>number - The ID of the user.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user.</p> </li> </ul> </li> <li> <p>subgroup_topic</p> <p>string - The current name/topic of the subgroup.</p> </li> <li> <p>subgroup_avatar_url</p> <p>string - The URL of the new subgroup avatar.</p> </li> <li> <p>parent_id</p> <p>number - The ID of the main group this subgroup belongs to.</p> </li> </ul> </li> </ul>"},{"location":"events/#groupsubgroup_description_change","title":"<code>group.subgroup_description_change</code>","text":"<p>Indicates that a subgroup's description has been changed.</p> Object Structure<pre><code>{\n  \"type\": \"group.subgroup_description_change\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"bill\"\n    },\n    \"subgroup_topic\": \"test topic\",\n    \"subgroup_description\": \"new description\",\n    \"parent_id\": 108126494\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.subgroup_description_change</code>.</p> </li> <li> <p>data (object) - Contains details of the subgroup description change.</p> <ul> <li> <p>user (object) - Information about the user who changed the subgroup description.</p> <ul> <li> <p>id</p> <p>number - The ID of the user.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user.</p> </li> </ul> </li> <li> <p>subgroup_topic</p> <p>string - The name/topic of the subgroup.</p> </li> <li> <p>subgroup_description</p> <p>string - The new description for the subgroup.</p> </li> <li> <p>parent_id</p> <p>number - The ID of the main group this subgroup belongs to.</p> </li> </ul> </li> </ul>"},{"location":"events/#groupsubgroup_like_icon_change","title":"<code>group.subgroup_like_icon_change</code>","text":"<p>Indicates that a subgroup's custom like icon has been changed or removed.</p> Object Structure<pre><code>{\n  \"type\": \"group.subgroup_like_icon_change\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"bill\"\n    },\n    \"subgroup_topic\": \"test topic\",\n    \"parent_id\": 108126494,\n    \"like_icon\": {\n      \"pack_id\": 1,\n      \"pack_index\": 36,\n      \"type\": \"emoji\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.subgroup_like_icon_change</code>.</p> </li> <li> <p>data (object) - Contains details of the subgroup like icon change.</p> <ul> <li> <p>user (object) - Information about the user who changed the like icon.</p> <ul> <li> <p>id</p> <p>number - The ID of the user.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user.</p> </li> </ul> </li> <li> <p>subgroup_topic</p> <p>string - The name/topic of the subgroup.</p> </li> <li> <p>parent_id</p> <p>number - The ID of the main group this subgroup belongs to.</p> </li> <li> <p>like_icon (object or null) - Details of the custom like icon. If <code>null</code>, the custom like icon was removed.</p> <ul> <li> <p>pack_id</p> <p>number - The ID of the emoji pack (if <code>like_icon</code> is not null).</p> </li> <li> <p>pack_index</p> <p>number - The index of the emoji within the pack (if <code>like_icon</code> is not null).</p> </li> <li> <p>type</p> <p>string - The type of like icon, e.g., \"emoji\" (if <code>like_icon</code> is not null).</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#groupsubgroup_name_change","title":"<code>group.subgroup_name_change</code>","text":"<p>Indicates that a subgroup's name (topic) has been changed.</p> Object Structure<pre><code>{\n  \"type\": \"group.subgroup_name_change\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"bill\"\n    },\n    \"subgroup_topic\": \"test\",\n    \"parent_id\": 108126494\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.subgroup_name_change</code>.</p> </li> <li> <p>data (object) - Contains details of the subgroup name change.</p> <ul> <li> <p>user (object) - Information about the user who changed the subgroup name.</p> <ul> <li> <p>id</p> <p>number - The ID of the user.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user.</p> </li> </ul> </li> <li> <p>subgroup_topic</p> <p>string - The new name/topic of the subgroup.</p> </li> <li> <p>parent_id</p> <p>number - The ID of the main group this subgroup belongs to.</p> </li> </ul> </li> </ul>"},{"location":"events/#groupsubgroup_type_change","title":"<code>group.subgroup_type_change</code>","text":"<p>Indicates that a subgroup's type (e.g., closed, announcement) has been changed.</p> Object Structure<pre><code>{\n  \"type\": \"group.subgroup_type_change\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"bill\"\n    },\n    \"subgroup_topic\": \"test topic\",\n    \"parent_id\": 108126494,\n    \"type\": \"closed\",\n    \"message_edit_period\": 15\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.subgroup_type_change</code>.</p> </li> <li> <p>data (object) - Contains details of the subgroup type change.</p> <ul> <li> <p>user (object) - Information about the user who changed the subgroup type.</p> <ul> <li> <p>id</p> <p>number - The ID of the user.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user.</p> </li> </ul> </li> <li> <p>subgroup_topic</p> <p>string - The name/topic of the subgroup.</p> </li> <li> <p>parent_id</p> <p>number - The ID of the main group this subgroup belongs to.</p> </li> <li> <p>type</p> <p>string - The new type of the subgroup (e.g., \"closed\", \"announcement\").</p> </li> <li> <p>message_edit_period</p> <p>number - The time window for message editing, corresponding to the type (e.g., <code>15</code> for closed, <code>43200</code> for announcement).</p> </li> </ul> </li> </ul>"},{"location":"events/#call-events","title":"Call Events","text":"<p>Events related to group calls.</p>"},{"location":"events/#groupcallended","title":"<code>group.call.ended</code>","text":"<p>Indicates that a group call has ended.</p> Object Structure<pre><code>{\n  \"type\": \"group.call.ended\",\n  \"data\": {\n    \"call_duration\": 9770,\n    \"user\": {\n      \"id\": \"system\",\n      \"nickname\": \"system\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.call.ended</code>.</p> </li> <li> <p>data (object) - Contains details about the ended call.</p> <ul> <li> <p>call_duration</p> <p>number - The duration of the call in milliseconds.</p> </li> <li> <p>user (object) - Information about who ended the call.</p> <ul> <li> <p>id</p> <p>string - The ID of the user who ended the call (e.g., <code>\"system\"</code>). In some cases, if a user ends it, this might be their numerical ID as a string or number - API is inconsistent.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who ended the call (e.g., <code>\"system\"</code>).</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#groupcallstarted","title":"<code>group.call.started</code>","text":"<p>Indicates that a group call has been started.</p> Object Structure<pre><code>{\n  \"type\": \"group.call.started\",\n  \"data\": {\n    \"meeting_id\": \"https://api.scheduler.teams.microsoft.com/teamsforlife/9375167689078\",\n    \"user\": {\n      \"id\": \"93645911\",\n      \"nickname\": \"bill\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>group.call.started</code>.</p> </li> <li> <p>data (object) - Contains details about the started call.</p> <ul> <li> <p>meeting_id</p> <p>string - A URL or identifier for the meeting, often related to Microsoft Teams.</p> </li> <li> <p>user (object) - Information about the user who started the call.</p> <ul> <li> <p>id</p> <p>string - The ID of the user who started the call.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who started the call.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#poll-events","title":"Poll Events","text":"<p>Events related to polls created within a group or subgroup.</p>"},{"location":"events/#pollcreated","title":"<code>poll.created</code>","text":"<p>Indicates that a new poll has been created.</p> Object Structure<pre><code>{\n  \"type\": \"poll.created\",\n  \"data\": {\n    \"conversation\": {\n      \"id\": \"70077952\"\n    },\n    \"poll\": {\n      \"id\": \"1693859560560113\",\n      \"subject\": \"Up or Down?\"\n    },\n    \"user\": {\n      \"id\": \"93645911\",\n      \"nickname\": \"Isaac\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>poll.created</code>.</p> </li> <li> <p>data (object) - Contains details of the created poll.</p> <ul> <li> <p>conversation (object) - Information about the context of the poll.</p> <ul> <li> <p>id</p> <p>string - The ID of the group or subgroup/conversation where the poll was created.</p> </li> </ul> </li> <li> <p>poll (object) - Information about the poll itself.</p> <ul> <li> <p>id</p> <p>string - The ID of the newly created poll.</p> </li> <li> <p>subject</p> <p>string - The question or subject of the poll.</p> </li> </ul> </li> <li> <p>user (object) - Information about the user who created the poll.</p> <ul> <li> <p>id</p> <p>string - The ID of the user who created the poll</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who created the poll.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#pollfinished","title":"<code>poll.finished</code>","text":"<p>Indicates that a poll has expired or been closed.</p> Object Structure<pre><code>{\n  \"type\": \"poll.finished\",\n  \"data\": {\n    \"conversation\": {\n      \"id\": \"70077952\"\n    },\n    \"options\": [\n      {\n        \"id\": \"1\",\n        \"title\": \"Up\"\n      },\n      {\n        \"id\": \"2\",\n        \"title\": \"Down\",\n        \"voter_ids\": [\"93645911\"],\n        \"votes\": 1\n      }\n    ],\n    \"poll\": {\n      \"id\": \"1693859560560113\",\n      \"subject\": \"Up or Down?\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>poll.finished</code>.</p> </li> <li> <p>data (object) - Contains details of the finished poll.</p> <ul> <li> <p>conversation (object) - Information about the context of the poll.</p> <ul> <li> <p>id</p> <p>string - The ID of the group or subgroup/conversation where the poll existed.</p> </li> </ul> </li> <li> <p>options (array of objects) - The options that were available in the poll. Each object contains:</p> <ul> <li> <p>id</p> <p>string - The ID of the poll option.</p> </li> <li> <p>title</p> <p>string - The text of the poll option.</p> </li> <li> <p>voter_ids</p> <p>array of strings (optional) - A list of user IDs who voted for this option.</p> </li> <li> <p>votes</p> <p>number (optional) - The number of votes this option received. May not be present if no votes or if data is incomplete.</p> </li> </ul> </li> <li> <p>poll (object) - Information about the poll itself.</p> <ul> <li> <p>id</p> <p>string - The ID of the poll that finished.</p> </li> <li> <p>subject</p> <p>string - The question or subject of the poll.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#calendar-events","title":"Calendar Events","text":"<p>Events related to the group or DM calendar feature.</p> <p>Note</p> <p>These events can occur in both group chats and Direct Messages.</p>"},{"location":"events/#calendareventcancelled","title":"<code>calendar.event.cancelled</code>","text":"<p>Indicates that a calendar event has been canceled.</p> Object Structure<pre><code>{\n  \"type\": \"calendar.event.cancelled\",\n  \"data\": {\n    \"event\": {\n      \"id\": \"71907892652544fa891d65aba59ca4ec\",\n      \"name\": \"Pool Party\"\n    },\n    \"user\": {\n      \"id\": \"93645911\",\n      \"nickname\": \"Totally NOT Isaac Stanger, SECOND ATTEMPT\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>calendar.event.cancelled</code>.</p> </li> <li> <p>data (object) - Contains the details of the cancellation.</p> <ul> <li> <p>event (object) - Information about the event that was cancelled.</p> <ul> <li> <p>id</p> <p>string - The ID of the canceled calendar event.</p> </li> <li> <p>name</p> <p>string - The name of the canceled calendar event.</p> </li> </ul> </li> <li> <p>user (object) - Information about the user who performed the action.</p> <ul> <li> <p>id</p> <p>string - The ID of the user who canceled the event.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who canceled the event.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#calendareventcreated","title":"<code>calendar.event.created</code>","text":"<p>Indicates that a new calendar event has been created.</p> Object Structure<pre><code>{\n  \"type\": \"calendar.event.created\",\n  \"data\": {\n    \"event\": {\n      \"id\": \"71907892652544fa891d65aba59ca4ec\",\n      \"name\": \"Pool Party\"\n    },\n    \"url\": \"https://group.me/11wcjx0f81mMMJ\",\n    \"user\": {\n      \"id\": \"93645911\",\n      \"nickname\": \"Totally NOT Isaac Stanger, SECOND ATTEMPT\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>calendar.event.created</code>.</p> </li> <li> <p>data (object) - Contains the details of the created event.</p> <ul> <li> <p>event (object) - Information about the newly created event.</p> <ul> <li> <p>id</p> <p>string - The ID of the newly created calendar event.</p> </li> <li> <p>name</p> <p>string - The name of the newly created calendar event.</p> </li> </ul> </li> <li> <p>original_url</p> <p>string (optional) - The full URL to the event on GroupMe's website. (Path may vary based on context, e.g., group ID or DM ID).</p> </li> <li> <p>url</p> <p>string - A shortened URL to the event.</p> </li> <li> <p>user (object) - Information about the user who created the event.</p> <ul> <li> <p>id</p> <p>string - The ID of the user who created the event.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who created the event.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#calendareventstarting","title":"<code>calendar.event.starting</code>","text":"<p>Indicates that a calendar event is starting soon or now.</p> Object Structure<pre><code>{\n  \"type\": \"calendar.event.starting\",\n  \"data\": {\n    \"call_started\": false,\n    \"event_name\": \"test event\",\n    \"minutes\": \"0\"\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>calendar.event.starting</code>.</p> </li> <li> <p>data (object) - Contains details about the starting event.</p> <ul> <li> <p>call_started</p> <p>boolean - Indicates if a call was automatically started for this event.</p> </li> <li> <p>event_name</p> <p>string - The name of the event that is starting.</p> </li> <li> <p>minutes</p> <p>string - The number of minutes until the event starts (e.g., \"0\" for starting now, \"15\" for 15 minutes).</p> </li> </ul> </li> </ul>"},{"location":"events/#calendareventupdated","title":"<code>calendar.event.updated</code>","text":"<p>Indicates that a calendar event's details have been updated.</p> Object Structure<pre><code>{\n  \"type\": \"calendar.event.updated\",\n  \"data\": {\n    \"event\": {\n      \"id\": \"5fae1217e4fc4a4180748b1d02234cfe\",\n      \"name\": \"new calendar event edited\"\n    },\n    \"updated_fields\": [\n      \"calendar.event.field.name\"\n    ],\n    \"user\": {\n      \"id\": \"93645911\",\n      \"nickname\": \"bill\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>calendar.event.updated</code>.</p> </li> <li> <p>data (object) - Contains details of the update.</p> <ul> <li> <p>event (object) - Information about the updated event.</p> <ul> <li> <p>id</p> <p>string - The ID of the updated calendar event.</p> </li> <li> <p>name</p> <p>string - The current (potentially updated) name of the calendar event.</p> </li> </ul> </li> <li> <p>updated_fields</p> <p>array of strings - A list of fields that were updated (e.g., <code>\"calendar.event.field.name\"</code>, <code>\"calendar.event.field.description\"</code>, <code>\"calendar.event.field.time\"</code>).</p> </li> <li> <p>user (object) - Information about the user who updated the event.</p> <ul> <li> <p>id</p> <p>string - The ID of the user who updated the event.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who updated the event.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#calendareventusergoing","title":"<code>calendar.event.user.going</code>","text":"<p>Indicates a user has RSVP'd as \"going\" to a calendar event.</p> Object Structure<pre><code>{\n  \"type\": \"calendar.event.user.going\",\n  \"data\": {\n    \"event\": {\n      \"id\": \"71907892652544fa891d65aba59ca4ec\",\n      \"name\": \"Pool Party\"\n    },\n    \"user\": {\n      \"id\": \"93645911\",\n      \"nickname\": \"Totally NOT Isaac Stanger, SECOND ATTEMPT\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>calendar.event.user.going</code>.</p> </li> <li> <p>data (object) - Contains details of the RSVP.</p> <ul> <li> <p>event (object) - Information about the event.</p> <ul> <li> <p>id</p> <p>string - The ID of the calendar event.</p> </li> <li> <p>name</p> <p>string - The name of the calendar event.</p> </li> </ul> </li> <li> <p>user (object) - Information about the user who RSVP'd.</p> <ul> <li> <p>id</p> <p>string - The ID of the user who RSVP'd.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who RSVP'd.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#calendareventusernot_going","title":"<code>calendar.event.user.not_going</code>","text":"<p>Indicates a user has RSVP'd as \"not going\" to a calendar event.</p> Object Structure<pre><code>{\n  \"type\": \"calendar.event.user.not_going\",\n  \"data\": {\n    \"event\": {\n      \"id\": \"71907892652544fa891d65aba59ca4ec\",\n      \"name\": \"Pool Party\"\n    },\n    \"user\": {\n      \"id\": \"93645911\",\n      \"nickname\": \"Totally NOT Isaac Stanger, SECOND ATTEMPT\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>calendar.event.user.not_going</code>.</p> </li> <li> <p>data (object) - Contains details of the RSVP.</p> <ul> <li> <p>event (object) - Information about the event.</p> <ul> <li> <p>id</p> <p>string - The ID of the calendar event.</p> </li> <li> <p>name</p> <p>string - The name of the calendar event.</p> </li> </ul> </li> <li> <p>user (object) - Information about the user who RSVP'd.</p> <ul> <li> <p>id</p> <p>string - The ID of the user who RSVP'd.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who RSVP'd.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#calendareventuserundecided","title":"<code>calendar.event.user.undecided</code>","text":"<p>Indicates a user has changed their RSVP to \"undecided\" for a calendar event.</p> Object Structure<pre><code>{\n  \"type\": \"calendar.event.user.undecided\",\n  \"data\": {\n    \"event\": {\n      \"id\": \"44da0b1d715841d8b855d0ae0833b9e8\",\n      \"name\": \"test event\"\n    },\n    \"user\": {\n      \"id\": \"93645911\",\n      \"nickname\": \"Totally NOT Isaac Stanger, SECOND ATTEMPT\"\n    }\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>calendar.event.user.undecided</code>.</p> </li> <li> <p>data (object) - Contains details of the RSVP change.</p> <ul> <li> <p>event (object) - Information about the event.</p> <ul> <li> <p>id</p> <p>string - The ID of the calendar event.</p> </li> <li> <p>name</p> <p>string - The name of the calendar event.</p> </li> </ul> </li> <li> <p>user (object) - Information about the user who changed their RSVP.</p> <ul> <li> <p>id</p> <p>string - The ID of the user who changed their RSVP.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who changed their RSVP.</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"events/#general-message-events","title":"General Message Events","text":"<p>Events that can apply to messages in various contexts (groups, DMs, subgroups).</p>"},{"location":"events/#messagedeleted","title":"<code>message.deleted</code>","text":"<p>Indicates that a message has been deleted.</p> Object Structure<pre><code>{\n  \"type\": \"message.deleted\",\n  \"data\": {\n    \"deleted_at\": 1693862956,\n    \"deletion_actor\": \"sender\",\n    \"message_id\": \"169386238854117065\"\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>message.deleted</code>.</p> </li> <li> <p>data (object) - Contains details about the deleted message.</p> <ul> <li> <p>deleted_at</p> <p>number - Unix timestamp (seconds) of when the message was deleted.</p> </li> <li> <p>deletion_actor</p> <p>string - Who deleted the message (e.g., <code>\"sender\"</code>, <code>\"admin\"</code>).</p> </li> <li> <p>message_id</p> <p>string - The ID of the message that was deleted.</p> </li> </ul> </li> </ul>"},{"location":"events/#messagepinned","title":"<code>message.pinned</code>","text":"<p>Indicates that a message has been pinned in the chat.</p> Object Structure<pre><code>{\n  \"type\": \"message.pinned\",\n  \"data\": {\n    \"message_id\": \"169386238854117065\",\n    \"pinned\": true,\n    \"pinned_by\": \"74938777\",\n    \"pinned_at\": 1693862497\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>message.pinned</code>.</p> </li> <li> <p>data (object) - Contains details of the pinned message.</p> <ul> <li> <p>message_id</p> <p>string - The ID of the message that was pinned.</p> </li> <li> <p>pinned</p> <p>boolean - Always <code>true</code> for this event type.</p> </li> <li> <p>pinned_by</p> <p>string - The user ID of the person who pinned the message.</p> </li> <li> <p>pinned_at</p> <p>number - Unix timestamp (seconds) of when the message was pinned.</p> </li> </ul> </li> </ul>"},{"location":"events/#bot-events","title":"Bot Events","text":"<p>Events related to bots being added, removed, or modified in a group.</p>"},{"location":"events/#botadd","title":"<code>bot.add</code>","text":"<p>Indicates that a bot has been added to the group.</p> Object Structure<pre><code>{\n  \"type\": \"bot.add\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    },\n    \"bot\": \"jerry\"\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>bot.add</code>.</p> </li> <li> <p>data (object) - Contains details of the bot addition.</p> <ul> <li> <p>user (object) - Information about the user who added the bot.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who added the bot.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who added the bot.</p> </li> </ul> </li> <li> <p>bot</p> <p>string - The name of the bot that was added.</p> </li> </ul> </li> </ul>"},{"location":"events/#botdel","title":"<code>bot.del</code>","text":"<p>Indicates that a bot has been removed from the group.</p> Object Structure<pre><code>{\n  \"type\": \"bot.del\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    },\n    \"bot\": \"tom\"\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>bot.del</code>.</p> </li> <li> <p>data (object) - Contains details of the bot removal.</p> <ul> <li> <p>user (object) - Information about the user who removed the bot.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who removed the bot.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who removed the bot.</p> </li> </ul> </li> <li> <p>bot</p> <p>string - The name of the bot that was removed.</p> </li> </ul> </li> </ul>"},{"location":"events/#botrename","title":"<code>bot.rename</code>","text":"<p>Indicates that a bot has been renamed.</p> Object Structure<pre><code>{\n  \"type\": \"bot.rename\",\n  \"data\": {\n    \"user\": {\n      \"id\": 93645911,\n      \"nickname\": \"Isaac\"\n    },\n    \"bot_name_old\": \"jerry\",\n    \"bot_name_new\": \"tom\"\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>bot.rename</code>.</p> </li> <li> <p>data (object) - Contains details of the bot rename.</p> <ul> <li> <p>user (object) - Information about the user who renamed the bot.</p> <ul> <li> <p>id</p> <p>number - The ID of the user who renamed the bot.</p> </li> <li> <p>nickname</p> <p>string - The nickname of the user who renamed the bot.</p> </li> </ul> </li> <li> <p>bot_name_old</p> <p>string - The previous name of the bot.</p> </li> <li> <p>bot_name_new</p> <p>string - The new name of the bot.</p> </li> </ul> </li> </ul>"},{"location":"events/#copilot-events","title":"Copilot Events","text":"<p>Events related to the GroupMe Copilot (AI assistant) feature.</p>"},{"location":"events/#copilotgroupprivacy_notice","title":"<code>copilot.group.privacy_notice</code>","text":"<p>Indicates that a privacy notice regarding the Copilot feature has been posted in the group. This typically occurs when Copilot is activated or first mentioned.</p> Object Structure<pre><code>{\n  \"type\": \"copilot.group.privacy_notice\",\n  \"data\": {\n    \"trigger_message\": \"174959917958988616\"\n  }\n}\n</code></pre> <ul> <li> <p>type</p> <p>string - Must be <code>copilot.group.privacy_notice</code>.</p> </li> <li> <p>data (object) - Contains details related to the notice.</p> <ul> <li> <p>trigger_message</p> <p>string - The ID of the message that likely triggered the display of this privacy notice.</p> </li> </ul> </li> </ul> <p>Note</p> <p>There might be other event types or variations not covered here. If you find any, please edit this page and submit a pull request.</p>"},{"location":"files/","title":"Uploading Files to GroupMe","text":"<p>To upload a file to be processed to GroupMe's file service, POST to <code>https://file.groupme.com/v1/[GROUP_ID]/files?name=[FILE_NAME]</code> with the  following included in the HTTP header:</p> <pre><code>Host: file.groupme.com\nContent-Type: application/json\nAccept-Encoding: gzip, deflate\nConnection: close\nX-Access-Token: [ACCESS_TOKEN]\n</code></pre> <p>Note that the content type is application/json, even though a data binary is going to be uploaded. Files must be less than 50MB to upload properly. Any file extension can be uploaded.</p> <p>The file should be in the POST request as a data binary The equivalent curl command is: </p> <pre><code>curl -i -s -k -X \"POST\" -H \"Host: file.groupme.com\" -H \"Content-Type: application/json\" -H \"X-Access-Token: [ACCESS_TOKEN]\" -H \"Accept-Encoding: gzip, deflate\" -H \"Connection: close\" --data-binary @[FILE_NAME] https://file.groupme.com/v1/[GROUP_ID]/files?name=[FILE_NAME]\n</code></pre> <p>A properly uploaded file should have a response of <code>201 OK</code> to the previous request, along with a JSON object containing a job status id: <pre><code>{\n  \"status_url\":  \"https://file.groupme.com/v1/[GROUP_ID]/uploadStatus?job=[JOB_UUID]\"\n}\n</code></pre></p> <p>To get the status of a working job, GET <code>https://file.groupme.com/v1/[GROUP_ID]/uploadStatus?job=[JOB_UUID]</code> A complete job will contain the following JSON in the response, with a header of <code>200 OK</code>: <pre><code>{\n  \"status\":\"complete\",\n  \"file_id\":\"[FILE_ID]\"\n}\n</code></pre></p> <p>The completed file upload is ready to send as a file attachment, using the <code>file_id</code> as a reference to the uploaded file. Files uploaded to one group may not be shared to another group</p>"},{"location":"gallery/","title":"Image Gallery","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"gallery/#index","title":"Index","text":"<p>List a Group or DM conversation's previous messages that contain images or files stored in the Gallery.</p> <p>The response is paginated (sort of), with a default of 100 images per page. Specifying a <code>before</code> timestamp allows you to fetch beyond the first page of results.</p> HTTP Request<pre><code>GET /conversations/:conversation_id/gallery\n</code></pre> <p>Parameters</p> <ul> <li>acceptFiles</li> </ul> <p>boolean - A flag to tell the image service your client is capable of receiving non-image files. Setting this value to <code>0</code> or omitting it entirely will NOT omit messages with file attachments in the response; these messages will still be included, but the text property will be overwritten with <code>Please upgrade to download this file.</code> The file attachment will still be fully intact, however. In practice this means that if you care about the text in the message with an attachment, you should set <code>acceptFiles=1</code>.</p> <ul> <li> <p>limit</p> <p>integer - Defines page size. Defaults to 100.</p> </li> <li> <p>before</p> </li> </ul> <p>string - A timestamp in ISO 8601 format denoting the latest image timestamp to include in the response. This is used for pagination: the server will return images older than this timestamp. If omitted, it fetches the most recent images.</p> <ul> <li>after</li> </ul> <p>string - A timestamp in ISO 8601 format denoting the oldest image timestamp to include in the response. This is used for pagination: the server will return images newer than this timestamp. Can be used with or without the <code>before</code> parameter.</p> HTTP Response<pre><code>Status: 200 OK\n{\n  \"messages\": [\n    {\n      \"attachments\": [\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/274x184.jpeg.6a3a12a63bb4453ea085e29c76825830\"\n        }\n      ],\n      \"avatar_url\": \"https://i.groupme.com/184x184.jpeg.63692bfcaa18457eaeaa1dbde8cecb6d\",\n      \"created_at\": 1747233197,\n      \"favorited_by\": [\n        \"103829605\"\n      ],\n      \"gallery_ts\": \"2025-05-14T14:33:17.8688Z\",\n      \"group_id\": \"98296943\",\n      \"id\": \"174723319786892122\",\n      \"name\": \"jack\",\n      \"sender_id\": \"112904724\",\n      \"sender_type\": \"user\",\n      \"source_guid\": \"B5562890-BCCF-457F-B07D-3FDAB8C773EE\",\n      \"system\": false,\n      \"text\": null,\n      \"user_id\": \"115904724\"\n    },\n    {\n      \"attachments\": [\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/542x606.jpeg.10f96a004a52451192a673a38371cfac\"\n        }\n      ],\n      \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.52f411008b064201932e9cf98a3d407a\",\n      \"created_at\": 1747227084,\n      \"favorited_by\": [],\n      \"gallery_ts\": \"2025-05-14T12:51:24.7745Z\",\n      \"group_id\": \"98296943\",\n      \"id\": \"174722708477454148\",\n      \"name\": \"alice\",\n      \"sender_id\": \"130870470\",\n      \"sender_type\": \"user\",\n      \"source_guid\": \"19472C2B-5DE2-4BD4-A3E3-783BDFC9976C\",\n      \"system\": false,\n      \"text\": null,\n      \"user_id\": \"130850470\"\n    }\n  ]\n}\n</code></pre>"},{"location":"groups/","title":"Groups","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"groups/#index","title":"Index","text":"<p>List the authenticated user's active groups.</p> <p>The response is paginated, with a default of 10 groups per page.</p> <p>Please consider using of omit=memberships parameter. Not including member lists might significantly improve user experience of your app for users who are participating in huge groups.</p> <p>HTTP Request<pre><code>GET /groups\n</code></pre> Parameters</p> <ul> <li> <p>page</p> <p>integer - Fetch a particular page of results. Defaults to 1.</p> </li> <li> <p>per_page</p> <p>integer - Define page size. Defaults to 10.</p> </li> <li> <p>omit</p> <p>string - Comma separated list of data to omit from output. Currently supported value is only \"memberships\". If used then response will contain empty (null) members field.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n[\n  {\n    \"id\": \"1234567890\",\n    \"name\": \"Family\",\n    \"type\": \"private\",\n    \"description\": \"Coolest Family Ever\",\n    \"image_url\": \"https://i.groupme.com/123456789\",\n    \"creator_user_id\": \"1234567890\",\n    \"created_at\": 1302623328,\n    \"updated_at\": 1302623328,\n    \"members\": [\n      {\n        \"user_id\": \"1234567890\",\n        \"nickname\": \"Jane\",\n        \"muted\": false,\n        \"image_url\": \"https://i.groupme.com/123456789\"\n      }\n    ],\n    \"share_url\": \"https://groupme.com/join_group/1234567890/SHARE_TOKEN\",\n    \"messages\": {\n      \"count\": 100,\n      \"last_message_id\": \"1234567890\",\n      \"last_message_created_at\": 1302623328,\n      \"preview\": {\n        \"nickname\": \"Jane\",\n        \"text\": \"Hello world\",\n        \"image_url\": \"https://i.groupme.com/123456789\",\n        \"attachments\": [\n          {\n            \"type\": \"image\",\n            \"url\": \"https://i.groupme.com/123456789\"\n          },\n          {\n            \"type\": \"location\",\n            \"lat\": \"40.738206\",\n            \"lng\": \"-73.993285\",\n            \"name\": \"GroupMe HQ\"\n          },\n          {\n            \"type\": \"emoji\",\n            \"placeholder\": \"\",\n            \"charmap\": [\n              [1, 42],\n              [2, 34]\n            ]\n          }\n        ]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"groups/#former","title":"Former","text":"<p>List the groups you have left but can rejoin.</p> HTTP Request<pre><code>GET /groups/former\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n[\n  {\n    \"id\": \"1234567890\",\n    \"name\": \"Family\",\n    \"type\": \"private\",\n    \"description\": \"Coolest Family Ever\",\n    \"image_url\": \"https://i.groupme.com/123456789\",\n    \"creator_user_id\": \"1234567890\",\n    \"created_at\": 1302623328,\n    \"updated_at\": 1302623328,\n    \"members\": [\n      {\n        \"user_id\": \"1234567890\",\n        \"nickname\": \"Jane\",\n        \"muted\": false,\n        \"image_url\": \"https://i.groupme.com/123456789\"\n      }\n    ],\n    \"share_url\": \"https://groupme.com/join_group/1234567890/SHARE_TOKEN\",\n    \"messages\": {\n      \"count\": 100,\n      \"last_message_id\": \"1234567890\",\n      \"last_message_created_at\": 1302623328,\n      \"preview\": {\n        \"nickname\": \"Jane\",\n        \"text\": \"Hello world\",\n        \"image_url\": \"https://i.groupme.com/123456789\",\n        \"attachments\": [\n          {\n            \"type\": \"image\",\n            \"url\": \"https://i.groupme.com/123456789\"\n          },,\n          {\n            \"type\": \"location\",\n            \"lat\": \"40.738206\",\n            \"lng\": \"-73.993285\",\n            \"name\": \"GroupMe HQ\"\n          },\n          {\n            \"type\": \"emoji\",\n            \"placeholder\": \"\",\n            \"charmap\": [\n              [1, 42],\n              [2, 34]\n            ]\n          }\n        ]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"groups/#summarize-group-memberships","title":"Summarize Group Memberships","text":"<p>Returns an unpaginated succinct list of all group IDs your account has ever been in, and your membership status within them. Useful for quickly fetching all of your group IDs without extra garbage attached.</p> <p>Possible States:</p> <ul> <li><code>\"active\"</code>: you're currently a member of the group</li> <li><code>\"exited\"</code>: you've left the group</li> <li><code>\"removed\"</code>: you've been kicked from the group</li> <li><code>\"exited_removed\"</code>: you've left the group on your own, and have been barred from re-entering</li> </ul> HTTP Request<pre><code>GET /memberships/states\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n[\n  {\n    \"group_id\": \"107702077\",\n    \"state\": \"active\"\n  },\n  {\n    \"group_id\": \"106666358\",\n    \"state\": \"exited\"\n  },\n  {\n    \"group_id\": \"102270238\",\n    \"state\": \"removed\"\n  },\n  {\n    \"group_id\": \"91620876\",\n    \"state\": \"exited_removed\"\n  }\n]\n</code></pre>"},{"location":"groups/#show","title":"Show","text":"<p>Load a specific group.</p> HTTP Request<pre><code>GET /groups/:group_id\n</code></pre> <p>Parameters</p> <ul> <li> <p>group_id (required)</p> <p>string - the ID of the group to show details of</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"id\": \"1234567890\",\n  \"name\": \"Family\",\n  \"type\": \"private\",\n  \"description\": \"Coolest Family Ever\",\n  \"image_url\": \"https://i.groupme.com/123456789\",\n  \"creator_user_id\": \"1234567890\",\n  \"created_at\": 1302623328,\n  \"updated_at\": 1302623328,\n  \"members\": [\n    {\n      \"user_id\": \"1234567890\",\n      \"nickname\": \"Jane\",\n      \"muted\": false,\n      \"image_url\": \"https://i.groupme.com/123456789\"\n    }\n  ],\n  \"share_url\": \"https://groupme.com/join_group/1234567890/SHARE_TOKEN\",\n  \"messages\": {\n    \"count\": 100,\n    \"last_message_id\": \"1234567890\",\n    \"last_message_created_at\": 1302623328,\n    \"preview\": {\n      \"nickname\": \"Jane\",\n      \"text\": \"Hello world\",\n      \"image_url\": \"https://i.groupme.com/123456789\",\n      \"attachments\": [\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/123456789\"\n        },\n        {\n          \"type\": \"location\",\n          \"lat\": \"40.738206\",\n          \"lng\": \"-73.993285\",\n          \"name\": \"GroupMe HQ\"\n        },\n        {\n          \"type\": \"emoji\",\n          \"placeholder\": \"\",\n          \"charmap\": [\n            [1, 42],\n            [2, 34]\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"groups/#create","title":"Create","text":"<p>Create a new group</p> HTTP Request<pre><code>POST /groups\n{\n  \"name\": \"Family\",\n  \"share\": true,\n  \"image_url\": \"https://i.groupme.com/123456789\"\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>name (required)</p> <p>string - Primary name of the group. Maximum 140 characters</p> </li> <li> <p>description</p> <p>string - A subheading for the group. Maximum 255 characters</p> </li> <li> <p>image_url</p> <p>string - GroupMe Image Service URL</p> </li> <li> <p>share</p> <p>boolean - If you pass a true value for share, we'll generate a share URL. Anybody with this URL can join the group.</p> </li> </ul> HTTP Response<pre><code>Status: 201 Created\n{\n  \"id\": \"1234567890\",\n  \"name\": \"Family\",\n  \"type\": \"private\",\n  \"description\": \"Coolest Family Ever\",\n  \"image_url\": \"https://i.groupme.com/123456789\",\n  \"creator_user_id\": \"1234567890\",\n  \"created_at\": 1302623328,\n  \"updated_at\": 1302623328,\n  \"members\": [\n    {\n      \"user_id\": \"1234567890\",\n      \"nickname\": \"Jane\",\n      \"muted\": false,\n      \"image_url\": \"https://i.groupme.com/123456789\"\n    }\n  ],\n  \"share_url\": \"https://groupme.com/join_group/1234567890/SHARE_TOKEN\",\n  \"messages\": {\n    \"count\": 100,\n    \"last_message_id\": \"1234567890\",\n    \"last_message_created_at\": 1302623328,\n    \"preview\": {\n      \"nickname\": \"Jane\",\n      \"text\": \"Hello world\",\n      \"image_url\": \"https://i.groupme.com/123456789\",\n      \"attachments\": [\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/123456789\"\n        },\n        {\n          \"type\": \"location\",\n          \"lat\": \"40.738206\",\n          \"lng\": \"-73.993285\",\n          \"name\": \"GroupMe HQ\"\n        },\n        {\n          \"type\": \"emoji\",\n          \"placeholder\": \"\",\n          \"charmap\": [\n            [1, 42],\n            [2, 34]\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"groups/#update","title":"Update","text":"<p>Update a group after creation</p> HTTP Request<pre><code>POST /groups/:id/update\n{\n  \"name\": \"Family\",\n  \"share\": true,\n  \"image_url\": \"https://i.groupme.com/123456789\",\n  \"office_mode\": true\n  \"theme_name\": \"cogs\"\n  \"requires_approval\": true,\n  \"show_join_question\": true,\n  \"join_question\": {\n    \"text\": \"You're not a bot, are you?\"\n    \"type\": \"join_reason/questions/text\"\n  },\n  \"like_icon\": {\n    \"pack_id\": 1,\n    \"pack_index\": 65,\n    \"type\": \"emoji\"\n  },\n  \"visibility\": \"searchable\",\n  \"group_type\": \"closed\",\n  \"message_deletion_mode\": [\n    \"admin\",\n    \"sender\"\n  ]\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>name</p> <p>string - The name of the group</p> </li> <li> <p>description</p> <p>string - A description of the group</p> </li> <li> <p>image_url</p> <p>string - A URL to use as the avatar for the group. in order to be used, the Image must first be uploaded to GroupMe's Image Service.</p> </li> <li> <p>office_mode</p> <p>boolean - If Office Mode is enabled, notifications won't buzz your phone.</p> </li> <li> <p>theme_name</p> <p>string - The name of a theme to apply to the group, set to null to return to the default theme.</p> </li> <li> <p>share</p> <p>boolean - If you pass a true value for share, we'll generate a share URL. Anybody with this URL can join the group.</p> </li> <li> <p>requires_approval</p> <p>boolean - If true, members must request to join the group before they can be admitted.</p> </li> <li> <p>show_join_question</p> <p>boolean - If true, members must answer a question prompt in oder to request to join a group. The question defaults to \"Why do you want to join this group\".               <code>\"requires_approval\"</code> must be true for this value to take effect. * join_question</p> <p>object - Has two properties, <code>\"type\"</code> must always be set to <code>\"join_reason/questions/text\"</code> , and <code>\"text\"</code> is the custom join question.               Both <code>\"requires_approval\"</code> and <code>\"show_join_question\"</code> must be true for this value to take effect.</p> </li> <li> <p>like_icon</p> <p>object - The GroupMe powerup emoji to set as the group's like icon.              See the emoji documentation for more information on what these values mean.</p> </li> <li> <p>visibility</p> <p>string - Can be set to either <code>\"searchable\"</code> or <code>\"hidden\"</code>.</p> <p><code>\"searchable\"</code> means anyone can find your group on the discover page in the app,</p> <p><code>\"hidden\"</code> means it can only be found via its share URL.</p> </li> <li> <p>group_type</p> <p>string - Can be set to <code>\"closed\"</code>, <code>\"private\"</code>, or <code>\"announcement\"</code>.</p> <p><code>\"closed\"</code> means only admins can change settings for the group and manage the member list, anyone can send messages.</p> <p><code>\"private\"</code> means anyone in the group can manage settings and the roster, anyone can send messages.</p> <p><code>\"announcement\"</code> means only admins will be able to manage settings and the roster, only admins are allowed to send messages.</p> </li> <li> <p>message_deletion_mode</p> <p>array - Contains one or both <code>\"admin\"</code> and <code>\"sender\"</code> values. These are pretty self explanitory. If left empty, nobody will be able to delete messages.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"id\": \"1234567890\",\n  \"name\": \"Family\",\n  \"type\": \"private\",\n  \"description\": \"Coolest Family Ever\",\n  \"image_url\": \"https://i.groupme.com/123456789\",\n  \"creator_user_id\": \"1234567890\",\n  \"created_at\": 1302623328,\n  \"updated_at\": 1302623328,\n  \"members\": [\n    {\n      \"user_id\": \"1234567890\",\n      \"nickname\": \"Jane\",\n      \"muted\": false,\n      \"image_url\": \"https://i.groupme.com/123456789\"\n    }\n  ],\n  \"share_url\": \"https://groupme.com/join_group/1234567890/SHARE_TOKEN\",\n  \"messages\": {\n    \"count\": 100,\n    \"last_message_id\": \"1234567890\",\n    \"last_message_created_at\": 1302623328,\n    \"preview\": {\n      \"nickname\": \"Jane\",\n      \"text\": \"Hello world\",\n      \"image_url\": \"https://i.groupme.com/123456789\",\n      \"attachments\": [\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/123456789\"\n        },\n        {\n          \"type\": \"location\",\n          \"lat\": \"40.738206\",\n          \"lng\": \"-73.993285\",\n          \"name\": \"GroupMe HQ\"\n        },\n        {\n          \"type\": \"emoji\",\n          \"placeholder\": \"\",\n          \"charmap\": [\n            [1, 42],\n            [2, 34]\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"groups/#destroy","title":"Destroy","text":"<p>Disband a group</p> <p>This action is only available to the group creator</p> HTTP Request<pre><code>POST /groups/:group_id/destroy\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"groups/#join","title":"Join","text":"<p>Join a shared group</p> HTTP Request<pre><code>POST /groups/:id/join/:share_token\n</code></pre> Response<pre><code>Status: 200 OK\n{\n  \"group\": {\n    \"id\": \"1234567890\",\n    \"name\": \"Family\",\n    \"type\": \"private\",\n    \"description\": \"Coolest Family Ever\",\n    \"image_url\": \"https://i.groupme.com/123456789\",\n    \"creator_user_id\": \"1234567890\",\n    \"created_at\": 1302623328,\n    \"updated_at\": 1302623328,\n    \"members\": [\n      {\n        \"user_id\": \"1234567890\",\n        \"nickname\": \"Jane\",\n        \"muted\": false,\n        \"image_url\": \"https://i.groupme.com/123456789\"\n      }\n    ],\n    \"share_url\": \"https://groupme.com/join_group/1234567890/SHARE_TOKEN\",\n    \"messages\": {\n      \"count\": 100,\n      \"last_message_id\": \"1234567890\",\n      \"last_message_created_at\": 1302623328,\n      \"preview\": {\n        \"nickname\": \"Jane\",\n        \"text\": \"Hello world\",\n        \"image_url\": \"https://i.groupme.com/123456789\",\n        \"attachments\": [\n          {\n            \"type\": \"image\",\n            \"url\": \"https://i.groupme.com/123456789\"\n          },\n          {\n            \"type\": \"location\",\n            \"lat\": \"40.738206\",\n            \"lng\": \"-73.993285\",\n            \"name\": \"GroupMe HQ\"\n          },\n          {\n            \"type\": \"emoji\",\n            \"placeholder\": \"\",\n            \"charmap\": [\n              [1, 42],\n              [2, 34]\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"groups/#rejoin","title":"Rejoin","text":"<p>Rejoin a group. Only works if you previously removed yourself.</p> HTTP Request<pre><code>POST /groups/join\n</code></pre> <p>Parameters</p> <ul> <li> <p>group_id (required)</p> <p>string - the ID of the group to join</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"id\": \"1234567890\",\n  \"name\": \"Family\",\n  \"type\": \"private\",\n  \"description\": \"Coolest Family Ever\",\n  \"image_url\": \"https://i.groupme.com/123456789\",\n  \"creator_user_id\": \"1234567890\",\n  \"created_at\": 1302623328,\n  \"updated_at\": 1302623328,\n  \"members\": [\n    {\n      \"user_id\": \"1234567890\",\n      \"nickname\": \"Jane\",\n      \"muted\": false,\n      \"image_url\": \"https://i.groupme.com/123456789\"\n    }\n  ],\n  \"share_url\": \"https://groupme.com/join_group/1234567890/SHARE_TOKEN\",\n  \"messages\": {\n    \"count\": 100,\n    \"last_message_id\": \"1234567890\",\n    \"last_message_created_at\": 1302623328,\n    \"preview\": {\n      \"nickname\": \"Jane\",\n      \"text\": \"Hello world\",\n      \"image_url\": \"https://i.groupme.com/123456789\",\n      \"attachments\": [\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/123456789\"\n        },\n        {\n          \"type\": \"location\",\n          \"lat\": \"40.738206\",\n          \"lng\": \"-73.993285\",\n          \"name\": \"GroupMe HQ\"\n        },\n        {\n          \"type\": \"emoji\",\n          \"placeholder\": \"\",\n          \"charmap\": [\n            [1, 42],\n            [2, 34]\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"groups/#change-owners","title":"Change owner(s)","text":"<p>Change owner of requested groups.</p> <p>This action is only available to the group creator.</p> <p>Response is array of result objects which contain status field - the result of change owner action for every request:</p> <ul> <li>'200' - OK</li> <li>'400' - when requestor is also a new owner</li> <li>'403' - requestor is not owner of the group</li> <li>'404' - group or new owner not found or new owner is not member of the group</li> <li>'405' - request object is missing required field or any of the required fields is not an ID</li> </ul> HTTP Request<pre><code>POST /groups/change_owners\n</code></pre> <p>Parameters</p> <ul> <li> <p>requests (required)</p> <p>array - One request is object where user_id is the new owner who must be active member of a group specified by group_id.</p> </li> <li> <p>object</p> <ul> <li> <p>group_id (required)</p> <p>string - The ID of the affected group</p> </li> <li> <p>owner_id (required)</p> <p>string - The ID of the person to be made owner</p> </li> </ul> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"results\": [\n    {\n      \"group_id\": \"1234567890\",\n      \"owner_id\": \"1234567890\",\n      \"status\": \"200\"\n    },\n    {\n      \"group_id\": \"1234567890\",\n      \"owner_id\": \"1234567890\",\n      \"status\": \"400\"\n    }\n  ]\n}\n</code></pre>"},{"location":"groups/#muteunmute-main-channel","title":"Mute/Unmute Main Channel","text":"<p>Silence general notifications for the main chat in a group. This does not silence @mentions, replies, or reaction notifications for your own messages.</p> <p>Both calls return your member object for the group.</p> <p>Important</p> <p>This request is relative to <code>https://v2.groupme.com/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request (To mute)<pre><code>POST https://v2.groupme.com/groups/:group_id/memberships/mute\n{\n  \"duration\": 60\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>duration (required)</p> <p>string - The length of time (in minutes) you want notifications to be silent for. To silence notifications until you enable them again, use <code>null</code>.</p> </li> </ul> HTTP Request (To unmute)<pre><code>POST https://v2.groupme.com/groups/:group_id/memberships/unmute\n</code></pre> HTTP Response (For both muting and unmuting)<pre><code>Status: 200 OK\n{\n  \"membership\": {\n    \"id\": \"1080225494\",\n    \"user_id\": \"93645911\",\n    \"nickname\": \"Isaac\",\n    \"avatar_url\": \"https://i.groupme.com/200x200.jpeg.94e0ac5891aa4e6f8ad4bbf961defe4d\",\n    \"state\": \"muted\",\n    \"created_at\": 1748635698,\n    \"updated_at\": 1748664739,\n    \"muted_until\": 253402300800,\n    \"has_sound_enabled\": true,\n    \"autokicked\": false\n  }\n}\n</code></pre>"},{"location":"groups/#muteunmute-main-channel-and-topics","title":"Mute/Unmute Main Channel and Topics","text":"<p>Silence general notifications for the main chat in a group, as well as all of the subtopics. This does not silence @mentions, replies, or reaction notifications for your own messages.</p> <p>Both calls return your member object for the group, Note that because this is a /v3 call instead of /v2, the member object is slightly different than it is when you mute the main chat on its own.</p> HTTP Request (To mute)<pre><code>POST /v3/groups/:group_id/memberships/mute_all\n{\n  \"duration\": 60\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>duration (required)</p> <p>string - The length of time (in minutes) you want notifications to be silent for. To silence notifications until you enable them again, use <code>null</code>.</p> </li> </ul> HTTP Request (To unmute)<pre><code>POST /groups/:group_id/memberships/unmute_all\n</code></pre> HTTP Response (For both muting and unmuting)<pre><code>Status: 200 OK\n{\n  \"membership\": {\n    \"id\": \"1080225494\",\n    \"user_id\": \"93645911\",\n    \"country_code\": \"1\",\n    \"phone_number\": \"3192414622\",\n    \"email\": \"stanger.isaac@gmail.com\",\n    \"avatar_url\": \"https://i.groupme.com/200x200.jpeg.94e0ac5891aa4e6f8ad4bbf961defe4d\",\n    \"nickname\": \"Isaac\",\n    \"creator\": true,\n    \"muted\": true,\n    \"snoozed\": false,\n    \"has_sound_enabled\": true,\n    \"pending\": false,\n    \"muted_until\": 253402300800,\n    \"muted_children\": {\n      \"107933452\": 253402300800\n    }\n  }\n}\n</code></pre>"},{"location":"images/","title":"Image Service","text":""},{"location":"images/#image-service","title":"Image Service","text":"<p>Images uploaded to the GroupMe Image CDN will have URLs that look like this: </p> <p><code>https://i.groupme.com/{width}x{height}.{format}.{id}</code></p> <p>Where {width} and {height} are in pixels, {format} is for example \"png\" or \"jpeg\" and {id} is a unique id e.g.</p> <p><code>https://i.groupme.com/480x325.jpeg.9e20b71dd6af4b58bbd132d4a7dec009</code></p>"},{"location":"images/#to-try-this-out-via-curl","title":"To try this out via cURL:","text":"<p>Store your access token in the GM_TOKEN environment variable first.</p> <pre><code>curl 'https://image.groupme.com/pictures' -X POST -H \"X-Access-Token: $GM_TOKEN\" -H \"Content-Type: image/jpeg\" --data-binary @AwesomePicture.jpg\n</code></pre>"},{"location":"images/#thumbnails","title":"Thumbnails","text":"<p>Images are automatically thumbnailed at the following sizes:</p> suffix size example preview 200x200, centered and cropped https://i.groupme.com/100x100.png.123456789.preview large 960x960, preserve aspect ratio so largest side is 960 https://i.groupme.com/100x100.png.123456789.large avatar 60x60, centered and cropped https://i.groupme.com/100x100.png.123456789.avatar"},{"location":"images/#images","title":"Images","text":"<p>Nearly every instance of an image URL within the API MUST be processed by the Image CDN before it can be used. </p> <p>You can upload a variety of different kinds of image formats (including GIFs) to the image CDN in order for them to be processed, stored, and thumbnailed.</p>"},{"location":"images/#uploading-local-images","title":"Uploading local images","text":"<p>If you want to send an image you have stored locally, you first have to upload it to GroupMe's servers via their image service. This is done with a simple request:</p> HTTP Request<pre><code>POST https://image.groupme.com/pictures\n</code></pre> <p>Importantly, this request MUST be done with the following headers:</p> <ul> <li>Content-Type: \"image/jpeg\" (For some reason it doesn't work with \"image/png\" as far as I can tell, but you can still send .png files under \"image/jpeg\")</li> <li>Content-Length: The size of your image in bytes</li> <li>X-Access-Token: Your user's token</li> </ul> <p>Then, send the binary data of your image file. </p> <p>Issues with this feature are often caused by problems with the user token.</p> HTTP Response<pre><code>Status: 200 OK\n{\n  \"payload\": {\n    \"url\": \"https://i.groupme.com/123456789\",\n    \"picture_url\": \"https://i.groupme.com/123456789\"\n  }\n}\n</code></pre>"},{"location":"images/#uploading-remote-images","title":"Uploading remote images","text":"<p>If you want to send a remote image by its URL, you'll still have to upload it to GroupMe's servers via their image service. This will behave similar to uploading local images, but with a new url parameter:</p> HTTP Request<pre><code>POST https://image.groupme.com/pictures?url=&lt;image_url&gt;\n</code></pre> <p>As far as I can tell, you only need to provide the X-Access-Token user token as a header.</p> <p>Response</p> <p>Your response will be of the same format as above: <code>json linenums=\"1\" titile=\"HTTP Response\" Status: 200 OK {   \"payload\": {     \"url\": \"https://i.groupme.com/123456789\",     \"picture_url\": \"https://i.groupme.com/123456789\"   } }</code></p>"},{"location":"likes/","title":"Reactions","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"likes/#like","title":"Like","text":"<p>Like a message. </p> HTTP Request<pre><code>POST /messages/:conversation_id/:message_id/like\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"likes/#reactions-replacing-likes-in-the-new-v7-update","title":"Reactions (Replacing likes in the new v7 update)","text":"<p>React to a message with either a unicode or GroupMe emoji.</p> <p>GroupMe restricts reactions to GroupMe powerups and the 15 unicode options displayed in the client (\u2764\ufe0f \ud83d\udc4d \ud83e\udd23 \ud83c\udf89 \ud83d\udd25 \ud83d\ude2e \ud83d\udc40 \ud83d\ude2d \ud83e\udd7a \ud83d\ude4f \ud83d\udc80 \ud83e\udef6 \ud83e\udd2c \ud83d\udc85 \ud83e\udee0). Any other unicode emojis will be rejected by the server.</p> <p>There is no way to apply more than one reaction at a time to any given message, attempting to do so will overwrite the original reaction with the new one.</p> HTTP Request<pre><code>POST /messages/:conversation_id/:message_id/like\n{\n  \"like_icon\": {\n    \"type\": \"unicode\",\n    \"code\": \"\u2764\ufe0f\"\n  }\n}\n</code></pre> <p>or</p> HTTP Request<pre><code>POST /messages/:conversation_id/:message_id/like\n{\n  \"like_icon\": {\n    \"type\": \"emoji\",\n    \"pack_id\": 1,\n    \"pack_index\": 12\n  }\n}\n</code></pre> <p>Parameters</p> <ul> <li>like_icon (optional)     object \u2014 can contain reaction objects of type <code>unicode</code> (for standard unicode characters/emojis) or <code>emoji</code> for GroupMe emoji/powerups. <code>unicode</code> type reacions have a <code>code</code> parameter that specifies what text should be displayed. <code>emoji</code> type reactions have parameters <code>pack_id</code> and <code>pack_index</code>. See the emoji documentation for more information on what these values mean.</li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"reactions\": [\n    {\n      \"type\": \"unicode\",\n      \"pack_id\": 0,\n      \"pack_index\": 0,\n      \"code\": \"\u2764\ufe0f\"\n    }\n  ]\n}\n</code></pre>"},{"location":"likes/#unlike","title":"Unlike","text":"<p>Unlike / remove your reactions from a message.</p> HTTP Request<pre><code>POST /messages/:conversation_id/:message_id/unlike\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"likes/#leaderboard","title":"Leaderboard","text":"<p>A list of the liked messages in the group for a given period of time. Messages are ranked in order of number of likes.</p> <p>HTTP Request<pre><code>GET /groups/:group_id/likes?period=&lt;day|week|month&gt;\n</code></pre> Parameters</p> <ul> <li>period (required)     string \u2014 one of: 'day', 'week', or 'month'</li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"messages\": [\n    {\n      \"id\": \"1234567890\",\n      \"source_guid\": \"GUID\",\n      \"created_at\": 1302623328,\n      \"user_id\": \"1234567890\",\n      \"group_id\": \"1234567890\",\n      \"name\": \"John\",\n      \"avatar_url\": \"https://i.groupme.com/123456789\",\n      \"text\": \"Hello world \",\n      \"system\": true,\n      \"favorited_by\": [\n        \"101\",\n        \"66\",\n        \"1234567890\"\n      ],\n      \"attachments\": [\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/123456789\"\n        },\n        {\n          \"type\": \"location\",\n          \"lat\": \"40.738206\",\n          \"lng\": \"-73.993285\",\n          \"name\": \"GroupMe HQ\"\n        },\n        {\n          \"type\": \"emoji\",\n          \"placeholder\": \"\",\n          \"charmap\": [\n            [1, 42],\n            [2, 34]\n          ]\n        }\n      ]\n    },\n    {\n      \"id\": \"1234567890\",\n      \"source_guid\": \"GUID\",\n      \"created_at\": 1302623328,\n      \"user_id\": \"1234567890\",\n      \"group_id\": \"1234567890\",\n      \"name\": \"John\",\n      \"avatar_url\": \"https://i.groupme.com/123456789\",\n      \"text\": \"Hello world \",\n      \"system\": true,\n      \"favorited_by\": [\n        \"1\",\n        \"2\"\n      ],\n      \"attachments\": [\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/123456789\"\n        },\n        {\n          \"type\": \"location\",\n          \"lat\": \"40.738206\",\n          \"lng\": \"-73.993285\",\n          \"name\": \"GroupMe HQ\"\n        },\n        {\n          \"type\": \"emoji\",\n          \"placeholder\": \"\",\n          \"charmap\": [\n            [1, 42],\n            [2, 34]\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"likes/#my-likes","title":"My Likes","text":"<p>A list of messages you have liked. Messages are returned in reverse chrono-order. Note that the payload includes a liked_at timestamp in ISO-8601 format.</p> HTTP Request<pre><code>GET /groups/:group_id/likes/mine\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n{\n  \"messages\": [\n    {\n      \"id\": \"1234567890\",\n      \"source_guid\": \"GUID\",\n      \"created_at\": 1302623328,\n      \"user_id\": \"1234567890\",\n      \"group_id\": \"1234567890\",\n      \"name\": \"John\",\n      \"avatar_url\": \"https://i.groupme.com/123456789\",\n      \"text\": \"Hello world \",\n      \"system\": true,\n      \"favorited_by\": [\n        \"101\",\n        \"66\",\n        \"1234567890\"\n      ],\n      \"attachments\": [\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/123456789\"\n        },\n        {\n          \"type\": \"location\",\n          \"lat\": \"40.738206\",\n          \"lng\": \"-73.993285\",\n          \"name\": \"GroupMe HQ\"\n        },\n        {\n          \"type\": \"emoji\",\n          \"placeholder\": \"\",\n          \"charmap\": [\n            [1, 42],\n            [2, 34]\n          ]\n        }\n      ],\n      \"liked_at\": \"2014-05-08T18:30:31.6617Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"likes/#my-hits","title":"My Hits","text":"<p>A list of messages others have liked.</p> HTTP Request<pre><code>GET /groups/:group_id/likes/for_me\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n{\n  \"messages\": [\n    {\n      \"id\": \"1234567890\",\n      \"source_guid\": \"GUID\",\n      \"created_at\": 1302623328,\n      \"user_id\": \"1234567890\",\n      \"group_id\": \"1234567890\",\n      \"name\": \"John\",\n      \"avatar_url\": \"https://i.groupme.com/123456789\",\n      \"text\": \"Hello world \",\n      \"system\": true,\n      \"favorited_by\": [\n        \"101\",\n        \"66\",\n        \"1234567890\"\n      ],\n      \"attachments\": [\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/123456789\"\n        },\n        {\n          \"type\": \"location\",\n          \"lat\": \"40.738206\",\n          \"lng\": \"-73.993285\",\n          \"name\": \"GroupMe HQ\"\n        },\n        {\n          \"type\": \"emoji\",\n          \"placeholder\": \"\",\n          \"charmap\": [\n            [1, 42],\n            [2, 34]\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"members/","title":"Members","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"members/#index-members","title":"Index Members","text":"<p>Fetch a group's current or former member list.</p> <p>This call is limited to admins and owners in the group. Any other caller will receive a <code>401 Unauthorized</code> response.</p> HTTP Request<pre><code>GET /groups/:group_id/members\n</code></pre> <p>Parameters</p> <ul> <li> <p>filter (required)</p> <p>string - to fetch either <code>active</code> (current memberships) or <code>inactive</code> (former memberships).</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"memberships\":[\n    {\n      \"id\": \"24681012\",\n      \"user_id\": \"11223344\",\n      \"name\": \"Alureon\",\n      \"nickname\": \"Alu\",\n      \"image_url\": \"https://i.groupme.com/1a3c5e7g\",\n      \"state\": \"active\",\n      \"roles\": [\"owner\",\"admin\"]\n    },\n    {\n      \"id\": \"1357911131\",\n      \"user_id\": \"55667788\",\n      \"name\": \"Franco H\",\n      \"nickname\": \"Fran\",\n      \"image_url\": \"https://i.groupme.com/2b4d6f8h\",\n      \"state\": \"active\",\n      \"roles\": [\"user\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"members/#add-members","title":"Add Members","text":"<p>Add members to a group.</p> <p>Multiple members can be added in a single request, and results are fetched with a separate call (since memberships are processed asynchronously). The response includes a results_id that's used in the results request.</p> <p>In order to correlate request params with resulting memberships, GUIDs can be added to the members parameters. These GUIDs will be reflected in the membership JSON objects.</p> HTTP Request<pre><code>POST /groups/:group_id/members/add\n{\n  \"members\": [\n    {\n      \"nickname\": \"Mom\",\n      \"user_id\": \"1234567890\",\n      \"guid\": \"GUID-1\"\n    },\n    {\n      \"nickname\": \"Dad\",\n      \"phone_number\": \"+1 2123001234\",\n      \"guid\": \"GUID-2\"\n    },\n    {\n      \"nickname\": \"Jane\",\n      \"email\": \"jane@example.com\",\n      \"guid\": \"GUID-3\"\n    }\n  ]\n}\n</code></pre> <p>Parameters * members</p> <pre><code>* *array* - nickname is required. You must use one of the following identifiers: user_id, phone_number, or email. The array should contain objects with the following properties:\n\n    * *nickname* (required)\n\n        string - The name the user will use\n\n    * *user_id*\n\n        string - The user ID of the user to add\n\n    * *phone_number*\n\n        string - The phone number of the user to add\n\n    * *email*\n\n        string - The phone number of the user to add\n\n    * *guid*\n\n        string - If used, the GUID of the associated \"results\" object will match the value given\n</code></pre> HTTP Response<pre><code>Status: 202 Accepted\n{\n  \"results_id\": \"GUID\"\n}\n</code></pre>"},{"location":"members/#fetch-add-results","title":"Fetch \"Add\" Results","text":"<p>Get the membership results from an add call.</p> <p>Successfully created memberships will be returned, including any GUIDs that were sent up in the add request. If GUIDs were absent, they are filled in automatically. Failed memberships and invites are omitted.</p> <p>Keep in mind that results are temporary -- they will only be available for 1 hour after the add request.</p> HTTP Request<pre><code>GET /groups/:group_id/members/results/:results_id\n</code></pre> <p>Parameters</p> <ul> <li> <p>results_id (required)</p> <p>string - This is the guid that's returned from an add request.</p> </li> </ul> <p>HTTP Response<pre><code>Status: 200 OK\n{\n  \"members\": [\n    {\n      \"id\": \"1000\",\n      \"user_id\": \"10000\",\n      \"nickname\": \"John\",\n      \"muted\": false,\n      \"image_url\": \"https://i.groupme.com/AVATAR\",\n      \"autokicked\": false,\n      \"app_installed\": true,\n      \"guid\": \"GUID-1\"\n    },\n    {\n      \"id\": \"2000\",\n      \"user_id\": \"20000\",\n      \"nickname\": \"Anne\",\n      \"muted\": false,\n      \"image_url\": \"https://i.groupme.com/AVATAR\",\n      \"autokicked\": false,\n      \"app_installed\": true,\n      \"guid\": \"GUID-2\"\n    }\n  ]\n}\n</code></pre> HTTP Response<pre><code>Status: 503 Service Unavailable\nResults aren't ready. Try again in a little bit.\n</code></pre> HTTP Response<pre><code>Status: 404 Not Found\nResults are no longer available. Don't try again.\n</code></pre></p>"},{"location":"members/#remove-member","title":"Remove Member","text":"<p>Remove a member (or yourself) from a group.</p> <p>Note: The creator of the group cannot be removed or exit.</p> HTTP Request<pre><code>POST /groups/:group_id/members/:membership_id/remove\n</code></pre> <p>Parameters</p> <ul> <li> <p>membership_id (required)</p> <p>string - Please note that this isn't the same as the user ID. In the members key in the group JSON, this is the id value, not the user_id.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"members/#index-pending-join-requests","title":"Index Pending Join Requests","text":"<p>Some groups have \"Request to join\" enabled, and thus require their applications approved by an admin. </p> <p>This request can be sent by any member of the group, not just admins. However, in order to approve or deny requests, you must have permission to manage the group.</p> HTTP Request<pre><code>GET /groups/:group_id/pending_memberships\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n[\n  {\n    \"id\": \"1075936468\",\n    \"user_id\": \"43303468\",\n    \"nickname\": \"bob\",\n    \"image_url\": \"https://i.groupme.com/2320x3088.jpeg.df62e30722404d21acee182c1a3eb633\",\n    \"reason\": {\n      \"type\": \"join_reason/membership_join_reason\",\n      \"question\": {\n        \"type\": \"join_reason/questions/text\",\n        \"text\": \"Why do you want to join this group?\"\n      },\n      \"answer\": {\n        \"type\": \"join_reason/answers/text\",\n        \"response\": \"Because it looks awesome!\"\n      },\n      \"method\": \"discoverable\"\n    },\n    \"timestamp\": 1747219206,\n    \"state\": \"requested_pending\"\n  },\n  {\n    \"id\": \"1075937258\",\n    \"user_id\": \"43303469\",\n    \"nickname\": \"allice\",\n    \"image_url\": \"https://i.groupme.com/2320x3088.jpeg.df62e307b2402321acee182c1a3eb633\",\n    \"reason\": {\n      \"type\": \"join_reason/membership_join_reason\",\n      \"question\": {\n        \"type\": \"join_reason/questions/text\",\n        \"text\": \"Why do you want to join this group?\"\n      },\n      \"answer\": {\n        \"type\": \"join_reason/answers/text\",\n        \"response\": \"Because I love GroupMe!\"\n      },\n      \"method\": \"discoverable\"\n    },\n    \"timestamp\": 1756219206,\n    \"state\": \"requested_pending\"\n  }\n]\n</code></pre>"},{"location":"members/#acceptdeny-a-pending-join-request","title":"Accept/Deny a Pending Join Request","text":"<p>This request is exclusive to members with permission to manage the group, non Admin/Owners will receive a 401: Unauthorized response.</p> <p>HTTP Request<pre><code>POST /groups/:group_id/members/:membership_id/approval\n{\n  \"approval\": true\n}\n</code></pre> Parameters</p> <ul> <li> <p>membership_id (required)</p> <p>string - The group specific ID of the membership you wish to handle. Please note that this isn't the same as the user ID. In the members key in the group JSON, this is the id value, not the user_id.</p> </li> <li> <p>approval (required)</p> <p>boolean - <code>true</code> to approve, <code>false</code> to deny.</p> </li> </ul> <p>Note: if you deny the membership, <code>state</code> will be \"denied\" instead of \"active\"</p> <p>HTTP Response<pre><code>Status: 200 OK\n{\n  \"membership_id\": 1075929653,\n  \"state\": \"active\"\n}\n</code></pre> HTTP Response<pre><code>Status: 401 Unauthorized\nYou are neither the Owner nor an Admin in this group\n</code></pre></p>"},{"location":"members/#ban-member-v2","title":"Ban Member (v2)","text":"<p>Prevent a member from rejoining a group after they leave.</p> <p>Current members of the group cannot be banned from rejoining as they have not left.</p> <p>Note: This request is relative to <code>https://v2.groupme.com</code>, NOT <code>https://api.groupme.com/v3</code>.</p> HTTP Request<pre><code>POST /groups/:group_id/memberships/:membership_id/destroy\n</code></pre> <p>Parameters</p> <ul> <li> <p>membership_id (required)</p> <p>string - Please note that this isn't the same as the user ID. In the members key in the group JSON, this is the id value, not the user_id.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"members/#change-nickname","title":"Change nickname","text":"<p>Update your nickname in a group. The nickname must be between 1 and 50 characters.</p> HTTP Request<pre><code>POST /groups/:group_id/memberships/update\n{\n  \"membership\": {\n    \"nickname\": \"NEW NICKNAME\"\n  }\n}\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n{\n  \"id\": \"MEMBERSHIP ID\",\n  \"user_id\": \"USER ID\",\n  \"nickname\": \"NEW NICKNAME\",\n  \"muted\": false,\n  \"image_url\": \"AVATAR URL\",\n  \"autokicked\": false,\n  \"app_installed\": true\n}\n</code></pre>"},{"location":"messages/","title":"Group Messages","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"messages/#index","title":"Index","text":"<p>Retrieve messages for a group.</p> <p>By default, messages are returned in groups of 20, ordered by created_at descending. This can be raised or lowered by passing a limit parameter, up to a maximum of 100 messages.</p> <p>Messages can be scanned by providing a message ID as either the before_id, since_id, or after_id parameter. If before_id is provided, then messages immediately preceding the given message will be returned, in descending order. This can be used to continually page back through a group's messages.</p> <p>The after_id parameter will return messages that immediately follow a given message, this time in ascending order (which makes it easy to pick off the last result for continued pagination).</p> <p>Finally, the since_id parameter also returns messages created after the given message, but it retrieves the most recent messages. For example, if more than twenty messages are created after the since_id message, using this parameter will omit the messages that immediately follow the given message. This is a bit counterintuitive, so take care.</p> <p>If no messages are found (e.g. when filtering with before_id) we return code 304.</p> <p>Note that for historical reasons, likes are returned as an array of user ids in the favorited_by key.</p> HTTP Request<pre><code>GET /groups/:group_id/messages\n</code></pre> <p>Parameters</p> <ul> <li> <p>before_id</p> <p>string - Returns messages created before the given message ID</p> </li> <li> <p>since_id</p> <p>string - Returns most recent messages created after the given message ID</p> </li> <li> <p>after_id</p> <p>string - Returns messages created immediately after the given message ID</p> </li> <li> <p>limit</p> <p>integer - Number of messages returned. Default is 20. Max is 100.</p> </li> <li> <p>acceptFiles</p> <p>boolean - A flag to tell the image service your client is capable of receiving non-image files. Setting this value to <code>0</code> or omitting it entirely will NOT omit messages with file attachments in the response; these messages will still be included, but the text property will be overwritten with <code>Please upgrade to download this file.</code> The file attachment will still be fully intact, however. In practice this means that if you care about the text in the message with an attachment, you should set <code>acceptFiles=1</code>.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"count\": 123,\n  \"messages\": [\n    {\n      \"id\": \"1234567890\",\n      \"source_guid\": \"GUID\",\n      \"created_at\": 1302623328,\n      \"user_id\": \"1234567890\",\n      \"group_id\": \"1234567890\",\n      \"name\": \"John\",\n      \"avatar_url\": \"https://i.groupme.com/123456789\",\n      \"text\": \"Hello world \",\n      \"system\": true,\n      \"pinned_by\": \"\",\n      \"pinned_at\": null,\n      \"favorited_by\": [\n        \"101\",\n        \"66\",\n        \"1234567890\"\n      ],\n      \"attachments\": [\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/123456789\"\n        },\n        {\n          \"type\": \"location\",\n          \"lat\": \"40.738206\",\n          \"lng\": \"-73.993285\",\n          \"name\": \"GroupMe HQ\"\n        },\n        {\n          \"type\": \"emoji\",\n          \"placeholder\": \"\",\n          \"charmap\": [\n            [1, 42],\n            [2, 34]\n          ]\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"messages/#show-a-specific-message","title":"Show a Specific Message","text":"<p>Fetches an individual message object by its ID</p> <p>Important</p> <p>This request is relative to <code>https://api.groupme.com/v4/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>GET https://api.groupme.com/v4/groups/:group_id/messages/:message_id\n</code></pre> <p>Parameters</p> <ul> <li> <p>message_id</p> <p>string - The ID of the message you'd like to fetch</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"message\": {\n    \"attachments\": [],\n    \"avatar_url\": \"https://i.groupme.com/572x525.png.e40a56a9f4c141868c56c2fc52bb8b4a\",\n    \"created_at\": 1743898778,\n    \"favorited_by\": [],\n    \"group_id\": \"28330125\",\n    \"id\": \"1743898778900707\",\n    \"name\": \"Bob\",\n    \"sender_id\": \"3274635\",\n    \"sender_type\": \"user\",\n    \"source_guid\": \"android-cbe3d2b5-d245-4b89-8555-838852949490\",\n    \"system\": false,\n    \"text\": \"hi there!\",\n    \"user_id\": \"3274635\",\n    \"platform\": \"gm\",\n    \"pinned_at\": null,\n    \"pinned_by\": \"\"\n  }\n}\n</code></pre>"},{"location":"messages/#send-message","title":"Send Message","text":"<p>Send a message to a group</p> <p>If you want to attach an image, you must first process it through GroupMe's image service (More on that in the attachments documentation)</p> <p>Attachments of type emoji rely on data from GroupMe Emoji powerups.</p> <p>Clients use a placeholder character in the message text and specify a replacement charmap to substitute emoji characters</p> <p>The character map is an array of arrays containing rune data ([[{pack_id,offset}],...]).</p> <p>The placeholder should be a high-point/invisible UTF-8 character.</p> HTTP Request<pre><code>POST /groups/:group_id/messages\n{\n  \"message\": {\n    \"source_guid\": \"GUID\",\n    \"text\": \"Hello world \",\n    \"attachments\": [\n      {\n        \"type\": \"image\",\n        \"url\": \"https://i.groupme.com/123456789\"\n      },\n      {\n        \"type\": \"location\",\n        \"lat\": \"40.738206\",\n        \"lng\": \"-73.993285\",\n        \"name\": \"GroupMe HQ\"\n      },\n      {\n        \"type\": \"emoji\",\n        \"placeholder\": \"\",\n        \"charmap\": [\n          [1, 42],\n          [2, 34]\n        ]\n      }\n    ]\n  }\n}\n</code></pre> <p>Parameters * source_guid (required)</p> <pre><code>string - Client-side IDs for messages. This can be used by clients to set their own identifiers on messages, but the server also scans these for de-duplication. That is, if two messages are sent with the same source_guid within one minute of each other, the second message will fail with a 409 Conflict response. So it's important to set this to a unique value for each message.\n</code></pre> <ul> <li> <p>text (required)</p> <p>string - This can be omitted if at least one attachment is present. The maximum length is 1,000 characters.</p> </li> <li> <p>attachments</p> <p>array - A polymorphic list of attachments (locations, images, replies, etc). You may have more than one of any type of attachment, provided clients can display it.</p> <p>For more information on types of attachments and how to send them, check out the attachments documentation</p> </li> </ul> HTTP Response<pre><code>Status: 201 Created\n{\n  \"message\": {\n    \"id\": \"1234567890\",\n    \"source_guid\": \"GUID\",\n    \"created_at\": 1302623328,\n    \"user_id\": \"1234567890\",\n    \"group_id\": \"1234567890\",\n    \"name\": \"John\",\n    \"avatar_url\": \"https://i.groupme.com/123456789\",\n    \"text\": \"Hello world \",\n    \"system\": false,\n    \"pinned_by\": \"\",\n    \"pinned_at\": null,\n    \"favorited_by\": [\n      \"101\",\n      \"66\",\n      \"1234567890\"\n    ],\n    \"attachments\": [\n      {\n        \"type\": \"image\",\n        \"url\": \"https://i.groupme.com/123456789\"\n      },\n      {\n        \"type\": \"location\",\n        \"lat\": \"40.738206\",\n        \"lng\": \"-73.993285\",\n        \"name\": \"GroupMe HQ\"\n      },\n      {\n        \"type\": \"emoji\",\n        \"placeholder\": \"\",\n        \"charmap\": [\n          [1, 42],\n          [2, 34]\n        ]\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"messages/#edit-message","title":"Edit Message","text":"<p>Edit a message you've already sent</p> <p>If you want to attach an image, you must first process it through GroupMe's image service (More on that in the attachments documentation)</p> <p>Attachments of type emoji rely on data from GroupMe Emoji powerups.</p> <p>Important</p> <p>This request is relative to <code>https://api.groupme.com/v4/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>PUT https://api.groupme.com/v4/groups/:group_id/messages/:message_id\n{\n  \"text\": \"Hello World!\",\n  \"attachments\": [\n    {\n      \"type\": \"image\",\n      \"url\": \"https://i.groupme.com/123456789\"\n    },\n    {\n      \"type\": \"location\",\n      \"lat\": \"40.738206\",\n      \"lng\": \"-73.993285\",\n      \"name\": \"GroupMe HQ\"\n    },\n  ]\n}\n</code></pre> <p>Parameters * text (required)</p> <pre><code>string - This can be omitted if at least one attachment is present. The maximum length is 1,000 characters.\n</code></pre> <ul> <li> <p>attachments</p> <p>array - A polymorphic list of attachments (locations, images, replies, etc). You may have more than one of any type of attachment, provided clients can display it.</p> <p>For more information on types of attachments and how to send them, check out the attachments documentation</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"message\": {\n    \"id\": \"1234567890\",\n    \"source_guid\": \"GUID\",\n    \"created_at\": 1302623328,\n    \"updated_at\": 1747065854,\n    \"user_id\": \"1234567890\",\n    \"group_id\": \"1234567890\",\n    \"name\": \"John\",\n    \"avatar_url\": \"https://i.groupme.com/123456789\",\n    \"text\": \"Hello World!\",\n    \"system\": false,\n    \"pinned_by\": \"\",\n    \"pinned_at\": null,\n    \"favorited_by\": [\n      \"101\",\n      \"66\",\n      \"1234567890\"\n    ],\n    \"attachments\": [\n      {\n        \"type\": \"image\",\n        \"url\": \"https://i.groupme.com/123456789\"\n      },\n      {\n        \"type\": \"location\",\n        \"lat\": \"40.738206\",\n        \"lng\": \"-73.993285\",\n        \"name\": \"GroupMe HQ\"\n      },\n    ]\n  }\n}\n</code></pre>"},{"location":"messages/#delete-a-message","title":"Delete a message","text":"HTTP Request<pre><code>DELETE /conversations/:group_id/messages/:message_id\n</code></pre> HTTP Response<pre><code>Status: 204 Deleted\n</code></pre>"},{"location":"oauth/","title":"Oauth / MFA Management","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"oauth/#logging-in","title":"Logging In","text":"<p>This is how you authenticate a GroupMe account's email and password in order to receive an API token. </p> <p>Sometimes, when an account has MFA enabled or you're logging in from a new device, this call requires a user to answer an MFA challenge using a pin sent to their phone and then retry logging in using the code attached to the MFA interaction.</p> <p>Important</p> <p>This request is relative to <code>https://v2.groupme.com/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>POST https://v2.groupme.com/access_tokens\n{\n  \"app_id\": \"groupme-web\",\n  \"device_id\": \"27f34b56f0687987a85201f1f2e872ed\",\n  \"grant_type\": \"password\",\n  \"password\": \"12345678\",\n  \"username\": \"email@example.com\",\n  \"verification\": {\n    \"code\": \"5bdbac1c43224a21d02dc94747ae732e31161ba4-2e26f6cd2c6a92038936993e8b9886bd731c6e54\"\n  }\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>app_id (required)</p> <p>string - the name of the application you're attempting to authorize, this can be anything.</p> </li> <li> <p>grant_type (required)</p> <p>string - as far as we're aware, the only acceptable value for this parameter is <code>\"password\"</code>.</p> </li> <li> <p>password (required)</p> <p>string - your GroupMe account's password</p> </li> <li> <p>username (required)</p> <p>string - the username or email registered with your account</p> </li> <li> <p>device_id</p> <p>string - this is an optional device identifier which is stored by GroupMe. It can be anything you want, but it should be specific to the device/client. If you haven't logged in with this device ID before (or if you leave it empty), the server will Force an MFA challenge by verifying your phone number. Even if MFA is not enabled for your account.</p> </li> <li> <p>verification</p> <p>object - this optional object contains the parameter <code>code</code>, which should be set to a valid MFA interaction ID if you have one. Normally you send this API call once without this parameter, then if you receive an an MFA challenge, you'd solve the challenge and try this call again, including the <code>verification</code> parameter.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"access_token\": \"OSJ05EiYrWfLmWz23DvrYEhzafflWMAqWZjjHJOT\",\n  \"user_id\": \"93645911\",\n  \"user_name\": \"Bob\",\n  \"expires_at\": 1749674981,\n  \"user\": {\n    \"id\": \"93645911\",\n    \"name\": \"Isaac\",\n    \"email\": \"email@example.com\",\n    \"avatar_url\": \"https://i.groupme.com/200x200.jpeg.94e0ac5891aa4e6f8ad4bbf961defe4d\",\n    \"admin\": false\n  }\n}\n</code></pre> <p>Or, if an MFA challenge is thrown:</p> <p>See how to authorize this MFA verification code in the next section.</p> HTTP Response<pre><code>Status: 202 Accepted\n{\n  \"verification\": {\n    \"code\": \"5bdbac1c43224a21d02dc94747ae732e31161ba4-700d069528b2364ebc32b9f721b25d93239279d3\",\n    \"methods\": {\n      \"call\": \"43\",\n      \"sms\": \"43\",\n      \"email\": \"em***********@example.com\"\n    },\n    \"status\": \"unverified\",\n    \"type\": \"force\",\n    \"long_pin\": \"c9b6acf22f61\",\n    \"system_number\": \"+1 5095931886\"\n  }\n}\n</code></pre>"},{"location":"oauth/#handling-mfa-challenges","title":"Handling MFA Challenges","text":"<p>The MFA system is relatively straightforward. When the server requires multi-factor authentication, it will issue the client an MFA code ID. </p> <p>Your client follows one of a few methods to verify that MFA ID, and then passes it back to the server.</p> <p>Option 1: They text you</p> <p>To tell the server to send a text:</p> HTTP Request<pre><code>POST /verifications/:mfa_id/initiate\n{\n  \"verification\": {\n    \"method\": \"sms\"\n  }\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>mfa_id</p> <p>string - this is the long string given to you whenever the server requires an MFA challenge. It should look something like: <code>5bdbac1c43224a21d02dc94747ae732e31161ba4-700d069528b2364ebc32b9f721b25d93239279d3</code>.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"hint\": \"22\"\n}\n</code></pre> <p>Now you can verify the pin:</p> HTTP Request<pre><code>POST /verifications/:mfa_id/confirm\n{\n  \"verification\": {\n    \"pin\": \"1234\"\n  }\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>mfa_id</p> <p>string - this is the long string given to you whenever the server requires an MFA challenge.</p> </li> <li> <p>pin</p> <p>string - the pin texted to you when you initiated the MFA challenge. Alternatively, this can be a backup code that was generated when you initially activated MFA for your account.</p> </li> </ul> <p>If the pin is correct, you will receive a response that looks like this:</p> HTTP Response<pre><code>Status: 200 OK\n{\n  \"status\": 20000\n}\n</code></pre> <p>If the pin was incorrect, you will receive a response indicating how many tries you have left.</p> HTTP Response<pre><code>Status: 400 Bad Request\n{\n  \"remaining_attempts\": 2\n}\n</code></pre> <p>At this point, the MFA code you've been given should be verified and you can pass it along to whatever call initiated the MFA interaction.</p> <p>Option 2: You text them</p> <p>This doesn't require an initiation step, instead, you send a text containing the <code>long_pin</code> to the <code>system_number</code> provided when the server issues an MFA challenge. </p> <p>Official clients use a text that looks like this:</p> Text<pre><code>Send this text to verify this phone number: (c9b6acf22f61)\n</code></pre> <p>Where <code>c9b6acf22f61</code> is the <code>long_pin</code> you received from the server.</p> <p>Because sending a text is asynchronous, you need to wait and validate that the server has received your SMS before attempting to use the MFA ID. You can do this via polling the ID to see if it's validated yet.</p> <p>Tip</p> <p>You can use this call to check if any MFA ID is valid, not just ones where you're sending the text. It's most relevant here, so thats why we include it.</p> HTTP Request<pre><code>GET /verifications/:mfa_id\n</code></pre> <p>Parameters</p> <ul> <li> <p>mfa_id</p> <p>string - this is the long string given to you whenever the server requires an MFA challenge. It should look something like: <code>5bdbac1c43224a21d02dc94747ae732e31161ba4-700d069528b2364ebc32b9f721b25d93239279d3</code>.</p> </li> </ul> HTTP Response if Verified<pre><code>Status: 200 OK\n{\n  \"verification\": {\n    \"code\": \"5bdbac1c43224a21d02dc94747ae732e31161ba4-700d069528b2364ebc32b9f721b25d93239279d3\",\n    \"methods\": {\n      \"call\": \"43\",\n      \"sms\": \"43\",\n      \"email\": \"em***********@example.com\"\n    },\n    \"status\": \"verified\",\n    \"type\": \"force\",\n    \"long_pin\": \"c9b6acf22f61\",\n    \"system_number\": \"+1 5095931886\"\n  }\n}\n</code></pre> HTTP Response if not yet Verified<pre><code>Status: 200 OK\n{\n  \"verification\": {\n    \"code\": \"5bdbac1c43224a21d02dc94747ae732e31161ba4-700d069528b2364ebc32b9f721b25d93239279d3\",\n    \"methods\": {\n      \"call\": \"43\",\n      \"sms\": \"43\",\n      \"email\": \"em***********@example.com\"\n    },\n    \"status\": \"unverified\",\n    \"type\": \"force\",\n    \"long_pin\": \"c9b6acf22f61\",\n    \"system_number\": \"+1 5095931886\"\n  }\n}\n</code></pre> <p>At this point, the MFA code you've been given should be verified and you can pass it along to whatever call initiated the MFA interaction.</p>"},{"location":"oauth/#creating-an-mfa-backup-code","title":"Creating an MFA backup code","text":"<p>This allows you to pass an MFA challenge without access to your phone. It's submitted exactly the same way you would an SMS pin.</p> HTTP Request<pre><code>POST /user/mfa/backup\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n{\n  \"mfa\": {\n    \"backup_code\": \"cuzmg-xo2xm\"\n  }\n}\n</code></pre>"},{"location":"oauth/#enabling-mfa","title":"Enabling MFA","text":"<p>This call activates an MFA channel for your account, it works just like logging in. </p> <p>You make this call once without an MFA verification object, receive an MFA ID for the interaction, validate it using the steps detailed in the Handling MFA Challenges section, then make this call a second time including the now verified MFA ID.</p> <p>After establishing the MFA channel you must enable it with a seperate call.</p> <p>Important</p> <p>Activating MFA will log you out everywhere, including 3rd party Oauth apps. This proccess will invalidate your current API token and return a new one that you should use to make subsequent API calls.</p> HTTP Request<pre><code>POST /user/mfa\n{\n  \"channel\": {\n    \"method\": \"phone_number\"\n  },\n  \"verification\": {\n    \"code\": \"5bdbac1c43224a21d02dc94747ae732e31161ba4-5deced22aa9ceeb24c2d6501f5f293188dee872f\"\n  }\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>method (required)</p> <p>string - Must be <code>\"phone_number\"</code> (the only known working method)</p> </li> <li> <p>code</p> <p>string - A verified MFA ID obtained by completing the verification challenge. This only needs to be inlcuded on the second request you make to this endpoint.</p> </li> </ul> <p>On the first call you make, whithout sending a verification code, the response should look like this:</p> HTTP Response<pre><code>Status: 202 Accepted\n{\n  \"verification\": {\n    \"code\": \"5bdbac1c43224a21d02dc94747ae732e31161ba4-5deced22aa9ceeb24c2d6501f5f293188dee872f\",\n    \"methods\": {\n      \"sms\": \"22\",\n      \"call\": \"22\"\n    },\n    \"status\": \"unverified\",\n    \"long_pin\": \"8b4801ccd56b\",\n    \"system_number\": \"+1 2533728988\"\n  }\n}\n</code></pre> <p>After the second call including a verified MFA ID, the response should look like this:</p> HTTP Response<pre><code>Status: 201 Created\n{\n  \"status\": 20100\n}\n</code></pre> <p>Now that the MFA channel is established, we can enable it like this:</p> HTTP Request<pre><code>POST /user/mfa\n{\n  \"mfa\": {\n    \"status\": \"enable\"\n  }\n}\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n{\n  \"mfa\": {\n    \"backup_code\": \"h1mie-y775n\"\n  },\n  \"access_token\": {\n    \"access_token\": \"s0i7K5Jif0u4YS7hOKa8SyADgWHUs4D4ulBqX1di\",\n    \"user_id\": \"93645911\",\n    \"user_name\": \"Bob\",\n    \"expires_at\": null,\n    \"user\": {\n      \"id\": \"93645911\",\n      \"name\": \"Bob\",\n      \"email\": \"email@example.com\",\n      \"avatar_url\": \"https://i.groupme.com/200x200.jpeg.94e0ac5891aa4e6f8ad4bbf961defe4d\",\n      \"admin\": false\n    }\n  }\n}\n</code></pre>"},{"location":"oauth/#disabling-mfa","title":"Disabling MFA","text":"<p>This call turns off MFA for your account</p> HTTP Request<pre><code>POST /user/mfa\n{\n  \"mfa\": {\n    \"status\": \"disable\"\n  }\n}\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"oauth/#index-authorized-apps","title":"Index authorized apps","text":"<p>List applications with active tokens. </p> <p>Please note that this call does not list the tokens themselves, or when they will expire. It only provides enough information to tell you which clients currently have access to your account.</p> <p>Important</p> <p>This request is relative to <code>https://v2.groupme.com/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>GET https://v2.groupme.com/access_tokens\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n{\n  \"access_tokens\": [\n    {\n      \"id\": 323024813,\n      \"created_at\": \"2025-05-28T21:23:02.5949Z\",\n      \"app_id\": \"GroupMe-iOS\"\n    },\n    {\n      \"id\": 323044533,\n      \"created_at\": \"2025-05-28T21:20:04.0170Z\",\n      \"app_id\": \"groupme-web\"\n    }\n  ]\n}\n</code></pre>"},{"location":"oauth/#revoking-an-api-token-oauth-application","title":"Revoking an API token / Oauth Application","text":"<p>This call invalidates a token with a particular token ID, which can be identified using the call above.</p> <p>Important</p> <p>This request is relative to <code>https://v2.groupme.com/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>POST https://v2.groupme.com/access_tokens/:token_id/destroy\n</code></pre> <p>Parameters</p> <ul> <li> <p>token_id</p> <p>string - the ID of the token you want to revoke. This can be found in the <code>GET /access_tokens</code> response.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"oauth/#logging-out-invalidating-your-current-token","title":"Logging out (Invalidating your current token)","text":"<p>You will not be able to send any subsequent requests using the token that authorizes this request.</p> <p>Important</p> <p>This request is relative to <code>https://v2.groupme.com/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>POST https://v2.groupme.com/access_tokens/current/destroy\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"oauth/#changing-your-account-password","title":"Changing your Account Password","text":"<p>Important</p> <p>This call will log you out everywhere and will revoke the token you're currently using. In order to get a new API token, you will need to log back in with your new password</p> HTTP Request<pre><code>POST /users/password\n{\n  \"password\": \"12345678\",\n  \"password_current\": \"blahblahblah\"\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>password</p> <p>string - this is your new password</p> </li> <li> <p>password_current</p> <p>string - this is your current password</p> </li> </ul> HTTP Response<pre><code>Status: 201 Created\n{}\n</code></pre>"},{"location":"pins/","title":"Pins","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"pins/#pin-a-message","title":"Pin a message","text":"<p>Pins a message.</p> <p>Note that trying to pin a message which is already pinned will result in an unhelpful 400 error. It may be difficult to programatically determine whether a given call fails due to an actual bad request, or if it's just because the message has already been pinned. For now, you just have to enumerate the pinned mesages and see if there's a match, or get the messatge object and see if the \"pinned_at\" field is null</p> HTTP Request<pre><code>POST /conversations/:conversation_id/messages/:message_id/pin\n</code></pre> <p>Parameters</p> <ul> <li> <p>conversation_id</p> <p>string - The ID of the conversation. For groups, this is just the group ID, whereas for DMs, it's the DM ID, which is of the form <code>first_user_id+second_user_id</code> - so, for example, <code>1234+9876</code>. The lower ID seems to always be first.</p> </li> <li> <p>message_id</p> <p>string - The ID of the message to pin.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"pins/#unpin-a-message","title":"Unpin a message","text":"<p>Unpins a message.</p> <p>The same note on errors applies - trying to unpin a message which is not already pinned will result in an unhelpful 400 error.</p> HTTP Request<pre><code>POST /conversations/:conversation_id/messages/:message_id/unpin\n</code></pre> <p>Parameters</p> <ul> <li> <p>conversation_id</p> <p>string - The ID of the conversation. For groups, this is just the group ID, whereas for DMs, it's the DM ID, which is of the form <code>first_user_id+second_user_id</code> - so, for example, <code>1234+9876</code>. The lower ID seems to always be first.</p> </li> <li> <p>message_id</p> <p>string - The ID of the message to unpin.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"pins/#list-all-pinned-messages","title":"List all pinned messages","text":"<p>List all of the pinned messages. The request varies slightly for groups and DMs, unlike the above methods.</p> HTTP Request (For Groups)<pre><code>GET /pinned/groups/:group_id/messages/\n</code></pre> HTTP Request (For DMs)<pre><code>GET /pinned/direct_messages\n</code></pre> <p>Parameters</p> <ul> <li> <p>conversation_id (required for groups)</p> <p>string - The ID of the conversation. For groups, this is just the group ID, whereas for DMs, it's the DM ID, which is of the form <code>first_user_id+second_user_id</code> - so, for example, <code>1234+9876</code>. The lower ID seems to always be first.</p> </li> <li> <p>other_user_id (required for DMs)</p> </li> </ul> <p>string - The ID of the user (other than you) in the DM channel you're getting the Pins for</p> HTTP Response (For Groups)<pre><code>Status: 200 OK\n{\n  \"count\": 1,\n  \"messages\": [\n    {\n      \"id\": \"12345\",\n      \"name\": \"Dasaniel Royer\",\n      \"pinned_by\": \"54321\",\n      \"pinned_at\": 123312312\n      ...\n    }\n  ]\n}\n</code></pre> HTTP Response (For DMs)<pre><code>Status: 200 OK\n{\n  \"count\": 1,\n  \"messages\": [\n    {\n      \"id\": \"12345\",\n      \"name\": \"Dasaniel Royer\",\n      \"pinned_by\": \"54321\",\n      \"pinned_at\": 123312312\n      ...\n    }\n  ]\n}\n</code></pre> <p>For the full form of the message object, see the Messages docs. Note the new fields: <code>pinned_by</code> and <code>pinned_at</code>. <code>pinned_by</code> is the user who pinned it, and <code>pinned_at</code> is the timestamp (in seconds) of when it was pinned. When a message hasn't been pinned (which won't happen here, but will happen in other message-getting methods), <code>pinned_by</code> will be an empty string (<code>\"\"</code>), and <code>pinned_at</code> will be <code>null</code>.</p>"},{"location":"polls/","title":"Polls","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"polls/#create-a-poll","title":"Create a poll","text":"<p>Creates a poll, which is immediately sent to the group.</p> HTTP Request<pre><code>POST /poll/:group_id\n{\n    \"subject\": \"Is Dasani the objective best brand of bottled water?\",\n    \"options\": [\n        {\"title\": \"Yes\"},\n        {\"title\": \"Absolutely\"}\n    ],\n    \"expiration\": 1614042900,\n    \"type\": \"multi\",\n    \"visibility\": \"public\"\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>subject (required)</p> <p>string - the title of the poll</p> </li> <li> <p>options (required)</p> <p>array - contains objects of the form <code>{\"title\": option}</code>, where <code>option</code> is the title of that choice</p> </li> <li> <p>expiration (required)</p> <p>integer - Time at which the poll expires, in SECONDS (not milliseconds) since January 1, 1970.</p> </li> <li> <p>type (required)</p> <p>string - can either be \"single\" or \"multi\". Determines if users can respond with more than one choice or only one.</p> </li> <li> <p>visibility (required)</p> <p>string - can either be \"anonymous\" or \"public\". If \"public\", others will be able to see who voted for which options.</p> </li> </ul> HTTP Response<pre><code>Status: 201 Created\n{\n  \"poll\": {\n    \"data\": {\n      \"id\": \"1234567890\",\n      \"subject\": \"Is Dasani the objective best brand of bottled water?\",\n      \"owner_id\": \"123456789\",\n      \"conversation_id\": \"14538582\",\n      \"created_at\": 1613956027,\n      \"expiration\": 1614042900,\n      \"status\": \"active\",\n      \"options\": [\n        {\n          \"id\": \"1\",\n          \"title\": \"Yes\"\n        },\n        {\n          \"id\": \"2\",\n          \"title\": \"Absolutely\"\n        }\n      ],\n      \"last_modified\": 1613956027,\n      \"type\": \"multi\",\n      \"visibility\": \"public\"\n    }\n  },\n  \"message\": {\n    \"attachments\": [\n      {\n        \"poll_id\": \"1613956027340750\",\n        \"type\": \"poll\"\n      }\n    ],\n    \"avatar_url\": \"https://i.groupme.com/1100x1148.jpeg.705e8e84384c4249bb956f230e43d67d\",\n    \"created_at\": 1613956027,\n    \"event\": {\n      \"data\": {\n        \"conversation\": {\n          \"id\": \"123456789\"\n        },\n        \"poll\": {\n          \"id\": \"123456789\",\n          \"subject\": \"Is this a test?\"\n        },\n        \"user\": {\n          \"id\": \"123456789\",\n          \"nickname\": \"Dasani Lover\"\n        }\n      },\n      \"type\": \"poll.created\"\n    },\n    \"favorited_by\": [],\n    \"group_id\": \"123456789\",\n    \"id\": \"1234567890\",\n    \"name\": \"Daniel Royer\",\n    \"sender_id\": \"123456789\",\n    \"sender_type\": \"user\",\n    \"source_guid\": \"77a6d4981c554c71ac40ae30ba15e8a6\",\n    \"system\": false,\n    \"text\": \"Created new poll 'Is Dasani the objective best brand of bottled water?': https://s.groupme.com/1shwZm\",\n    \"user_id\": \"123456789\"\n  }\n}\n</code></pre>"},{"location":"polls/#viewing-results","title":"Viewing Results","text":"<p>Shows the responses to a poll</p> HTTP Request<pre><code>GET /poll/:group_id/:poll_id\n</code></pre> HTTP Response<pre><code>Status: 201 Created\n{\n  \"poll\": {\n    \"data\": {\n      \"id\": \"123456789\",\n      \"subject\": \"Is Dasani the objective best brand of bottled water?\",\n      \"owner_id\": \"123456789\",\n      \"conversation_id\": \"123456789\",\n      \"created_at\": 1613956027,\n      \"expiration\": 1614042900,\n      \"status\": \"active\",\n      \"options\": [\n        {\n          \"id\": \"1\",\n          \"title\": \"Yes\",\n          \"votes\": 1,\n          \"voter_ids\": [\n            \"123456789\"\n          ]\n        },\n        {\n          \"id\": \"2\",\n          \"title\": \"Absolutely\",\n          \"votes\": 2,\n          \"voter_ids\": [\n            \"123456789\",\n            \"1234567890\"\n          ]\n        }\n      ],\n      \"last_modified\": 1613957145,\n      \"type\": \"multi\",\n      \"visibility\": \"public\"\n    },\n    \"user_votes\": [\n      \"2\",\n      \"1\"\n    ]\n  }\n}\n</code></pre> <p>In an anonymous poll, the \"voter_ids\" field does not exist.</p>"},{"location":"polls/#voting-in-a-poll","title":"Voting in a poll","text":"<p>Vote in a poll, or change your vote if you already voted.</p> HTTP Request (Single-Response Polls)<pre><code>POST /poll/:group_id/:poll_id/:option_id\n</code></pre> HTTP Request (Multi-Response Polls)<pre><code>POST /poll/:group_id/:poll_id/\n{\n    \"votes\": [\"1\", \"2\"]\n}\n</code></pre> <p>Parameters</p> <ul> <li>votes     array - an array of the IDs of the options you want to vote for</li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"poll\": {\n    \"data\": {\n      \"id\": \"123456789\",\n      \"subject\": \"Is Dasani the objective best brand of bottled water?\",\n      \"owner_id\": \"123456789\",\n      \"conversation_id\": \"123456789\",\n      \"created_at\": 1613956027,\n      \"expiration\": 1614042900,\n      \"status\": \"active\",\n      \"options\": [\n        {\n          \"id\": \"1\",\n          \"title\": \"Yes\",\n          \"votes\": 1,\n          \"voter_ids\": [\n            \"123456789\"\n          ]\n        },\n        {\n          \"id\": \"2\",\n          \"title\": \"Absolutely\",\n          \"votes\": 2,\n          \"voter_ids\": [\n            \"123456789\",\n            \"1234567890\"\n          ]\n        }\n      ],\n      \"last_modified\": 1613957145,\n      \"type\": \"multi\",\n      \"visibility\": \"public\"\n    },\n    \"user_votes\": [\n      \"2\",\n      \"1\"\n    ]\n  }\n}\n</code></pre> <p>In an anonymous poll, the \"voter_ids\" field does not exist.</p> <p>If the user has not voted, the \"user_votes\" field will not exist.</p>"},{"location":"polls/#end-poll","title":"End poll","text":"<p>End a poll right now</p> HTTP Request<pre><code>POST /poll/:group_id/:poll_id/end\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n{\n  \"poll\": {\n    \"data\": {\n      \"id\": \"123456789\",\n      \"subject\": \"Is Dasani the objective best brand of bottled water?\",\n      \"owner_id\": \"123456789\",\n      \"conversation_id\": \"123456789\",\n      \"created_at\": 1613956027,\n      \"expiration\": 1614042900,\n      \"status\": \"active\",\n      \"options\": [\n        {\n          \"id\": \"1\",\n          \"title\": \"Yes\",\n          \"votes\": 1,\n          \"voter_ids\": [\n            \"123456789\"\n          ]\n        },\n        {\n          \"id\": \"2\",\n          \"title\": \"Absolutely\",\n          \"votes\": 2,\n          \"voter_ids\": [\n            \"123456789\",\n            \"1234567890\"\n          ]\n        }\n      ],\n      \"last_modified\": 1613957145,\n      \"type\": \"multi\",\n      \"visibility\": \"public\"\n    },\n    \"user_votes\": [\n      \"2\",\n      \"1\"\n    ]\n  }\n}\n</code></pre>"},{"location":"polls/#list-polls","title":"List polls","text":"<p>List all the polls in this chat</p> HTTP Request<pre><code>GET /poll/:group_id\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n{\n  \"polls\": [\n    {\n      \"data\": {\n        \"id\": \"123456789\",\n        \"subject\": \"Is this also a test?\",\n        \"owner_id\": \"123456789\",\n        \"conversation_id\": \"123456789\",\n        \"created_at\": 1613957003,\n        \"expiration\": 1614043800,\n        \"status\": \"active\",\n        \"options\": [\n          {\n            \"id\": \"1\",\n            \"title\": \"Sure\",\n            \"votes\": 2\n          },\n          {\n            \"id\": \"2\",\n            \"title\": \"I guess\"\n          }\n        ],\n        \"last_modified\": 1613958713,\n        \"type\": \"single\",\n        \"visibility\": \"anonymous\"\n      },\n      \"user_vote\": \"1\",\n      \"user_votes\": [\n        \"1\"\n      ]\n    },\n    {\n      \"data\": {\n        \"id\": \"123456789\",\n        \"subject\": \"Is this a test?\",\n        \"owner_id\": \"123456789\",\n        \"conversation_id\": \"123456789\",\n        \"created_at\": 1613956027,\n        \"expiration\": 1613958805,\n        \"status\": \"past\",\n        \"options\": [\n          {\n            \"id\": \"1\",\n            \"title\": \"Yes\",\n            \"votes\": 1,\n            \"voter_ids\": [\n              \"123456789\"\n            ]\n          },\n          {\n            \"id\": \"2\",\n            \"title\": \"Yes but the second option\",\n            \"votes\": 1,\n            \"voter_ids\": [\n              \"1234567890\"\n            ]\n          }\n        ],\n        \"last_modified\": 1613958805,\n        \"type\": \"multi\",\n        \"visibility\": \"public\"\n      },\n      \"user_votes\": [\n        \"1\"\n      ]\n    }\n  ],\n  \"continuation_token\": null\n}\n</code></pre>"},{"location":"push/","title":"WebSockets Overview","text":"<p>GroupMe\u2019s real-time messaging is powered by a Faye-based Bayeux WebSocket protocol. Clients subscribe to various channels and receive structured push messages.</p> <p>GroupMe's official documentation has some outdated and incomplete information, but it may be helpful to read alongside these docs.</p> <p>WebSocket messages sent downstream to clients are divided into three channels, each with its own respective context and message types.</p> <p>The most useful channel is <code>/user/:user_id</code>, which sends messages about new events that any client will send you push notifications about.  (e.g., new messages in groups you're a part of or reactions attached to messages you have sent).</p> <p>The other two less important channel types are <code>/groups/:group_id</code>, and <code>/direct_message/:dm_id</code>.  Both send information about specific channels that a client wouldn't need to send push notifications for but would need to render the channel when it's open correctly and on the screen.  (e.g., typing indicators, new reactions attached to other messages in the channel that you have not sent, or even membership and role updates for specific users)</p> <p>Faye/Bayeux WebSocket clients exist in many languages (JavaScript, Ruby, Python, etc.), or you can implement the protocol manually.</p> <p>For verbosity, we outline how to authenticate and connect using a Faye client library, in pure WebSockets (in case you don't have access to a library), and finally in pure HTTP to do manual long-polling.</p>"},{"location":"push/#option-1-using-a-faye-client-recommended","title":"Option 1: Using a Faye client (Recommended)","text":"<p>Start by initiating a connection with GroupMe's Faye server: <pre><code>const faye = require('faye');\nconst client = new faye.Client(\"https://push.groupme.com/faye\");\n</code></pre></p> <p>Next, we need to tell our Client to add our GroupMe API token to any subsequent subscription requests and subscribe to the main user channel: <pre><code>// adds your API credentials to any 'subscribe' request sent to GroupMe.\nclient.addExtension({ \n\u00a0 outgoing: (msg, callback) =&gt; {\n\u00a0 \u00a0 if (msg.channel !== '/meta/subscribe') return callback(msg);\n\u00a0 \u00a0 msg.ext = msg.ext || {};\n\u00a0 \u00a0 msg.ext.access_token = \"&lt;YOUR GROUPME API ACCESS TOKEN&gt;\";\n\u00a0 \u00a0 msg.ext.timestamp = Math.round(Date.now() / 1000);\n\u00a0 \u00a0 callback(msg);\n }\n});\n\n// subscribe to the '/user/:user_id' channel.\nclient.subscribe(\"/user/&lt;YOUR GROUPME USER ID&gt;\", msg =&gt; { \n\u00a0 /* Callback to run when a message is received */\n});\n</code></pre></p> <p>Important</p> <p>The <code>timestamp</code> parameter is in seconds since the Unix epoch, not milliseconds.</p> <p>Finally, we subscribe to any other channels we need to:</p> <p>Tip</p> <p>This step is usually overkill. Almost all important real-time updates will come through the <code>/user/:user_id</code> channel. You will need to subscribe to individual groups or direct message channels if you want to catch read receipts or certain admin events.</p> <pre><code>client.subscribe(\"/group/&lt;GROUP ID&gt; OR /direct_message/&lt;DIRECT MESSAGE CHANNEL ID&gt;\", (msg) =&gt; { \n\u00a0 /* Callback to run when a message is received */\n});\n</code></pre> <p>Important</p> <p>Direct Message channel IDs are reported within the REST API looking something like <code>74938777+93645911</code>, two user IDs separated with a <code>+</code>. However, for whatever reason, the WebSocket server only accepts DM channel IDs when they are separated using an underscore (<code>_</code>). Make sure to find and replace these symbols before attempting to subscribe to those channels.</p>"},{"location":"push/#option-2-pure-websockets","title":"Option 2: Pure WebSockets","text":"<p>If you're not using a Faye client library, you can still connect to GroupMe\u2019s real-time Push Service by directly implementing the Bayeux protocol over WebSockets. This approach is transport-agnostic and works in any language that supports WebSockets and JSON.</p> <p>For complex steps (like subscription formatting), we\u2019ll show JavaScript snippets to help illustrate what your code might look like.</p> <p>Step 1: Perform the Handshake (via HTTP)</p> <p>Before opening a WebSocket, you must perform an initial handshake via HTTP to receive a <code>clientId</code>. This is a one-time HTTP POST request to the Bayeux endpoint.</p> <p>Send a JSON array with a channel of <code>/meta/handshake</code>, the Bayeux version, and the supported connection types. You must include <code>\"websocket\"</code> in <code>supportedConnectionTypes</code>.</p> <pre><code>POST https://push.groupme.com/faye\n[\n {\n\u00a0 \u00a0 \"channel\": \"/meta/handshake\",\n\u00a0 \u00a0 \"version\": \"1.0\",\n\u00a0 \u00a0 \"supportedConnectionTypes\": [\"websocket\"],\n\u00a0 \u00a0 \"id\": \"1\"\n }\n]\n</code></pre> <p>GroupMe will respond with a <code>clientId</code>, which you'll use for all future messages. The response also includes a list of supported transport types (confirm <code>\"websocket\"</code> is included), and an <code>advice</code> object for reconnection behavior.</p> <p>Step 2: Open a WebSocket to the Push Server</p> <p>Once you\u2019ve received a valid <code>clientId</code>, initiate a WebSocket connection to:</p> <pre><code>wss://push.groupme.com/faye\n</code></pre> <p>After connecting, begin sending JSON-encoded Bayeux messages directly over the socket.</p> <p>Step 3: Start the <code>/meta/connect</code> Loop</p> <p>Immediately after connecting, send a <code>/meta/connect</code> message to initiate the message delivery loop. This step essentially \"registers\" your client as ready to receive pushes.</p> <pre><code>{\n\u00a0 \"channel\": \"/meta/connect\",\n\u00a0 \"clientId\": \"&lt;YOUR CLIENT ID&gt;\",\n\u00a0 \"connectionType\": \"websocket\",\n\u00a0 \"id\": \"2\"\n}\n</code></pre> <p>This message must be sent repeatedly after each <code>/meta/connect</code> response \u2014 think of it as polling, but over a persistent socket.</p> <p>In JavaScript, this could look like:</p> <pre><code>const connect = () =&gt; {\n\u00a0 socket.send(JSON.stringify({\n\u00a0 \u00a0 channel: \"/meta/connect\",\n\u00a0 \u00a0 clientId, // &lt;YOUR CLIENT ID&gt;\n\u00a0 \u00a0 connectionType: \"websocket\",\n\u00a0 \u00a0 id: nextMessageId()\n }));\n};\n</code></pre> <p>The server will respond with <code>successful: true</code> and may include an <code>advice</code> field specifying a <code>timeout</code> or <code>interval</code> before the next call.</p> <p>Step 4: Subscribe to Channels</p> <p>To receive push notifications, you must subscribe to the appropriate channel(s). Most useful real-time events will come through <code>/user/:user_id</code>.</p> <p>Subscriptions require authentication: you must include your GroupMe API access token and a Unix timestamp (in seconds) in the <code>ext</code> field.</p> <pre><code>{\n\u00a0 \"channel\": \"/meta/subscribe\",\n\u00a0 \"clientId\": \"&lt;YOUR CLIENT ID&gt;\",\n\u00a0 \"subscription\": \"/user/&lt;YOUR GROUPME USER ID&gt;\", // alternatively, any other channel you'd like to subscribe to\n\u00a0 \"id\": \"3\",\n\u00a0 \"ext\": {\n\u00a0 \u00a0 \"access_token\": \"&lt;YOUR API TOKEN&gt;\",\n\u00a0 \u00a0 \"timestamp\": 1715700000\n }\n}\n</code></pre> <p>In JavaScript, constructing this might look like:</p> <pre><code>const subscribe = (channel) =&gt; {\n\u00a0 socket.send(JSON.stringify({\n\u00a0 \u00a0 channel: \"/meta/subscribe\",\n\u00a0 \u00a0 clientId,\n\u00a0 \u00a0 subscription: channel,\n\u00a0 \u00a0 id: nextMessageId(),\n\u00a0 \u00a0 ext: {\n\u00a0 \u00a0 \u00a0 access_token: GROUPME_ACCESS_TOKEN, // &lt;YOUR GROUPME API ACCESS TOKEN&gt;\n\u00a0 \u00a0 \u00a0 timestamp: Math.floor(Date.now() / 1000)\n }\n }));\n};\n\nsubscribe(`/user/${GROUPME_USER_ID}`); // &lt;YOUR GROUPME USER ID&gt;\n</code></pre> <p>Step 5: Listen for Messages</p> <p>All incoming WebSocket messages will be JSON arrays of Bayeux-style messages. Each one will include:</p> <ul> <li>A <code>channel</code></li> <li>A <code>data</code> payload</li> <li>and potentially some metadata, like <code>id</code> or <code>clientId</code></li> </ul> <p>Example incoming message:</p> <pre><code>{\n\u00a0 \"channel\": \"/user/185\",\n\u00a0 \"data\": {\n\u00a0 \u00a0 \"type\": \"line.create\",\n\u00a0 \u00a0 \"subject\": { \n      \"name\": \"Andygv\",\n\u00a0 \u00a0   \"avatar_url\":null,\n\u00a0 \u00a0   \"location\": { \"name\": null, \"lng\": null,\"foursquare_checkin\": false,\"foursquare_venue_id\": null,\"lat\": null},\n\u00a0 \u00a0   \"created_at\": 1322557919,\n\u00a0 \u00a0   \"picture_url\": null,\n\u00a0 \u00a0   \"system\": false,\n\u00a0 \u00a0   \"text\": \"hey\",\n\u00a0 \u00a0   \"group_id\": \"1835\",\n\u00a0 \u00a0   \"id\": \"15717\",\n\u00a0 \u00a0   \"user_id\": \"162\",\n\u00a0 \u00a0   \"source_guid\": \"GUID 13225579210290\"\n    },\n\u00a0 \"alert\": \"Andygv: hey\"\n},\n\"clientId\": \"1lhg38m0sk6b63080mpc71r9d7q1\",\n\"id\": \"4uso9uuv78tg4l7csica1kc4c\",\n\"authenticated\": true\n}\n</code></pre> <p>In JS, you'd handle this with something like:</p> <pre><code>socket.onmessage = (event) =&gt; {\n\u00a0 const messages = JSON.parse(event.data);\n\u00a0 for (const message of messages) {\n\u00a0 \u00a0 if (message.channel.startsWith(\"/user/\")) {\n\u00a0 \u00a0 \u00a0 handleUserMessage(message.data);\n }\n }\n};\n</code></pre> <p>Step 6: Maintain the Connection Loop</p> <p>The <code>/meta/connect</code> message must be sent repeatedly. This acts as a heartbeat and delivery mechanism for future messages.</p> <p>Follow the <code>advice.interval</code> and <code>advice.timeout</code> values returned in <code>/meta/connect</code> responses to avoid premature disconnection.</p> <p>Optional: Subscribing to Group or DM Channels</p> <p>You can also subscribe to <code>/group/:group_id</code> and <code>/direct_message/:direct_message_id</code> channels to get additional channel-specific messages that wouldn't usually buzz your phone, like typing indicators.</p> <p>To do this: repeat step 4 as many times as necessary, setting the <code>subscription</code> parameter to whatever channel you're interested in.</p> <p>Important</p> <p>Please note that when subscribing to DM channels, you must replace the <code>+</code> in the conversation ID (as it appears in the REST API) with an <code>_</code> instead. We're not entirely sure why this inconsistency exists, but it does.</p>"},{"location":"push/#option-3-manual-long-polling-over-http-not-recommended-but-still-possible","title":"Option 3: Manual Long-Polling over HTTP (Not Recommended, but still possible)","text":"<p>Start by establishing a connection with GroupMe's Faye server.</p> <p>Send a POST request to <code>https://push.groupme.com/faye</code>. It should look like this:</p> <pre><code>POST https://push.groupme.com/faye\n[\n {\n\u00a0 \u00a0 \"channel\":\"/meta/handshake\",\n\u00a0 \u00a0 \"version\":\"1.0\",\n\u00a0 \u00a0 \"supportedConnectionTypes\":[\"long-polling\"],\n\u00a0 \u00a0 \"id\":\"1\"\n }\n]\n</code></pre> <p>The response should look something like: <pre><code>[\n {\n\u00a0 \u00a0 \"id\": \"1\",\n\u00a0 \u00a0 \"channel\": \"/meta/handshake\",\n\u00a0 \u00a0 \"successful\": true,\n\u00a0 \u00a0 \"version\": \"1.0\",\n\u00a0 \u00a0 \"supportedConnectionTypes\": [\"long-polling\",\"cross-origin-long-polling\",\"callback-polling\",\"websocket\",\"in-process\"],\n\u00a0 \u00a0 \"clientId\": &lt;IMPORTANT CLIENT ID&gt;,\n\u00a0 \u00a0 \"advice\": {\"reconnect\":\"retry\",\"interval\":0,\"timeout\":30000}\n }\n]\n</code></pre></p> <p>Note the <code>clientId</code> value we've just received, as we will need it in the next step.</p> <p>In order to subscribe to channels we need to send another POST request with the following body, inserting the <code>ClientId</code> value we got from the last request in step one.</p> <pre><code>POST https://push.groupme.com/faye\n[\n {\n\u00a0 \u00a0 \"channel\": \"/meta/subscribe\",\n\u00a0 \u00a0 \"clientId\": &lt;CLIENT ID&gt;,\n\u00a0 \u00a0 \"subscription\": \"/user/&lt;YOUR GROUPME USER ID&gt;\",\n\u00a0 \u00a0 \"id\": \"2\",\n\u00a0 \u00a0 \"ext\":\n {\n\u00a0 \u00a0 \u00a0 \u00a0 \"access_token\": \"&lt;YOUR GROUPME API ACCESS TOKEN&gt;\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"timestamp\": &lt;CURRENT TIMESTAMP&gt;\n }\n }\n]\n</code></pre> <p>Important</p> <ol> <li>The <code>id</code> parameter should increment with each successive call to the server. Not doing so may lead to undefined behavior.&gt;</li> </ol> <ol> <li>The <code>timestamp</code> parameter is in seconds since the Unix epoch. Divide whatever timestamp you have by 1000.</li> </ol> <p>GroupMe's response should look something like this:</p> <pre><code>[\n {\n\u00a0 \u00a0 \"id\": \"2\",\n\u00a0 \u00a0 \"clientId\": &lt;CLIENT ID&gt;,\n\u00a0 \u00a0 \"channel\": \"/meta/subscribe\",\n\u00a0 \u00a0 \"successful\": true,\n\u00a0 \u00a0 \"subscription\": \"/user/&lt;YOUR GROUPME USER ID&gt;\"\n }\n]\n</code></pre> <p>Tip</p> <p>This step is usually overkill. Almost all important real-time updates will come through the <code>/user/:user_id</code> channel. You will need to subscribe to individual groups or direct message channels if you want to catch read receipts or certain admin events.</p> <p>The POST request for subscribing to a specific channel looks like this (Note that it is basically exactly the same except for a different subscription channel):</p> <pre><code>POST https://push.groupme.com/faye\n[\n {\n\u00a0 \u00a0 \"channel\": \"/meta/subscribe\",\n\u00a0 \u00a0 \"clientId\": &lt;CLIENT ID&gt;,\n\u00a0 \u00a0 \"subscription\": \"/group/&lt;GROUP ID&gt;\" OR \"/direct_message/&lt;DIRECT MESSAGE CHANNEL ID&gt;\",\n\u00a0 \u00a0 \"id\": \"2\",\n\u00a0 \u00a0 \"ext\": {\n\u00a0 \u00a0 \u00a0 \"access_token\": \"&lt;YOUR GROUPME API ACCESS TOKEN&gt;\",\n\u00a0 \u00a0 \u00a0 \"timestamp\": &lt;CURRENT TIMESTAMP&gt;\n }\n }\n]\n</code></pre> <p>Important</p> <p>Direct Message channel IDs are reported within the REST API looking something like <code>74938777+93645911</code>, two user IDs separated with a <code>+</code>. However, for whatever reason, the WebSocket server only accepts DM channel IDs when they are separated using an underscore (<code>_</code>). Make sure to find and replace these symbols before attempting to subscribe to those channels.</p> <p>This step is already handled for you by most Faye libraries. However, if you're doing this manually via HTTP and not WebSockets, you will need to manually check for updates from the Faye server.</p> <pre><code>POST https://push.groupme.com/faye\n[\n {\n\u00a0 \u00a0 \"channel\": \"/meta/connect\",\n\u00a0 \u00a0 \"clientId\": &lt;CLIENT ID&gt;,\n\u00a0 \u00a0 \"connectionType\": \"long-polling\",\n\u00a0 \u00a0 \"id\": \"3\"\n }\n]\n</code></pre> <p>If GroupMe has nothing to report, it will respond with an array of placeholder objects for each of the channels you're subscribed to. That would look something like this:</p> <pre><code>[\n {\n\u00a0 \u00a0 \"id\": \"4\",\n\u00a0 \u00a0 \"clientId\": &lt;CLIENT ID&gt;,\n\u00a0 \u00a0 \"channel\": \"/meta/connect\",\n\u00a0 \u00a0 \"successful\": true,\n\u00a0 \u00a0 \"advice\": {\"reconnect\":\"retry\",\"interval\":0,\"timeout\":30000}\n },\n {\n\u00a0 \u00a0 \"channel\": \"/user/&lt;YOUR GROUPME USER ID&gt;\",\n\u00a0 \u00a0 \"data\": {\"ping\":true},\n\u00a0 \u00a0 \"clientId\": &lt;CLIENT ID&gt;,\n\u00a0 \u00a0 \"id\": \"5\",\n\u00a0 \u00a0 \"ext\": {\"access_token\":\"&lt;access token&gt;\",\"timestamp\":1322557872},\n\u00a0 \u00a0 \"authenticated\": true\n }\n]\n</code></pre> <p>If there is something to report, GroupMe will respond with something that might look like this:</p> <pre><code>[\n {\n\u00a0 \u00a0 \"id\": \"5\",\n\u00a0 \u00a0 \"clientId\": &lt;CLIENT ID&gt;,\n\u00a0 \u00a0 \"channel\": \"/meta/connect\",\n\u00a0 \u00a0 \"successful\": true,\n\u00a0 \u00a0 \"advice\": {\"reconnect\":\"retry\",\"interval\":0,\"timeout\":30000}\n },\n {\n\u00a0 \u00a0 \"channel\": \"/user/&lt;YOUR GROUPME USER ID&gt;\",\n\u00a0 \u00a0 \"data\": {\n\u00a0 \u00a0 \u00a0 \"type\": \"line.create\",\n\u00a0 \u00a0 \u00a0 \"subject\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \"name\":\"Andygv\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"avatar_url\":null,\n\u00a0 \u00a0 \u00a0 \u00a0 \"location\": { \"name\": null, \"lng\": null,\"foursquare_checkin\": false,\"foursquare_venue_id\": null,\"lat\": null},\n\u00a0 \u00a0 \u00a0 \u00a0 \"created_at\": 1322557919,\n\u00a0 \u00a0 \u00a0 \u00a0 \"picture_url\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \"system\": false,\n\u00a0 \u00a0 \u00a0 \u00a0 \"text\": \"hey\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"group_id\": \"1835\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"id\": \"15717\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"user_id\": \"162\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"source_guid\": \"GUID 13225579210290\"\n },\n\u00a0 \u00a0 \u00a0 \"alert\": \"Andygv: hey\"\n },\n\u00a0 \u00a0 \"clientId\": &lt;CLIENT ID&gt;,\n\u00a0 \u00a0 \"id\": \"4uso9uuv78tg4l7csica1kc4c\",\n\u00a0 \u00a0 \"authenticated\":true\n }\n]\n</code></pre>"},{"location":"push/#websocket-message-structure","title":"Websocket Message Structure","text":"<p>When your client is connected to the GroupMe WebSocket server and subscribed to channels, you will receive messages. These messages follow the Bayeux protocol, and the core information is typically found within the data object of the incoming Faye message.</p> <p>The most important field within data is data.type, which indicates the kind of event that has occurred.</p> <pre><code>// General structure of an incoming Faye message\n{\n  \"channel\": \"/user/:your_user_id\" || \"/group/:group_id\" || \"/direct_message/:direct_message_id\",\n  \"clientId\": \"Faye client ID\", // this was documented in the steps for connecting to the websocket above\n  \"id\": \"Incrementing Faye message ID\",\n  \"data\": {\n    \"type\": \"ping\" || \"line.create\" || \"like.create\" etc...,\n    // The rest of the data object. These properties depend on the `type` parameter\n  }\n}\n</code></pre> <ul> <li><code>ping</code> - A keep-alive message. You don't usually have to bother handling these.</li> <li><code>line.create</code> - A message was sent in a channel you participate in. This is the most common type of message, and includes many events that normally send system messages.</li> <li><code>like.create</code> - Someone reacted to one of your messages.</li> </ul> <p>Messages specific to a group or direct message channel include: </p> <ul> <li><code>favorite</code> - Someone likes a message that is not yours.</li> <li><code>direct_message.create</code> - <code>line.create</code>, but for DM channels.</li> <li><code>message.deleted</code> - A message was deleted.</li> <li><code>message.update</code> - A message was edited.</li> <li><code>typing</code> - Someone started typing.</li> </ul> <p>As far as we're aware, clients only send two types of messages upstream besides subscriptions. Those types are:</p> <ul> <li><code>typing</code> - Used to initiate a typing indicator in a channel, these are good for 5 seconds and then must be resent to keep the indicator alive.</li> <li><code>ping</code> - A keep-alive or presence message, can be used to measure websocket latency.</li> </ul>"},{"location":"push/#other-implementations","title":"Other Implementations","text":"<p>For those curious here are some other working implementations beyond the scope of the example posted in these docs:</p> <ul> <li> <p>My bot, Lowes. I'm sure I stole this working code from   somewhere, but I can't for the life of me figure out where.</p> </li> <li> <p>groupme_push, a GroupMe push implementation in Python.</p> </li> <li> <p>The GroupMe npm package</p> </li> </ul>"},{"location":"self/","title":"Account Management","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p> <p>Note</p> <p>Calls related to account security, such as managing your password or updating MFA settings are located in the Oauth / MFA Managment section.</p>"},{"location":"self/#about","title":"About","text":"<p>Get details about the authenticated user</p> HTTP Request<pre><code>GET /users/me\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n{\n  \"created_at\": 1622678742,\n  \"email\": \"email@example.con\",\n  \"email_verified\": false,\n  \"facebook_connected\": false,\n  \"id\": \"93645911\",\n  \"image_url\": \"https://i.groupme.com/200x200.jpeg.94e0ac5891aa4e6f8ad4bbf961defe4d\",\n  \"locale\": \"en_us\",\n  \"microsoft_connected\": false,\n  \"name\": \"Isaac\",\n  \"bio\": \"\u201cBefore you criticize someone, walk a mile in their shoes. That way, when you criticize them, you'll be a mile away and you\u2019ll have their shoes.\u201d -Someone wiser than me\\n\",\n  \"phone_number\": \"+1 2345678910\",\n  \"sms\": false,\n  \"twitter_connected\": false,\n  \"updated_at\": 1747863063,\n  \"user_id\": \"93645911\",\n  \"zip_code\": null,\n  \"share_url\": \"https://groupme.com/contact/93645911/njLqSwBU\",\n  \"share_qr_code_url\": \"https://image.groupme.com/qr/contact/93645911/njLqSwBU/preview?avatarUrl=https%3A%2F%2Fi.groupme.com%2F200x200.jpeg.94e0ac5891aa4e6f8ad4bbf961defe4d\",\n  \"mfa\": {\n    \"enabled\": false,\n    \"channels\": null\n  },\n  \"tags\": [\n    \"phone-us\"\n  ],\n  \"prompt_for_survey\": false,\n  \"show_age_gate\": false,\n  \"birth_date_set\": true,\n  \"major_codes\": [\n    3702,\n    5506\n  ],\n  \"graduation_year\": \"\",\n  \"campus_profile_visibility\": \"major\",\n  \"photo_urls\": [\n    \"https://i.groupme.com/408x723.jpeg.cc234ac0ee8a4d3a82ead19dee523193\",\n    \"https://i.groupme.com/408x723.jpeg.35e3736109b44d788ec5ff3b7a444a57\",\n    \"https://i.groupme.com/408x723.jpeg.3a23a3abaef64de98b541eee846fdb2d\"\n  ],\n  \"song_url\": \"https://open.spotify.com/track/5532lQKkhAZUyUKOBA9yrB?si=teTgTqVqTjmAnnHCvXLtyw\",\n  \"interests\": [\n    1026,\n    3015\n  ]\n}\n</code></pre>"},{"location":"self/#update-details","title":"Update Details","text":"<p>Update attributes about your own account</p> HTTP Request<pre><code>POST /users/update\n{\n  \"avatar_url\": \"https://4.bp.blogspot.com/-GAeMYT8SZoI/TtBTK209xMI/AAAAAAAAWts/5nmvpmmvoWo/s1600/TopGun_059Pyxurz.jpg\",\n  \"name\": \"Tom Skerritt\",\n  \"email\": \"viper@topgun.usaf.mil\",\n  \"zip_code\": \"92145\"\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>avatar_url</p> <p>string \u2014 A valid image URL proccesed by GroupMe's image service</p> </li> <li> <p>name</p> <p>string \u2014 Name must be of the form FirstName LastName</p> </li> <li> <p>email</p> <p>string \u2014 Email address. Must be in name@domain.com form.</p> </li> <li> <p>zip_code</p> <p>string \u2014 Zip code.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"id\": \"1234567890\",\n  \"phone_number\": \"+1 2123001234\",\n  \"image_url\": \"https://i.groupme.com/123456789\",\n  \"name\": \"Ronald Swanson\",\n  \"created_at\": 1302623328,\n  \"updated_at\": 1302623328,\n  \"email\": \"me@example.com\",\n  \"sms\": false\n}\n</code></pre>"},{"location":"self/#update-details-alternativeextended-method","title":"Update Details (Alternative/Extended Method)","text":"<p>The GroupMe API technically allows for two different calls that update your profile details: the officially documented call to <code>/users/update</code> above, and also a more useful (but also unofficially documented) call to <code>https://v2.groupme.com/users/:your_user_id</code>. This second option is the one that all official clients currently use and seems to be the most current way clients update the newest addition to profiles, such as your profile gallery, theme song, bio, and intrest tags. </p> <p>Note: all of the parameters in this request are optional, however I'm including them all here as an example for verbosity.</p> <p>Important</p> <p>This request is relative to <code>https://v2.groupme.com/</code>, not <code>https://api.groupme.com/v3/</code>.</p> <p>HTTP Request<pre><code>POST https://v2.groupme.com/users/:your_user_id\n{\n  \"user\": {\n    \"name\": \"Bilbo Baggins\",\n    \"email\": \"example@email.com\"\n    \"avatar_url\": \"https://i.groupme.com/200x200.jpeg.94e0ac5891aa4e6f8ad4bbf961defe4d\",\n    \"bio\": \"Hello World!\",\n    \"song_url\": \"https://open.spotify.com/track/4zu9wo2FXoBSsKjO6tRB3R?si=853de61130814a27\",\n    \"photo_urls\": [\n      \"https://i.groupme.com/790x1402.jpeg.ca86dade7dfb48168735247dce604499\",\n      \"https://i.groupme.com/2270x4032.jpeg.0068aa02a4b949e0b97ab4dc8c9a31f7\",\n      \"https://i.groupme.com/901x1600.jpeg.283ece1d0c9d41c180677393f78ff716\"\n    ],\n    \"intrests\": [\n      1005,\n      1017,\n      1026\n    ],\n    \"disable_favorite_notification\": true,\n    \"group_notification_sound\": \"gm6.wav\",\n    \"dm_notification_sound\": \"gm16.wav\"\n  }\n}\n</code></pre> Parameters</p> <ul> <li> <p>name</p> <p>string \u2014 Name must be of the form FirstName LastName, though a last name is not required</p> </li> <li> <p>email</p> <p>string \u2014 Email address. Must be in name@domain.com form.</p> </li> <li> <p>avatar_url</p> <p>string \u2014 A valid image URL processed by GroupMe's image service</p> </li> <li> <p>bio</p> <p>string \u2014 A description of the profile.</p> </li> <li> <p>song_url</p> <p>string \u2014 Spotify song share URL for your profile's \"theme song\".</p> </li> <li> <p>photo_urls:</p> <p>array \u2014 An array of image urls processed by GroupMe's image service to be displayed in your profile's image gallery. You must have at least 3 for the API to accept them.</p> </li> <li> <p>intrests:</p> <p>array \u2014 an array of intrest tag indexes (as integers), these tags are new and not well documented (but this will hopefully change soon!).</p> </li> <li> <p>disable_favorite_notification:</p> <p>boolean \u2014 <code>true</code> to disable reaction notifications, <code>false</code> to enable them.</p> </li> <li> <p>group_notification_sound:</p> <p>string \u2014 the name of the WAV file to play when you receive a group notification on the Mobile App. These file names are internal to the app, so the options are not well documented.</p> </li> <li> <p>dm_notification sound</p> <p>string \u2014 the name of the WAV file to play when you receive a DM notification on the Mobile App. These file names are internal to the app, so the options are not well documented. (However they appear to be the same options as the ones availibe for the <code>group_notification_sound</code> parameter).</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"user\": {\n    \"id\": \"131245991\",\n    \"created_at\": 1747245002,\n    \"updated_at\": 1747257736,\n    \"name\": \"Bilbo Baggins\",\n    \"phone_number\": \"+1 2345678910\",\n    \"email\": \"example@email.com\",\n    \"avatar_url\": null,\n    \"app_installed\": true,\n    \"direct_message_capable\": true,\n    \"country\": null,\n    \"language\": \"en-US\",\n    \"locale\": \"en_us\",\n    \"disable_started_using_notification\": false,\n    \"disable_favorite_notification\": false,\n    \"sms_disabled\": true,\n    \"sms_disabled_expires_at\": null,\n    \"local_sms_available\": true,\n    \"sleep_until\": null,\n    \"needs_password\": false,\n    \"stopped\": false,\n    \"admin\": false,\n    \"verified\": true,\n    \"email_verified\": false,\n    \"international\": false,\n    \"email_settings\": {\n      \"membership_added\": true,\n      \"group_created\": true\n    },\n    \"group_notification_sound\": \"gm6.wav\",\n    \"dm_notification_sound\": \"gm16.wav\",\n    \"bio\": \"Hello World!\",\n    \"photo_urls\": [\n      \"https://i.groupme.com/790x1402.jpeg.ca86dade7dfb48168735247dce604499\",\n      \"https://i.groupme.com/2270x4032.jpeg.0068aa02a4b949e0b97ab4dc8c9a31f7\",\n      \"https://i.groupme.com/901x1600.jpeg.283ece1d0c9d41c180677393f78ff716\"\n    ],\n    \"song_url\": \"https://open.spotify.com/track/4zu9wo2FXoBSsKjO6tRB3R?si=S8-f5DNDTwGjHVBkixoDIQ\",\n    \"interests\": [\n      1005,\n      1017,\n      1026\n    ]\n  }\n}\n</code></pre>"},{"location":"self/#update-major-tags","title":"Update Major Tags","text":"<p>This call is only allowed for accounts that are members of a school domain, which is not an easy proccess to automate and thus will not be fully documented. HOWEVER, once you are in a domain, you have a few additional calls availible for your account.</p> HTTP Request<pre><code>PUT /directories/user/majors\n{\n  \"codes\": [\n    \"3702\",\n    \"5506\"\n  ]\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>codes</p> <p>array \u2014 an array of Major indexes (as strings), these are numbers that represent the different options for Majors to choose from. The complete list of options alongside their indexes can be found at https://web.groupme.com/assets/majors/majors.en-US.json.</p> </li> </ul> HTTP Response<pre><code>Status: 201 Accepted\n[\n  \"3702\",\n  \"5506\"\n]\n</code></pre>"},{"location":"self/#set-graduation-year-and-domain-visibility","title":"Set Graduation Year and Domain Visibility","text":"<p>This call is only allowed for accounts that are members of a school domain, which is not an easy proccess to automate and thus will not be fully documented. HOWEVER, once you are in a domain, you have a few additional calls availible for your account.</p> <p>This call specifies your graduation year tag inside of your profile as well as what level of visibility you want your profile to be at within the campus domain.</p> HTTP Request<pre><code>PUT /directories/user/membership\n{\n  \"graduation_year\": 2025,\n  \"campus_profile_visibility\": \"major\"\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>graduation_year</p> <p>integer \u2014 The year you'd like the tag to read. This number can't be less than <code>1900</code> or greater than <code>now + 10 years</code>. It can also be <code>null</code> if you do not wish for your graduation year to display on your profile.</p> </li> <li> <p>campus_profile_visibility</p> <p>string \u2014 The level of visibility you want your profile to be at within your domain directory. Can be <code>hidden</code> (nobody at all), <code>graduation_year</code>, <code>major</code>, or <code>visible</code> (everyone in your domain). <code>graduation_year</code> and <code>major</code> are not permitted unless you have specified a year or at least one major.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"id\": 2990607,\n  \"user_id\": 93645911,\n  \"directory_id\": 1928,\n  \"campus_profile_visibility\": \"graduation_year\",\n  \"graduation_year\": \"2025\",\n  \"major_ids\": [\n    59,\n    171\n  ]\n}\n</code></pre>"},{"location":"self/#toggle-profile-sharing","title":"Toggle Profile Sharing","text":"<p>Enables/disables your account's <code>share_url</code> and <code>share_qr_code_url</code> properties.</p> <p>Turning this off and back on again generates a new URL every time and invalidates past ones that you may have shared.</p> HTTP Request<pre><code>POST /users/features/share\n{\n  \"status\": \"enable\"\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>status</p> <p>String - Can be set to <code>enable</code> or <code>disable</code>, enable generates a share URL for your profile, disable invalidates it.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"share_url\": \"https://groupme.com/contact/74938777/OtzZPXiX\",\n  \"share_qr_code_url\": \"https://image.groupme.com/qr/contact/74938777/OtzZPXiX/preview\"\n}\n</code></pre>"},{"location":"self/#enable-sms-mode","title":"Enable SMS mode","text":"<p>Enables SMS mode for N hours, where N is at most 48. After N hours have elapsed, user will receive push notfications.</p> HTTP Request<pre><code>POST /users/sms_mode\n{\n  \"duration\": 4,\n  \"registration_id\": \"TOKEN\"\n}\n</code></pre> <p>Parameters * duration (required)</p> <pre><code>integer - the number of hours to be in SMS mode for. Max of 48. Alternatively can be set to `\"always\"` to never expire.\n</code></pre> <ul> <li> <p>registration_id</p> <p>string - The push notification ID/token that should be suppressed during SMS mode. If this is omitted, both SMS and push notifications will be delivered to the device.</p> </li> </ul> HTTP Response<pre><code>Status: 201 Created\n</code></pre>"},{"location":"self/#disable-sms-mode","title":"Disable SMS mode","text":"<p>Disables SMS mode</p> HTTP Request<pre><code>POST /users/sms_mode/delete\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"self/#index-pinned-conversations","title":"Index pinned conversations","text":"<p>Lists out the IDs of messaging channels you've pinned to the top of your conversations list.</p> <p>Interestingly, groups that you have left or have been deleted by their owners will still appear in this list. However, they will not show in the UI. The only way to remove an ID from this list is to unpin it manually.</p> <p>Important</p> <p>This request is relative to <code>https://api.groupme.com/v4/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>GET https://api.groupme.com/v4/pinned_conversations\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n{\n  \"pinned_conversation_ids\": [\n    \"98905953\",\n    \"98905970\",\n    \"93645911+118825642\",\n    \"99566681\",\n    \"97673234\",\n    \"27317261\",\n    \"28330145\"\n  ]\n}\n</code></pre>"},{"location":"self/#update-pinned-conversations","title":"Update pinned conversations","text":"<p>Alter the list of pinned conversations you've pinned</p> <p>Important</p> <p>This request is relative to <code>https://api.groupme.com/v4/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>PUT https://api.groupme.com/v4/pinned_conversations\n{\n  \"pinned_conversation_ids\": [\n    \"98905953\",\n    \"98905970\",\n    \"93645911+118825642\",\n    \"99566681\",\n    \"97673234\",\n    \"27317261\",\n    \"28330145\"\n  ]\n}\n</code></pre> <p>Parameters * pinned_conversation_ids (required)</p> <pre><code>list (strings) - the IDs of conversations you'd like to have pinned. If an ID is not present in this list but is currently pinned, it will be removed. You don't actually have to be in a group to pin it, but it will not display in your pins list unless you're a member.\n</code></pre> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"subtopics/","title":"Subtopics","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"subtopics/#index","title":"Index","text":"<p>List the authenticated user's active subgroups under a certain parent group.</p> HTTP Request<pre><code>GET /groups/:group_id/subgroups\n</code></pre> <p>Parameters</p> <p>The following parameters are assumed to match the behavior of <code>groups</code>. More testing is needed to determine if these default values match up exactly, so take these as a best guess.</p> <ul> <li>group_id (required)</li> </ul> <p>string - the ID of the parent group to get the subgroups for</p> <ul> <li>page</li> </ul> <p>integer - Fetch a particular page of results. Defaults to 1.</p> <ul> <li>per_page</li> </ul> <p>integer - Define page size. Defaults to 10. </p> HTTP Response<pre><code>Status: 200 OK\n[\n  {\n    \"messages\": {\n      \"count\": 4,\n      \"last_message_id\": \"1234567890987654321\",\n      \"last_message_created_at\": 1715574721,\n      \"last_message_updated_at\": 1715574721,\n      \"preview\": {\n        \"nickname\": \"Bob Doe\",\n        \"text\": \"Hello everyone!\",\n        \"image_url\": \"https://i.groupme.com/1024x1024.jpeg.123456789e9876543211234567e\",\n        \"attachments\": [\n          {\n            \"type\": \"image\",\n             \"url\": \"https://i.groupme.com/123456789\"\n          },\n          {\n            \"type\": \"image\",\n            \"url\": \"https://i.groupme.com/123456789\"\n          }\n        ]\n      }\n    },\n    \"id\": 123456789,\n    \"parent_id\": 123123123,\n    \"topic\": \"Test Topic 1\",\n    \"description\": \"This is a testing topic\",\n    \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.123456789a9876543211234567a\",\n    \"creator_user_id\": 12345678,\n    \"created_at\": 1715574084,\n    \"updated_at\": 1715574721,\n    \"muted_until\": null,\n    \"like_icon\": null,\n    \"unread_count\": null,\n    \"last_read_message_id\": null,\n    \"last_read_at\": null\n  }\n]\n</code></pre>"},{"location":"subtopics/#show","title":"Show","text":"<p>Load a specific subgroup within a parent group.</p> HTTP Request<pre><code>GET /groups/:group_id/subgroups/:subgroup_id\n</code></pre> <p>Parameters</p> <ul> <li>group_id (required)</li> </ul> <p>string - the ID of the parent group to get the subgroup for</p> <ul> <li>subgroup_id (required)</li> </ul> <p>string - the ID of the subgroup to show details of</p> HTTP Response<pre><code>Status: 200 OK\n{\n  \"messages\": {\n    \"count\": 18,\n    \"last_message_id\": \"1234567890987654321\",\n    \"last_message_created_at\": 1715574721,\n    \"last_message_updated_at\": 1715574721,\n    \"preview\": {\n      \"nickname\": \"Jane Doe\",\n      \"text\": \"Hey everyone!\",\n      \"image_url\": \"https://i.groupme.com/1024x1024.jpeg.eabcdefg1234567654321eabcdefg\",\n      \"attachments\": [\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/123456789\"\n        },\n        {\n          \"type\": \"image\",\n          \"url\": \"https://i.groupme.com/123456789\"\n        }\n      ]\n    }\n  },\n  \"id\": 123456789,\n  \"parent_id\": 987654321,\n  \"topic\": \"Test Topic\",\n  \"description\": \"This is a testing topic\",\n  \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.iabcdefg1234567654321iabcdefg\",\n  \"creator_user_id\": 123123123,\n  \"created_at\": 1715574084,\n  \"updated_at\": 1715574721,\n  \"muted_until\": null,\n  \"like_icon\": null,\n  \"unread_count\": null,\n  \"last_read_message_id\": null,\n  \"last_read_at\": null\n}\n</code></pre>"},{"location":"subtopics/#create","title":"Create","text":"<p>Create a topic. You must be an admin in the group to make this call.</p> HTTP Request<pre><code>POST /groups/:group_id/subgroups\n{\n  \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.679caf2a3dc04bd884137065e567047f\",\n  \"description\": \"this is a description\",\n  \"group_type\": \"announcement\",\n  \"topic\": \"test topic\"\n}\n</code></pre> <p>Parameters</p> <ul> <li>group_id (required)</li> </ul> <p>string - the ID of the parent group to get the subgroup for</p> <ul> <li>avatar_url</li> </ul> <p>string - an Image URL for the topic processed by GroupMe's Image Service</p> <ul> <li>description</li> </ul> <p>string - the description for the topic</p> <ul> <li>group_type</li> </ul> <p>string - can be either <code>\"private\"</code> (anyone can post to this topic) or <code>\"announcement\"</code> (only admins can post to this topic)</p> <ul> <li>topic</li> </ul> <p>string - the name of the new topic</p> HTTP Response<pre><code>Status: 201 Accepted\n{\n  \"id\": 107877040,\n  \"topic\": \"test topic\",\n  \"type\": \"announcement\",\n  \"description\": \"this is a description\",\n  \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.679caf2a3dc04bd884137065e567047f\",\n  \"created_at\": 1748457450,\n  \"updated_at\": 1748457450,\n  \"parent_id\": 107876923,\n  \"like_icon\": null\n}\n</code></pre>"},{"location":"subtopics/#update","title":"Update","text":"<p>Update a topic's details</p> HTTP Request<pre><code>PUT /groups/:group_id/subgroups/:subgroup_id\n{\n  \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.679caf2a3dc04bd884137065e567047f\",\n  \"description\": \"this is a new description\",\n  \"group_type\": \"private\",\n  \"topic\": \"new name\",\n    \"like_icon\": {\n        \"pack_id\": 1,\n        \"pack_index\": 49,\n        \"type\": \"emoji\"\n    }\n}\n</code></pre> <p>Parameters</p> <ul> <li>group_id (required)</li> </ul> <p>string - the ID of the parent group to get the subgroup for</p> <ul> <li> <p>subgroup_id (required)</p> <p>string - the ID of the topic you want to update</p> </li> <li> <p>avatar_url</p> </li> </ul> <p>string - an Image URL for the topic processed by GroupMe's Image Service</p> <ul> <li>description</li> </ul> <p>string - the description for the topic</p> <ul> <li>group_type</li> </ul> <p>string - can be either <code>\"private\"</code> (anyone can post to this topic) or <code>\"announcement\"</code> (only admins can post to this topic)</p> <ul> <li>topic</li> </ul> <p>string - the name of the new topic</p> <ul> <li>like icon</li> </ul> <p>object - The GroupMe powerup emoji to set as the group's like icon. See the emoji documentation for more information on what these values mean.</p> HTTP Response<pre><code>{\n  \"id\": 107877040,\n  \"topic\": \"new name\",\n  \"type\": \"private\",\n  \"description\": \"this is a new description\",\n  \"avatar_url\": \"https://i.groupme.com/1024x1024.jpeg.742b941f7eea46998438cee6838268ec\",\n  \"created_at\": 1748457450,\n  \"updated_at\": 1748457988,\n  \"parent_id\": 107876923,\n  \"like_icon\": {\n    \"pack_id\": 1,\n    \"pack_index\": 49,\n    \"type\": \"emoji\"\n  }\n}\n</code></pre>"},{"location":"subtopics/#delete","title":"Delete","text":"<p>Delete a topic</p> HTTP Request<pre><code>DELETE /groups/:group_id/subgroups/:subgroup_id\n</code></pre> <p>Parameters</p> <ul> <li>group_id (required)</li> </ul> <p>string - the ID of the parent group to get the subgroup for</p> <ul> <li> <p>subgroup_id (required)</p> <p>string - the ID of the topic you want to update</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"subtopics/#muteunmute-a-specific-topic","title":"Mute/Unmute a specific Topic","text":"<p>Silence general notifications for the main chat in a group, as well as all of the subtopics. This does not silence @mentions, replies, or reaction notifications for your own messages.</p> <p>Both calls return your member object for the group.</p> HTTP Request (To mute)<pre><code>POST /groups/:group_id/subgroups/:subgroup_id/mute\n{\n  \"duration\": 60\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>duration (required)</p> <p>string - The length of time (in minutes) you want notifications to be silent for. To silence notifications until you enable them again, use <code>null</code>.</p> </li> </ul> HTTP Request (To unmute)<pre><code>POST /groups/:group_id/subgroups/:subgroup_id/unmute\n</code></pre> HTTP Response (For both muting and unmuting)<pre><code>Status: 200 OK\n{\n  \"membership\": {\n    \"id\": \"1080225494\",\n    \"user_id\": \"93645911\",\n    \"country_code\": \"1\",\n    \"phone_number\": \"3192414622\",\n    \"email\": \"stanger.isaac@gmail.com\",\n    \"avatar_url\": \"https://i.groupme.com/200x200.jpeg.94e0ac5891aa4e6f8ad4bbf961defe4d\",\n    \"nickname\": \"Isaac\",\n    \"creator\": true,\n    \"muted\": false,\n    \"snoozed\": false,\n    \"has_sound_enabled\": true,\n    \"pending\": false,\n    \"muted_until\": null,\n    \"muted_children\": {\n      \"107933452\": 253402300800\n    }\n  }\n}\n</code></pre>"},{"location":"users/","title":"Users and Contacts","text":"<p>Unless otherwise stated, endpoints are relative to https://api.groupme.com/v3/ and must include the token of the user making the call - so, for example, if an endpoint is <code>GET /groups</code>, the request you make should be using the URL <code>https://api.groupme.com/v3/groups?token=aSDFghJkl</code>, where <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>URLs which include a variable, such as <code>GET /groups/:id</code>, have their variables marked with a colon. So a request to that endpoint would look like <code>https://api.groupme.com/v3/groups/1234567?token=aSDFghJkl</code>, where <code>1234567</code> is replaced with the group's ID, and <code>aSDFghJkl</code> is replaced with the user's token.</p> <p>Finally, all responses are wrapped in a response envelope of the following form:</p> <pre><code>{\n  \"response\": {\n    \"id\": \"12345\",\n    \"name\": \"Family\"\n    ...\n  },\n  \"meta\": {\n    \"code\": 200,\n    \"errors\": []\n  }\n}\n</code></pre> <p>If the request succeeds, <code>meta.errors</code> will be null, and if the request fails, <code>response</code> will be null.</p>"},{"location":"users/#index-user","title":"Index User","text":"<p>Returns some basic profile information, like the name, bio, and groups you share with another user.</p> <p>Important</p> <p>This request is relative to <code>https://v2.groupme.com/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>GET https://v2.groupme.com/users/:user_id\n</code></pre> <p>Parameters</p> <ul> <li> <p>include_shared_groups</p> <p>boolean - if <code>false</code>, the <code>shared_groups</code> property contained in the response will be <code>null</code>.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"user\": {\n    \"app_installed\": true,\n    \"avatar_url\": \"https://i.groupme.com/1067x1067.jpeg.424df7036b634cdda5237b67b613df34\",\n    \"created_at\": 1567108132,\n    \"direct_message_capable\": true,\n    \"id\": \"74938777\",\n    \"name\": \"Peter\",\n    \"bio\": \"api enthusiast\",\n    \"directories\": [\n      {\n        \"id\": 2738,\n        \"name\": \"University of Maryland\",\n        \"short_name\": \"UMD\"\n      }\n    ],\n    \"photo_urls\": [\n      \"https://i.groupme.com/2270x4032.jpeg.1e27f1524d854fc6b394b10897ff4035\",\n      \"https://i.groupme.com/1170x2079.jpeg.c2269c395fd8466aa68318620d1418be\",\n      \"https://i.groupme.com/2270x4032.jpeg.dbe59e543a274fcb8f6fc6117f182692\",\n      \"https://i.groupme.com/1112x1975.jpeg.c735b54e2e5f4dfa9ea32ea48f01580b\"\n    ]\n  },\n  \"relationship\": null,\n  \"shared_groups\": [\n    {\n      \"group_id\": 27317261,\n      \"group_name\": \"Public GroupMe API Development Chat\",\n      \"group_avatar\": \"https://i.groupme.com/60x60.jpeg.4bf0915fb1944497b3e372f86835eabe\"\n    },\n  ],\n  \"major_codes\": [\n    2102\n  ],\n  \"graduation_year\": \"\",\n  \"campus_profile_visibility\": \"visible\"\n}\n</code></pre>"},{"location":"users/#index-blocks","title":"Index Blocks","text":"<p>A list of contacts you have blocked. These people cannot DM you or add you to groups.</p> HTTP Request<pre><code>GET /blocks?user=&lt;user&gt;\n</code></pre> <p>Parameters</p> <ul> <li> <p>user (required)</p> <p>string - Your user ID</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"blocks\": [\n    {\n      \"user_id\": \"1234567890\",\n      \"blocked_user_id\": \"1234567890\",\n      \"created_at\": 1302623328\n    }\n  ]\n}\n</code></pre>"},{"location":"users/#block-between","title":"Block Between?","text":"<p>Asks if a block exists between you and another user id</p> HTTP Request<pre><code>GET /blocks/between?user=&lt;user&gt;&amp;otherUser=&lt;otherUser&gt;\n</code></pre> <p>Parameters</p> <ul> <li> <p>user (required)</p> <p>string - Your user ID</p> </li> <li> <p>otherUser (required)</p> <p>string - The other user's ID</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n{\n  \"between\": true\n}\n</code></pre>"},{"location":"users/#block","title":"Block","text":"<p>Creates a block between you and the contact</p> HTTP Request<pre><code>POST /blocks?user=&lt;user&gt;&amp;otherUser=&lt;otherUser&gt;\n</code></pre> <p>Parameters</p> <ul> <li> <p>user (required)</p> <p>string - your user id.</p> </li> <li> <p>otherUser (required)</p> <p>string \u2014 user id of person you want to block.</p> </li> </ul> HTTP Response<pre><code>Status: 201 Created\n{\n  \"block\": {\n    \"user_id\": \"1234567890\",\n    \"blocked_user_id\": \"1234567890\",\n    \"created_at\": 1302623328\n  }\n}\n</code></pre>"},{"location":"users/#unblock","title":"Unblock","text":"<p>Removes block between you and other user</p> HTTP Request<pre><code>DELETE /blocks?user=&lt;user&gt;&amp;otherUser=&lt;otherUser&gt;\n</code></pre> <p>Parameters</p> <ul> <li> <p>user (required)</p> <p>string - your user id.</p> </li> <li> <p>otherUser (required)</p> <p>string \u2014 user id of person you want to block.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"users/#unblock-alternative-method","title":"Unblock (Alternative method)","text":"<p>Removes block between you and other user</p> HTTP Request<pre><code>POST /blocks/delete?user=&lt;user&gt;&amp;otherUser=&lt;otherUser&gt;\n</code></pre> <p>Parameters</p> <ul> <li> <p>user (required)</p> <p>string - your user id.</p> </li> <li> <p>otherUser (required)</p> <p>string \u2014 user id of person you want to block.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n</code></pre>"},{"location":"users/#index-relationships","title":"Index Relationships","text":"<p>This endpoint lists all the users in your GroupMe contact book. However, the server\u2014not the client\u2014decides how many results to return in each response. To retrieve the full list of contacts, you\u2019ll need to make repeated requests using the since parameter.</p> <p>Each response is ordered by creation time. To get the next page of results:</p> <ol> <li> <p>Take the created_at_iso8601 timestamp from the last contact in the response.</p> </li> <li> <p>Use that timestamp as the <code>since</code> parameter in your next request.</p> </li> </ol> <p>Repeat this process until the response contains an empty list, which means you've reached the end of the contact list.</p> <p>Important</p> <p>This request is relative to <code>https://api.groupme.com/v4/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>GET https://api.groupme.com/v4/relationships\n</code></pre> <p>Parameters</p> <ul> <li> <p>include_blocked</p> <p>boolean - if <code>false</code>, users that return <code>blocked: true</code> will be omitted from the response.</p> </li> <li> <p>since</p> <p>string - an ISO 8601 timestamp, marking the last contact you've received</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n[\n  {\n    \"id\": \"10416580\",\n    \"created_at\": 1658526371,\n    \"created_at_iso8601\": \"2022-07-22T21:46:11.637999Z\",\n    \"updated_at\": 1678148063,\n    \"updated_at_iso8601\": \"2023-03-07T00:14:23.125308Z\",\n    \"user_id\": \"10416580\",\n    \"name\": \"Bob\",\n    \"avatar_url\": \"https://i.groupme.com/887x887.jpeg.5db37ecbb4b444f5b87a58406dc3e2b9\",\n    \"reason\": 3,\n    \"hidden\": false,\n    \"app_installed\": true,\n    \"mri\": \"8:gid:d1299e35-01bc-4d90-b520-e216ab375aa8\",\n    \"blocked\": false\n  },\n  {\n    \"id\": \"9822918\",\n    \"created_at\": 1658790566,\n    \"created_at_iso8601\": \"2022-07-25T23:09:26.874527Z\",\n    \"updated_at\": 1678148063,\n    \"updated_at_iso8601\": \"2023-03-07T00:14:23.126924Z\",\n    \"user_id\": \"9822918\",\n    \"name\": \"Alice\",\n    \"avatar_url\": \"https://i.groupme.com/492x492.jpeg.47d67a5c7e3b4aa59150fd12aff8a502\",\n    \"reason\": 3,\n    \"hidden\": false,\n    \"app_installed\": true,\n    \"mri\": \"8:gid:a05385a5-ca5a-4747-b963-2d97aa0f401a\",\n    \"blocked\": false\n  }\n  ...\n]\n</code></pre>"},{"location":"users/#add-relationship","title":"Add Relationship","text":"<p>Add a contact given a user ID and their share token. This can be grabbed from the user's share URL, i.e.: <code>https://groupme.com/contact/:user_id/:share_token</code></p> <p>Important</p> <p>This request is relative to <code>https://api.groupme.com/v4/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>POST https://api.groupme.com/v4/relationships/create\n{\n  \"user_id\": \"93645911\",\n  \"token\": \"njLqSwBU\"\n}\n</code></pre> <p>Parameters</p> <ul> <li> <p>user_id</p> <p>string - the user's ID</p> </li> <li> <p>token</p> <p>string - the share token of the user you're adding as a contact. This is extracted from that user's share URL.</p> </li> </ul> HTTP Response<pre><code>Status: 201 Created\n{}\n</code></pre>"},{"location":"users/#import-relationship-from-contact","title":"Import Relationship From Contact","text":"<p>Imports a list of phone contacts into the user's GroupMe relationships. Returns a batch ID, so that you can fetch the results of the import as they could take some time to process.</p> HTTP Request<pre><code>POST /relationships/import_contacts\n[\n  {\n    \"name\": \"Bob\",\n    \"guid\": \"7FC59EDB-A35D-43DA-A5D2-9D94C37C7E69\",\n    \"phone_number\": \"+13195557012\"\n  },\n  {\n    \"name\": \"Alice\",\n    \"guid\": \"2F0D88D3-CFB5-468F-BDA5-E3B3213A6D7D\",\n    \"phone_number\": \"+13855551493\"\n  }\n]\n</code></pre> <p>Parameters</p> <ul> <li> <p>name</p> <p>string - the contact\u2019s display name (e.g., from your address book).</p> </li> <li> <p>guid</p> <p>string - a client-generated unique identifier for this contact (UUID format recommended). Used to track contacts across requests and responses.</p> </li> <li> <p>phone_number</p> <p>string - the contact's phone number. No dashes, spaces, or parens. Must include the country code.</p> </li> </ul> HTTP Response<pre><code>Status: 202 Accepted\n{\n  \"batch_id\": \"f392a4802e01013ef9156aba1bbf95fc\"\n}\n</code></pre>"},{"location":"users/#fetch-relationship-import-results","title":"Fetch Relationship Import Results","text":"<p>Retrieves an array of results from a previously submitted relationship import. Each result includes a matched GroupMe user, mapped back to the original contact via the guid.</p> <p>Important</p> <p>This request is relative to <code>https://api.groupme.com/v4/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>GET https://api.groupme.com/v4/relationships/batch/:batch_id\n</code></pre> <p>Parameters</p> <ul> <li> <p>batch_id</p> <p>string - The batch ID received from the <code>/relationships/import_contacts</code> endpoint.</p> </li> </ul> HTTP Response<pre><code>Status: 200 OK\n[\n  {\n    \"id\": \"86864140\",\n    \"user_id\": \"86864140\",\n    \"name\": \"Bob\",\n    \"avatar_url\": null,\n    \"reason\": 2,\n    \"app_installed\": true,\n    \"hidden\": false,\n    \"mri\": \"8:gid:04d9d058-c8f3-45a6-b898-4686dbfe7163\",\n    \"guid\": \"7533921A-154F-402D-AD51-AFE99F5D0CDC\",\n    \"created_at\": 1750202866,\n    \"created_at_iso8601\": \"2025-06-17T23:27:46.474950Z\",\n    \"updated_at\": 1750202866,\n    \"updated_at_iso8601\": \"2025-06-17T23:27:46.474950Z\"\n  },\n  ...\n]\n</code></pre>"},{"location":"users/#delete-relationship","title":"Delete Relationship","text":"<p>Delete a relationship from your contact book</p> <p>Important</p> <p>This request is relative to <code>https://api.groupme.com/v4/</code>, not <code>https://api.groupme.com/v3/</code>.</p> HTTP Request<pre><code>DELETE https://api.groupme.com/v4/relationships/:user_id\n</code></pre> HTTP Response<pre><code>Status: 202 Accepted\n</code></pre>"},{"location":"video/","title":"Uploading Videos","text":"<p>To upload a video to be processed to GroupMe's video processing service, POST to <code>https://video.groupme.com/transcode</code> with the  following included in the HTTP header:</p> <pre><code>Content-Type: multipart/form-data;boundary=[MIME_BOUNDARY]\nX-Conversation-Id: [GROUP_ID]\nX-Access-Token: [ACCESS_TOKEN]\n</code></pre> <p>Note: if you are using some kind of library to send the file, you shouldn't have to worry about the content type, as the library should handle that part for you.</p> <p>The video should be in the POST request as multipart/form-data file The equivalent curl command is: </p> <pre><code>curl 'https://video.groupme.com/transcode' -X POST -H \"X-Access-Token: [ACCESS_TOKEN]\" -H \"X-Conversation-Id: [GROUP_ID]\" --form file=\"@[FILE_NAME]\"\n</code></pre> <p>A properly uploaded video should have a response of <code>200 OK</code> to the previous request, along with a JSON object containing a job status id: HTTP Response<pre><code>Status: 200 OK\n{\n  \"status_url\":\"https://video.groupme.com/status?job=[JOB_UUID]\"\n}\n</code></pre></p> <p>To get the status of a working job, GET <code>https://video.groupme.com/status?job=[JOB_UUID]</code> A complete job will contain the following JSON in the response, with a header of <code>201 Created</code>: HTTP Response<pre><code>Status: 201 Created\n{\n  \"status\":\"complete\",\n  \"url\":\"[VIDEO_URL]\",\n  \"thumbnail_url\":\"[THUMB_IMAGE_URL]\"\n}\n</code></pre></p> <p>The completed video upload is ready to send as an attachment</p>"}]}